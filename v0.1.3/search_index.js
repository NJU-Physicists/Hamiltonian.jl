var documenterSearchIndex = {"docs":
[{"location":"man/Essentials/Introduction/","page":"Introduction","title":"Introduction","text":"CurrentModule = QuantumLattices.Essentials","category":"page"},{"location":"man/Essentials/Introduction/#essentials","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"man/Essentials/Introduction/","page":"Introduction","title":"Introduction","text":"Essentials of the package, whose constants, types and functions will be imported when using import QuantumLattices or using QuantumLattices. Note that this submodule depends on the Prerequisites and Mathematics submodules although the variables in them are not exported to the scope of QuantumLattices by default.","category":"page"},{"location":"man/Essentials/Introduction/","page":"Introduction","title":"Introduction","text":"Pages = [\n        \"Spatials.md\",\n        \"DegreesOfFreedom.md\",\n        \"Terms.md\",\n        \"FockPackage.md\",\n        \"SpinPackage.md\",\n        \"Frameworks.md\",\n        ]\nDepth = 2","category":"page"},{"location":"man/Essentials/Spatials/","page":"Spatials","title":"Spatials","text":"CurrentModule = QuantumLattices.Essentials.Spatials","category":"page"},{"location":"man/Essentials/Spatials/","page":"Spatials","title":"Spatials","text":"push!(LOAD_PATH,\"../../../../src/\")\nusing QuantumLattices","category":"page"},{"location":"man/Essentials/Spatials/#Spatials","page":"Spatials","title":"Spatials","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Utilities","page":"Spatials","title":"Utilities","text":"","category":"section"},{"location":"man/Essentials/Spatials/#AbstractBond","page":"Spatials","title":"AbstractBond","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Point","page":"Spatials","title":"Point","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Bond","page":"Spatials","title":"Bond","text":"","category":"section"},{"location":"man/Essentials/Spatials/#AbstractLattice","page":"Spatials","title":"AbstractLattice","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Lattice","page":"Spatials","title":"Lattice","text":"","category":"section"},{"location":"man/Essentials/Spatials/#SuperLattice","page":"Spatials","title":"SuperLattice","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Cylinder","page":"Spatials","title":"Cylinder","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Bonds","page":"Spatials","title":"Bonds","text":"","category":"section"},{"location":"man/Essentials/Spatials/#Manual","page":"Spatials","title":"Manual","text":"","category":"section"},{"location":"man/Essentials/Spatials/","page":"Spatials","title":"Spatials","text":"Modules = [Spatials]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.acrossbonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.acrossbonds","text":"acrossbonds\n\nIndicate that bonds across the unitcell are inquired, which are in fact those across the periodic boundaries.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.allbonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.allbonds","text":"allbonds\n\nIndicate that all bonds are inquired.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.insidebonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.insidebonds","text":"insidebonds\n\nIndicate that bonds inside the unitcell are inquired, which do not contain those across the periodic boundaries.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.interbonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.interbonds","text":"interbonds\n\nIndicate that bonds inter the sublattices are inquired.\n\nnote: Note\nThese bonds do not contain those accorss the periodic boundaries.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.intrabonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.intrabonds","text":"intrabonds\n\nIndicate that bonds intra the sublattices are inquired.\n\nnote: Note\nThese bonds do not contain those accorss the periodic boundaries.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.zerothbonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.zerothbonds","text":"zerothbonds\n\nIndicate that zeroth bonds, i.e. the points are inquired.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.AbstractBond","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.AbstractBond","text":"AbstractBond{N, P<:PID, R}\n\nAbstract bond.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.AbstractLattice","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.AbstractLattice","text":"AbstractLattice{P<:PID, N}\n\nAbstract type for all lattices.\n\nIt should have the following attributes\n\nname::String: the name of the lattice\npids::Vector{P}: the pids of the lattice\nrcoords::Matrix{Float}: the rcoords of the lattice\nicoords::Matrix{Float}: the icoords of the lattice\nvectors::Vector{SVector{N, Float}}: the translation vectors of the lattice\nreciprocals::Vector{SVector{N, Float}}: the reciprocals of the lattice\nneighbors::Dict{Int, Float}: the order-distance map of the nearest neighbors of the lattice\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.Bond","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.Bond","text":"Bond(neighbor::Int, spoint::Point, epoint::Point)\n\nA bond in a lattice.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.Bonds","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.Bonds","text":"Bonds{T, L}(bonds::Tuple{Vararg{Vector{<:AbstractBond}}}) where {T, L<:AbstractLattice}\nBonds(lattice::AbstractLattice, types::LatticeBonds...)\n\nA set of lattice bonds.\n\nBonds itself is an AbstractVector of AbstractBond. The need for such a struct is to ensure the type stability during the iteration over a set of different concrete bonds. Although the default iterate function does not achieve this goal, users can get it with the generated function trick. Besides, it provides a high level of management of different categories of bonds based on the LatticeBonds system.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.Cylinder","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.Cylinder","text":"Cylinder{P}(name::String,\n            block::AbstractMatrix{<:Real},\n            translation::SVector{N, <:Real};\n            vector::Union{AbstractVector{<:Real}, Nothing}=nothing,\n            neighbors::Union{Dict{Int, <:Real}, Int}=1\n            ) where {P<:PID, N}\n\nCylinder of 1d and quasi 2d lattices.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.Cylinder-Tuple","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.Cylinder","text":"(cylinder::Cylinder)(scopes::Any...; coordination::Int=8) -> Lattice\n\nConstruct a lattice from a cylinder with the assigned scopes.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.Lattice","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.Lattice","text":"Lattice{N}( name::String,\n            pids::Vector{<:PID},\n            rcoords::AbstractMatrix{<:Real},\n            icoords::AbstractMatrix{<:Real},\n            vectors::AbstractVector{<:AbstractVector{<:Real}},\n            neighbors::Union{Dict{Int, <:Real}, Int}=1;\n            coordination::Int=8\n            ) where N\nLattice(    name::String,\n            points::AbstractVector{<:Point};\n            vectors::AbstractVector{<:AbstractVector{<:Real}}=SVector{0, SVector{points|>eltype|>dimension, Float}}(),\n            neighbors::Union{Dict{Int, <:Real}, Int}=1,\n            coordination::Int=8\n            )\nLattice(    name::String,\n            sublattices::AbstractVector{<:AbstractLattice};\n            vectors::AbstractVector{<:AbstractVector{<:Real}}=SVector{0, SVector{sublattices|>eltype|>dimension, Float}}(),\n            neighbors::Union{Dict{Int, <:Real}, Int}=1,\n            coordination::Int=8\n            )\n\nSimplest lattice.\n\nA simplest lattice can be construted from its contents, i.e. pids, rcoords and icoords, or from a couple of points, or from a couple of sublattices.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.LatticeIndex","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.LatticeIndex","text":"LatticeIndex{Kind}(index::Union{PID, Int}) where Kind\n\nLattice index.\n\nKind must be one of the followings:\n\n'R': for getting the rcoord of a lattice\n'I': for getting the icoord of a lattice\n'P': for getting the point of a lattice\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.PID","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.PID","text":"PID(scope, site::Int)\nPID(site::Int)\nPID(; scope=\"tz\", site::Int=1)\n\nThe id of a point.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.Point","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.Point","text":"Point(pid::PID, rcoord::SVector{N, <:Real}, icoord::SVector{N, <:Real}) where N\nPoint(pid::PID, rcoord::NTuple{N, <:Real}, icoord::NTuple{N, <:Real}=ntuple(i->0.0, N)) where N\nPoint(pid::PID, rcoord::AbstractVector{<:Real}, icoord::AbstractVector{<:Real}=zero(SVector{length(rcoord), Float}))\nPoint{N}(pid::PID, rcoord::AbstractVector{<:Real}, icoord::AbstractVector{<:Real}=zero(SVector{N, Float})) where N\n\nLabeled point.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.SuperLattice","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.SuperLattice","text":"SuperLattice(   name::String,\n                sublattices::AbstractVector{<:AbstractLattice};\n                vectors::AbstractVector{<:AbstractVector{<:Real}}=SVector{0, SVector{sublattices|>eltype|>dimension, Float}}(),\n                neighbors::Dict{Int, <:Real}=Dict{Int, Float}()\n                )\n\nSuperLattice that is composed of serveral sublattices.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Spatials/#Base.:==-Tuple{AbstractLattice,AbstractLattice}","page":"Spatials","title":"Base.:==","text":"==(lattice1::AbstractLattice, lattice2::AbstractLattice) -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.:==-Tuple{Bonds,Bonds}","page":"Spatials","title":"Base.:==","text":"==(bonds1::Bonds, bonds2::Bonds) -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.:==-Union{Tuple{R}, Tuple{P}, Tuple{N}, Tuple{AbstractBond{N,P,R},AbstractBond{N,P,R}}} where R where P<:PID where N","page":"Spatials","title":"Base.:==","text":"==(b1::AbstractBond{N, P, R}, b2::AbstractBond{N, P, R}) where {N, P<:PID, R} -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.eltype-Tuple{AbstractBond}","page":"Spatials","title":"Base.eltype","text":"eltype(bond::AbstractBond)\neltype(::Type{<:AbstractBond{N, P}}) where {N, P<:PID}\n\nGet the eltype of a bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.empty!-Tuple{Bonds}","page":"Spatials","title":"Base.empty!","text":"empty!(bs::Bonds) -> Bonds\n\nEmpty a set of lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.empty-Tuple{Bonds}","page":"Spatials","title":"Base.empty","text":"empty(bs::Bonds) -> Bonds\n\nGet an empty copy of a set of lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.filter","page":"Spatials","title":"Base.filter","text":"filter(lbs::LatticeBonds, bs::Bonds, choice::Union{Val{:include}, Val{:exclude}}=Val(:include)) -> Bonds\nfilter(lbs::Tuple{Vararg{LatticeBonds}}, bs::Bonds, choice::Union{Val{:include}, Val{:exclude}}=Val(:include)) -> Bonds\n\nGet a subset of a set of lattice bonds.\n\nWhen choice=Val(:include), the lattice bonds indicated by lbs will be selected;  When choice=Val(:exclude), the lattice bonds not indicated by lbs will be selected.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Spatials/#Base.filter-Tuple{Function,Bonds}","page":"Spatials","title":"Base.filter","text":"filter(select::Function, bs::Bonds) -> Bonds\n\nGet a filtered set of bonds by a select function.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.getindex-Tuple{AbstractLattice,LatticeIndex{'R',Int64}}","page":"Spatials","title":"Base.getindex","text":"getindex(lattice::AbstractLattice, i::LatticeIndex{'R'}) -> SVector\ngetindex(lattice::AbstractLattice, i::LatticeIndex{'I'}) -> SVector\ngetindex(lattice::AbstractLattice, i::LatticeIndex{'P'}) -> Point\n\nGet a rcoord, an icoord or a point of a lattice according to the type of the input index.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.getindex-Tuple{Bonds,Int64}","page":"Spatials","title":"Base.getindex","text":"getindex(bs::Bonds, i::Int) -> eltype(bs)\n\nGet the ith bond in the set.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.insert!-Union{Tuple{S}, Tuple{Cylinder,Vararg{S,N} where N}} where S","page":"Spatials","title":"Base.insert!","text":"insert!(cylinder::Cylinder, ps::S...; cut::Int=length(cylinder)÷2+1, scopes::Union{<:AbstractVector{S}, Nothing}=nothing, coordination::Int=9) where S -> Cylinder\n\nInsert a couple of blocks into a cylinder.\n\nThe position of the cut of the cylinder is specified by the keyword argument cut, which is the center of the cylinder by default. All pids corresponding to a same newly inserted block share the same scope, which is specified by the parameter ps. Optionally, the scopes of the old pids in the cylinder can be replaced if the parameter scopes is assigned other than nothing. Note the length of ps is equal to the number of newly inserted blocks, while that of scopes should be equal to the old length of the cylinder.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.isequal-Tuple{AbstractLattice,AbstractLattice}","page":"Spatials","title":"Base.isequal","text":"isequal(lattice1::AbstractLattice, lattice2::AbstractLattice) -> Bool\n\nOverloaded equivalent function.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.isequal-Tuple{Bonds,Bonds}","page":"Spatials","title":"Base.isequal","text":"isequal(bonds1::Bonds, bonds2::Bonds) -> Bool\n\nOverloaded equivalent function.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.isequal-Union{Tuple{R}, Tuple{P}, Tuple{N}, Tuple{AbstractBond{N,P,R},AbstractBond{N,P,R}}} where R where P<:PID where N","page":"Spatials","title":"Base.isequal","text":"isequal(b1::AbstractBond{N, P, R}, b2::AbstractBond{N, P, R}) where {N, P<:PID, R} -> Bool\n\nOverloaded equivalent function.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.iterate","page":"Spatials","title":"Base.iterate","text":"iterate(bond::Bond, state=1)\n\nIterate over the points in a bond.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Spatials/#Base.iterate-2","page":"Spatials","title":"Base.iterate","text":"iterate(p::Point, state=1)\n\nIterate over the point.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Spatials/#Base.iterate-3","page":"Spatials","title":"Base.iterate","text":"iterate(bs::Bonds, state=(1, 0))\n\nIterate over the lattice bonds in the set.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Spatials/#Base.keytype-Tuple{AbstractLattice}","page":"Spatials","title":"Base.keytype","text":"keytype(lattice::AbstractLattice)\nkeytype(::Type{<:AbstractLattice{N, P} where N}) where {P<:PID}\n\nGet the pid type of the lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.length-Tuple{AbstractBond}","page":"Spatials","title":"Base.length","text":"length(bond::AbstractBond) -> Int\nlength(::Type{<:AbstractBond{N, <:PID, R} where N}) where R -> Int\n\nGet the number of points of a bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.length-Tuple{AbstractLattice}","page":"Spatials","title":"Base.length","text":"length(lattice::AbstractLattice) -> Int\n\nGet the number of points contained in a lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.reverse-Tuple{Bond}","page":"Spatials","title":"Base.reverse","text":"reverse(bond::Bond) -> Bond\n\nGet the reversed bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.show-Tuple{IO,AbstractLattice}","page":"Spatials","title":"Base.show","text":"show(io::IO, lattice::AbstractLattice)\n\nShow a lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.show-Tuple{IO,Bond}","page":"Spatials","title":"Base.show","text":"show(io::IO, bond::Bond)\n\nShow a bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.show-Tuple{IO,Point}","page":"Spatials","title":"Base.show","text":"show(io::IO, p::Point)\n\nShow a labeled point.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.size-Tuple{Bonds}","page":"Spatials","title":"Base.size","text":"size(bs::Bonds) -> Tuple{Int}\n\nGet the size of the set of lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.summary-Tuple{IO,Bonds}","page":"Spatials","title":"Base.summary","text":"summary(io::IO, bs::Bonds)\n\nPrint the brief description of a set of lattice bonds to an io.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#Base.valtype-Tuple{AbstractLattice}","page":"Spatials","title":"Base.valtype","text":"valtype(lattice::AbstractLattice)\nvaltype(::Type{<:AbstractLattice{N, P}}) where {N, P<:PID}\n\nGet the point type of the lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.azimuth-Tuple{AbstractArray{var\"#s317\",1} where var\"#s317\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.azimuth","text":"azimuth(v::AbstractVector{<:Real}) -> Float\n\nGet the azimuth angle in radians of a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.azimuthd-Tuple{AbstractArray{var\"#s317\",1} where var\"#s317\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.azimuthd","text":"azimuthd(v::AbstractVector{<:Real}) -> Float\n\nGet the azimuth angle in degrees of a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.bonds!-Tuple{Array{T,1} where T,AbstractLattice}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.bonds!","text":"bonds!(bonds::Vector, lattice::AbstractLattice, inquiries::LatticeBonds...) -> Vector\nbonds!(bonds::Vector, lattice::AbstractLattice, ::Val{zerothbonds}) -> Vector\nbonds!(bonds::Vector, lattice::AbstractLattice, ::Val{insidebonds}) -> Vector\nbonds!(bonds::Vector, lattice::AbstractLattice, ::Val{acrossbonds}) -> Vector\n\nGenerate the required bonds of a lattice and append them to the input bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.bonds!-Tuple{Array{T,1} where T,SuperLattice,Val{QuantumLattices.Essentials.Spatials.IntraBonds()}}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.bonds!","text":"bonds!(bonds::Vector, lattice::SuperLattice, ::Val{intrabonds}) -> Vector\nbonds!(bonds::Vector, lattice::SuperLattice, ::Val{interbonds}) -> Vector\n\nGenerate the required bonds of a superlattice and append them to the input bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.bonds-Tuple{AbstractLattice}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.bonds","text":"bonds(lattice::AbstractLattice, inquiry=allbonds) -> Vector{eltype(lattice|>typeof, inquiry)}\nbonds(lattice::AbstractLattice, inquiries...) -> Vector{mapreduce(inquiry->eltype(lattice|>typeof, inquiry), typejoin, inquiries)}\n\nGenerate the required bonds of a lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.bondtypes-Tuple{Bonds}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.bondtypes","text":"bondtypes(bs::Bonds) -> Tuple{Vararg{LatticeBonds}}\nbondtypes(::Type{<:Bonds{T}}) where T -> Tuple{Vararg{LatticeBonds}}\n\nGet the bondtypes of a set of lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.distance-Tuple{AbstractArray{var\"#s304\",1} where var\"#s304\"<:Real,AbstractArray{var\"#s22\",1} where var\"#s22\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.distance","text":"distance(p1::AbstractVector{<:Real}, p2::AbstractVector{<:Real}) -> Float\n\nGet the distance between two points.\n\nnote: Note\nCompared to norm(p1-p2), this function avoids the memory allocation for p1-p2, thus is more efficient.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.icoord-Tuple{Bond}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.icoord","text":"icoord(bond::Bond) -> SVector\n\nGet the icoord of the bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.interlinks-Tuple{AbstractArray{var\"#s328\",2} where var\"#s328\"<:Real,AbstractArray{var\"#s327\",2} where var\"#s327\"<:Real,Dict{Int64,Float64}}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.interlinks","text":"interlinks(cluster1::AbstractMatrix{<:Real}, cluster2::AbstractMatrix{<:Real}, neighbors::Dict{Int, Float}) -> Vector{Tuple{Int, Int, Int}}\n\nUse kdtree to get the intercluster nearest neighbors.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.intralinks-Union{Tuple{N}, Tuple{AbstractArray{var\"#s323\",2} where var\"#s323\"<:Real,AbstractArray{var\"#s322\",1} where var\"#s322\"<:(AbstractArray{var\"#s321\",1} where var\"#s321\"<:Real),Dict{Int64,Float64}}, Tuple{AbstractArray{var\"#s320\",2} where var\"#s320\"<:Real,AbstractArray{var\"#s319\",1} where var\"#s319\"<:(AbstractArray{var\"#s318\",1} where var\"#s318\"<:Real),Dict{Int64,Float64},Tuple{Vararg{Int64,N}}}} where N","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.intralinks","text":"intralinks( cluster::AbstractMatrix{<:Real},\n            vectors::AbstractVector{<:AbstractVector{<:Real}},\n            neighbors::Dict{Int, Float},\n            maxtranslations::NTuple{N, Int}=ntuple(i->length(neighbors), length(vectors))\n            ) where N -> Vector{Tuple{Int, Int, Int, SubArray{<:Real, 1}}}\n\nUse kdtree to get the intracluster nearest neighbors.\n\nAs is similar to minimumlengths, when vectors is nonempty, the cluster assumes periodic boundaries. neighbors provides the map between the bond length and the order of nearest neighbors. Note only those with the lengths present in neighbors will be included in the result. maxtranslations determines the maximum number of translations along those directions specified by vectors when the tiled supercluster is construted (See minimumlengths for the explanation of the method for periodic lattices).\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.isintracell-Tuple{Bond}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.isintracell","text":"isintracell(bond::Bond) -> Bool\n\nJudge whether a bond is intra the unit cell of a lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.isintratriangle-Tuple{AbstractArray{var\"#s15\",1} where var\"#s15\"<:Real,AbstractArray{var\"#s14\",1} where var\"#s14\"<:Real,AbstractArray{var\"#s13\",1} where var\"#s13\"<:Real,AbstractArray{var\"#s12\",1} where var\"#s12\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.isintratriangle","text":"isintratriangle(p::AbstractVector{<:Real},\n                p1::AbstractVector{<:Real},\n                p2::AbstractVector{<:Real},\n                p3::AbstractVector{<:Real};\n                vertexes::NTuple{3, Bool}=(true, true, true),\n                edges::NTuple{3, Bool}=(true, true, true),\n                atol::Real=atol,\n                rtol::Real=rtol\n                ) -> Bool\n\nJudge whether a point belongs to the interior of a triangle whose vertexes are p1, 'p2' and p3 with the give tolerance. vertexes and edges define whether the interior should contain the vertexes or edges, respectively.\n\nnote: Note\nThe vertexes are in the order (p1, p2, p3) and the edges are in the order (p1p2, p2p3, p3p1).\nThe edges do not contain the vertexes.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.isonline-Tuple{AbstractArray{var\"#s15\",1} where var\"#s15\"<:Real,AbstractArray{var\"#s14\",1} where var\"#s14\"<:Real,AbstractArray{var\"#s13\",1} where var\"#s13\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.isonline","text":"isonline(p::AbstractVector{<:Real}, p1::AbstractVector{<:Real}, p2::AbstractVector{<:Real}; ends::Tuple{Bool, Bool}=(true, true), atol::Real=atol, rtol::Real=rtol) -> Bool\n\nJudge whether a point is on a line segment whose end points are p1 and p2 with the given tolerance. ends defines whether the line segment should contain its ends.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.isparallel-Tuple{AbstractArray{var\"#s19\",1} where var\"#s19\"<:Real,AbstractArray{var\"#s18\",1} where var\"#s18\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.isparallel","text":"isparallel(v1::AbstractVector{<:Real}, v2::AbstractVector{<:Real}; atol::Real=atol, rtol::Real=rtol) -> Int\n\nJudge whether two vectors are parallel to each other with the given tolerance, 0 for not parallel, 1 for parallel and -1 for antiparallel.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.issubordinate-Tuple{AbstractArray{var\"#s325\",1} where var\"#s325\"<:Real,AbstractArray{var\"#s324\",1} where var\"#s324\"<:(AbstractArray{var\"#s323\",1} where var\"#s323\"<:Real)}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.issubordinate","text":"issubordinate(rcoord::AbstractVector{<:Real}, vectors::AbstractVector{<:AbstractVector{<:Real}}; atol::Real=atol, rtol::Real=rtol) -> Bool\n\nJudge whether a coordinate belongs to a lattice defined by vectors with the given tolerance.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.latticebondsstructure-Tuple{Type{var\"#s333\"} where var\"#s333\"<:AbstractLattice}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.latticebondsstructure","text":"latticebondsstructure(::Type{<:AbstractLattice}) -> SimpleTree{LatticeBonds, Nothing}\n\nThe tree structure of the lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.latticebondsstructure-Tuple{Type{var\"#s464\"} where var\"#s464\"<:SuperLattice}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.latticebondsstructure","text":"latticebondsstructure(::Type{<:SuperLattice}) -> SimpleTree{LatticeBonds, Nothing}\n\nThe tree structure of the lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.latticetype-Tuple{Bonds}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.latticetype","text":"latticetype(bs::Bonds)\nlatticetype(::Type{<:Bonds{T, L} where T}) where {L<:AbstractLattice}\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.latticetype-Tuple{SuperLattice}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.latticetype","text":"latticetype(sl::SuperLattice)\nlatticetype(::Type{<:SuperLattice{L}}) where {L<:AbstractLattice}\n\nGet the sublattice type of a superlattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.minimumlengths","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.minimumlengths","text":"minimumlengths(cluster::AbstractMatrix{<:Real}, vectors::AbstractVector{<:AbstractVector{<:Real}}, nneighbor::Int=1; coordination::Int=8) -> Vector{Float}\n\nUse kdtree to search the lowest several minimum bond lengths within a lattice translated by a cluster.\n\nWhen the translation vectors are not empty, the lattice will be considered periodic in the corresponding directions. Otherwise the lattice will be open in all directions. To search for the bonds accorss the periodic boundaries, the cluster will be pretranslated to become a supercluster, which has open boundaries but is large enough to contain all the nearest neighbors within the required order. The coordination parameter sets the average number of each order of nearest neighbors. If it is to small, larger bond lengths may not be searched, and the result will contain Inf. This is a sign that you may need a larger coordination. Another situation that Inf appears in the result occurs when the minimum lengths are searched in open lattices. Indeed, the cluster may be too small so that the required order just goes beyond it. In this case the warning message can be safely ignored.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.nneighbor-Tuple{AbstractLattice}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.nneighbor","text":"nneighbor(lattice::AbstractLattice) -> Int\n\nGet the highest order of nearest neighbors.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.pidtype-Tuple{AbstractBond}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.pidtype","text":"pidtype(bond::AbstractBond)\npidtype(::Type{<:AbstractBond{N, P} where N}) where {P<:PID}\n\nGet the pid type of a concrete bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.polar-Tuple{AbstractArray{var\"#s317\",1} where var\"#s317\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.polar","text":"polar(v::AbstractVector{<:Real}) -> Float\n\nGet the polar angle in radians of a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.polard-Tuple{AbstractArray{var\"#s317\",1} where var\"#s317\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.polard","text":"polard(v::AbstractVector{<:Real}) -> Float\n\nGet the polar angle in degrees of a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.rcoord-Tuple{Bond}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.rcoord","text":"rcoord(bond::Bond) -> SVector\n\nGet the rcoord of the bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.reciprocals-Tuple{AbstractArray{var\"#s332\",1} where var\"#s332\"<:(AbstractArray{var\"#s331\",1} where var\"#s331\"<:Real)}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.reciprocals","text":"reciprocals(vectors::AbstractVector{AbstractVector{<:Real}}) -> Vector{Vector{Float}}\n\nGet the reciprocals dual to the input vectors.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.rotate-Tuple{AbstractArray{var\"#s319\",2} where var\"#s319\"<:Real,Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.rotate","text":"rotate(cluster::AbstractMatrix{<:Real}, angle::Real; axis::Tuple{Union{AbstractVector{<:Real}, Nothing}, Tuple{<:Real, <:Real}}=(nothing, (0, 0))) -> Matrix{Float}\n\nGet a rotated cluster of the original one by a certain angle around an axis.\n\nThe axis is determined by a point it gets through (nothing can be used to denote the origin), and its polar as well as azimuth angles in radians. The default axis is the z axis.\n\nnote: Note\nThe result is given by the Rodrigues' rotation formula.\nOnly 2 and 3 dimensional vectors can be rotated.\nWhen the input vectors are 2 dimensional, both the polar and azimuth of the axis must be 0.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.tile-Union{Tuple{M}, Tuple{N}, Tuple{AbstractArray{var\"#s322\",2} where var\"#s322\"<:Real,AbstractArray{var\"#s321\",1} where var\"#s321\"<:(AbstractArray{var\"#s320\",1} where var\"#s320\"<:Real)}, Tuple{AbstractArray{var\"#s319\",2} where var\"#s319\"<:Real,AbstractArray{var\"#s318\",1} where var\"#s318\"<:(AbstractArray{var\"#s317\",1} where var\"#s317\"<:Real),Tuple{Vararg{Tuple{Vararg{var\"#s311\",N}} where var\"#s311\"<:Real,M}}}} where M where N","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.tile","text":"tile(cluster::AbstractMatrix{<:Real}, vectors::AbstractVector{<:AbstractVector{<:Real}}, translations::NTuple{M, NTuple{N, <:Real}}=()) where {N, M} -> Matrix{Float}\n\nTile a supercluster by translations of the input cluster.\n\nBasically, the final supercluster is composed of several parts, each of which is a translation of the original cluster, with the translation vectors specified by vectors and each set of the translation indices contained in translations. When translation vectors are empty, a copy of the original cluster will be returned.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.translate-Tuple{AbstractArray{var\"#s333\",2} where var\"#s333\"<:Real,AbstractArray{var\"#s332\",1} where var\"#s332\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.translate","text":"translate(cluster::AbstractMatrix{<:Real}, vector::AbstractVector{<:Real}) -> Matrix{vector|>eltype}\n\nGet the translated cluster of the original one by a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Essentials.Spatials.volume-Tuple{AbstractArray{var\"#s304\",1} where var\"#s304\"<:Real,AbstractArray{var\"#s22\",1} where var\"#s22\"<:Real,AbstractArray{var\"#s21\",1} where var\"#s21\"<:Real}","page":"Spatials","title":"QuantumLattices.Essentials.Spatials.volume","text":"volume(v1::AbstractVector{<:Real}, v2::AbstractVector{<:Real}, v3::AbstractVector{<:Real}) -> Real\n\nGet the volume spanned by three vectors.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.decompose-Tuple{AbstractArray{var\"#s319\",1} where var\"#s319\"<:Real,AbstractArray{var\"#s318\",1} where var\"#s318\"<:Real}","page":"Spatials","title":"QuantumLattices.Interfaces.decompose","text":"decompose(v0::AbstractVector{<:Real}, v1::AbstractVector{<:Real}) -> Tuple{Float}\ndecompose(v0::AbstractVector{<:Real}, v1::AbstractVector{<:Real}, v2::AbstractVector{<:Real}) -> Tuple{Float, Float}\ndecompose(v0::AbstractVector{<:Real}, v1::AbstractVector{<:Real}, v2::AbstractVector{<:Real}, v3::AbstractVector{<:Real}) -> Tuple{Float, Float, Float}\n\nDecompose a vector with respect to input basis vectors.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.dimension-Tuple{AbstractBond}","page":"Spatials","title":"QuantumLattices.Interfaces.dimension","text":"dimension(bond::AbstractBond) -> Int\ndimension(::Type{<:AbstractBond{N}}) where N -> Int\n\nGet the space dimension of a concrete bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.dimension-Tuple{AbstractLattice}","page":"Spatials","title":"QuantumLattices.Interfaces.dimension","text":"dimension(lattice::AbstractLattice) -> Int\ndimension(::Type{<:AbstractLattice{N}}) where N -> Int\n\nGet the space dimension of the lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.expand-Union{Tuple{VS}, Tuple{L}, Tuple{Type{L},Val{VS}}} where VS where L<:AbstractLattice","page":"Spatials","title":"QuantumLattices.Interfaces.expand","text":"expand(::Type{L}, ::Val{VS}) where {L<:AbstractLattice, VS} -> Tuple\n\nExpand the lattice bond types to the leaf level.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.kind-Tuple{Bond}","page":"Spatials","title":"QuantumLattices.Interfaces.kind","text":"kind(bond::Bond) -> Int\n\nGet the bond kind of a bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.kind-Tuple{Point}","page":"Spatials","title":"QuantumLattices.Interfaces.kind","text":"kind(::Point) -> 0\nkind(::Type{<:Point}) -> 0\n\nGet the bond kind of a point, which is defined to be 0.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.rank-Tuple{AbstractBond}","page":"Spatials","title":"QuantumLattices.Interfaces.rank","text":"rank(bond::AbstractBond) -> Int\nrank(::Type{<:AbstractBond{N, <:PID, R} where N}) where R -> Int\n\nGet the rank of a bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.rank-Tuple{Bonds}","page":"Spatials","title":"QuantumLattices.Interfaces.rank","text":"rank(bs::Bonds) -> Int\nrank(::Type{<:Bonds{T}}) where T -> Int\n\nGet the rank of a set of lattice bonds.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Spatials/#QuantumLattices.Interfaces.reset!-Tuple{Bonds,AbstractLattice}","page":"Spatials","title":"QuantumLattices.Interfaces.reset!","text":"reset!(bs::Bonds, lattice::AbstractLattice) -> Bonds\n\nReset a set of lattice bonds by a new lattice.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"CurrentModule = QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#Internal-degrees-of-freedom","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Now let's move to the second step. A main feature of a quantum lattice system is that one can decompose the whole Hilbert space into local ones. Correspondingly, the Hamiltonian of the system can always be expressed by products/sums of local generators of the algebras acting on these local Hilbert spaces. Thus, a parallel to the spatial info of the unitcell of the lattice system is the internal degrees of freedom that \"lives\" in each spatial point.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#Internal,-IID-and-Index","page":"Internal degrees of freedom","title":"Internal, IID and Index","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Different kinds of quantum lattice systems can have different species of local Hilbert spaces. For example, the local Hilbert space of a complex fermionic/bosonic system is the Fock space whereas that of a spin-1/2 system is the two-dimensional lvertuparrowrangle lvertdownarrowrangle space. The abstract type Internal is an abstraction of local Hilbert spaces. More precisely, it is an abstraction of local algebras acting on these local Hilbert spaces. To specify a generator of such a local algebra, two sets of tags are needed: one identifies which the local algebra is and the other represents which the internal degree of freedom is. The former is already encoded by a PID object, and the latter will be stored in an object of a concrete subtype of the abstract type IID. These two sets of tags are combined to be the Index type. Since different IIDs can have different tags, Index is also an abstract type. For every concrete IID subtype, there corresponds a concrete Index subtype. In short, a concrete Internal object generates all concrete IID objects, which combined with the spatial tags provided by a PID object to be concrete Index objects, define the complete indices needed to specify the generators of the local algebras to construct the Hamiltonian.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"In this package, we implement two groups of concrete subtypes to handle with the following two sets of systems, respectively:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Canonical fermionic, canonical bosonic and hard-core bosonic systems,\nSU(2) spin systems.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#Fock,-FID-and-FIndex","page":"Internal degrees of freedom","title":"Fock, FID and FIndex","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"push!(LOAD_PATH, \"../../../src/\")\nusing QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"This group of concrete subtypes are designed to deal with canonical fermionic, canonical bosonic and hard-core bosonic systems.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Roughly speaking, these systems share similar internal structures of local Hilbert spaces termed as the Fock space where the generators of local algebras are the annihilation and creation operators. Besides the spatial index, such an operator usually adopts an orbital index and a spin index. It also needs a nambu index to distinguish whether it is an annihilation one or a creation one. Thus, the type FID<:IID, which specifies a certain internal degree of freedom of a local Fock space, has the following attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"orbital::Int: the orbital index\nspin::Int: the spin index\nnambu::Int: the nambu index, which must be 0, 1(annihilation) or 2(creation).","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Correspondingly, the type Fock<:Internal, which specifies the whole internal structure of a local Fock space, has the following attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"atom::Int: the atom index associated with a local Hilbert space\nnorbital::Int: the number of allowed orbital indices\nnspin::Int: the number of allowed spin indices\nnnambu::Int: the number of allowed nambu indices, which must be either 1 or 2.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"It is noted that we also associate an atom index with each Fock instance, which proves to be helpful in future usages.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"One more remark. The :nambu attribute of an FID instance can be 1 or 2, which means it represents an annihilation operator or a creation operator, respectively. This corresponds to a usual complex fermionic/bosonic system. The :nambu attribute can also be 0. In this case, it corresponds to a real fermionic/bosonic system where annihilation and creation operators are identical to each other, e.g. a Majorana fermionic system. Accordingly, The :nnambu attribute of a Fock instance can be either 2 or 1. Being 2, it allows usual complex annihilation/creation operators, while being 1 it only allows real fermionic/bosonic operators.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"The type FIndex<:Index gathers all the tags in PID and FID, which apparently has the following attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"scope::Any: the scope of a point\nsite::Int: the site index of a point\norbital::Int: the orbital index\nspin::Int: the spin index\nnambu::Int: the nambu index, which must be 0, 1(annihilation) or 2(creation).","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"It is the complete set of tags to specify a generator of local algebras of such systems.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Now let's see some examples.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"An FID instance can be initialized by giving all its three attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"FID(2, 2, 1)","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Or you can only specify part of the three by key word arguments and the others will get default values:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"FID() # default values: orbital=1, spin=1, nambu=1\nFID(spin=2, nambu=0)","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"The adjoint of an FID instance is also defined:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"FID(orbital=3, spin=4, nambu=1)'\nFID(orbital=3, spin=4, nambu=2)'\nFID(orbital=3, spin=4, nambu=0)'","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Apparently, this operation is nothing but the \"Hermitian conjugate\".","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"An FIndex instance can be initialized as usual by giving all its attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"FIndex('a', 1, 3, 4, 0)","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Or it can be initialized by a PID instance and an FID instance:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"FIndex(PID('a', 1), FID(3, 4, 0))","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Conversely, the corresponding PID instance and FID instance can be extracted from an FIndex instance by the pid and iid method, respectively:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"fidx = FIndex(PID('a', 1), FID(3, 4, 0));\nfidx |> pid\nfidx |> iid","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Similar to FID, the adjoint of an FIndex instance is also defined:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"FIndex(PID('a', 1), FID(3, 4, 1))'\nFIndex(PID('a', 1), FID(3, 4, 2))'\nFIndex(PID('a', 1), FID(3, 4, 0))'","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"A Fock instance can be initialized by giving all its attributes or by key word arguments to specify those beyond the default values:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Fock(1, 1, 2, 2)\nFock() # default values: atom=1, norbital=1, nspin=2, nnambu=2\nFock(atom=2, norbital=2, nspin=1, nnambu=1)","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"As can be seen, a Fock instance behaves like a vector (because the parent type Internal is a subtype of AbstractVector), and its iteration just generates all the allowed FID instances on its associated spatial point:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"fck = Fock(atom=1, norbital=2, nspin=1, nnambu=2);\nfck |> typeof |> eltype\nfck |> length\n[fck[1], fck[2], fck[3], fck[4]]\nfck |> collect","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#Spin,-SID-and-SIndex","page":"Internal degrees of freedom","title":"Spin, SID and SIndex","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"push!(LOAD_PATH, \"../../../src/\")\nusing QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"This group of concrete subtypes are designed to deal with SU(2) spin systems.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Although spin systems are essentially bosonic, the local Hilbert space often used is distinct from that of a canonical bosonic system: it is the space spanned by the eigenstates of a local S^z operator rather than a \"Fock space\". At the same time, a spin Hamiltonian is usually expressed by local spin operators, such as S^x, S^y, S^z, S^+ and S^-, instead of creation and annihilation operators. Therefore, it is convenient to define another set of concrete subtypes for spin systems.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Apart from the spatial indices, a local spin operator can have an orbital index. It is also necessary to know what the total spin is. Besides, it needs an index to indicate which spin operator it is. Thus, the type SID, which specifies the internal degree of freedom of a local spin operator, has the following attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"orbital::Int: the orbital index\nspin::Float64: the total spin\ntag::Char: the tag, which must be 'x', 'y', 'z', '+' or '-'.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Correspondingly, the type Spin, which defines the whole internal structure of a local spin space, has the following attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"atom::Int: the atom index associated with a local spin space\nnorbital::Int: the number of allowed orbital indices\nspin::Float64: the total spin","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Similarly, the type SIndex, which encapsulates all indices needed to specify a local spin operator, is just a combination of the indices in PID and SID. Its attributes are as follows:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"scope::Any: the scope of a point\nsite::Int: the site index of a point\norbital::Int: the orbital index\nspin::Float64: the total spin\ntag::Char: the tag, which must be 'x', 'y', 'z', '+' or '-'.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Now let's see examples.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"An SID instance can be initialized as follows","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"SID(1, 1.5, 'x')\nSID() # default values: orbital=1, spin=0.5, tag='z'\nSID(orbital=2, spin=1.0, tag='+')","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"The \"Hermitian conjugate\" of an SID instance can be obtained by the adjoint operation:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"SID(1, 1.5, 'x')'\nSID(1, 1.5, 'y')'\nSID(1, 1.5, 'z')'\nSID(1, 1.5, '+')'\nSID(1, 1.5, '-')'","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Regardless of the local orbital space, the local spin space is determined by the total spin. The standard matrix representation of an SID instance on this local spin space can be obtained by the matrix function:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"SID(1, 0.5, 'x')' |> matrix\nSID(1, 0.5, 'y')' |> matrix\nSID(1, 0.5, 'z')' |> matrix\nSID(1, 0.5, '+')' |> matrix\nSID(1, 0.5, '-')' |> matrix","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"The usage of SIndex is completely parallel to that of FIndex:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"sidx = SIndex('a', 1, 3, 0.5, '-')\nsidx == SIndex(PID('a', 1), SID(3, 0.5, '-'))\nsidx |> pid\nsidx |> iid\nsidx'","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"A Spin instance can be initialized as follows:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Spin(1, 2, 1.0)\nSpin() # default values: atom=1, orbital=1, spin=0.5\nSpin(atom=2, norbital=1, spin=1.0)","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"Similar to Fock, a Spin instance behaves like a vector whose iteration generates all the allowed SID instances on its associated spatial point:","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"sp = Spin(atom=1, norbital=1, spin=1.0);\nsp |> typeof |> eltype\nsp |> length\n[sp[1], sp[2], sp[3], sp[4], sp[5]]\nsp |> collect","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/","page":"Internal degrees of freedom","title":"Internal degrees of freedom","text":"It is noted that a Spin instance generates SID instances corresponding to not only S^x, S^y and S^z,  but also S^+ and S^- although the former three already forms a complete set of generators of local spin algebras. This overcomplete feature is for the convenience to the construction of spin Hamiltonians.","category":"page"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#IDFConfig-and-Table","page":"Internal degrees of freedom","title":"IDFConfig and Table","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#Operator-and-Operators","page":"Internal degrees of freedom","title":"Operator and Operators","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#OID","page":"Internal degrees of freedom","title":"OID","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#FOperator-and-BOperator","page":"Internal degrees of freedom","title":"FOperator and BOperator","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/InternalDegreesOfFreedom/#latex-formatted-output","page":"Internal degrees of freedom","title":"latex-formatted output","text":"","category":"section"},{"location":"man/Essentials/Terms/","page":"Terms","title":"Terms","text":"CurrentModule = QuantumLattices.Essentials.Terms","category":"page"},{"location":"man/Essentials/Terms/","page":"Terms","title":"Terms","text":"push!(LOAD_PATH,\"../../../../src/\")\nusing QuantumLattices","category":"page"},{"location":"man/Essentials/Terms/#Terms","page":"Terms","title":"Terms","text":"","category":"section"},{"location":"man/Essentials/Terms/#Subscript-and-Subscripts","page":"Terms","title":"Subscript and Subscripts","text":"","category":"section"},{"location":"man/Essentials/Terms/#Coupling-and-Couplings","page":"Terms","title":"Coupling and Couplings","text":"","category":"section"},{"location":"man/Essentials/Terms/#Term","page":"Terms","title":"Term","text":"","category":"section"},{"location":"man/Essentials/Terms/#Generator","page":"Terms","title":"Generator","text":"","category":"section"},{"location":"man/Essentials/Terms/#Manual","page":"Terms","title":"Manual","text":"","category":"section"},{"location":"man/Essentials/Terms/","page":"Terms","title":"Terms","text":"Modules = [Terms]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.AbstractGenerator","page":"Terms","title":"QuantumLattices.Essentials.Terms.AbstractGenerator","text":"AbstractGenerator{coord, TS<:NamedContainer{Term}, BS<:Bonds, C<:IDFConfig, T<:Union{Nothing, Table}, B<:Boundary, OS<:GenOperators}\n\nAbstract generator.\n\nBy protocol, a concrete generator must have the following attributes:\n\nterms::TS: the terms contained in a generator\nbonds::BS: the bonds on which the terms are defined\nconfig::C: the configuration of the interanl degrees of freedom\ntable::T: the index-sequence table, nothing for not using such a table\nhalf::Bool: true for generating an Hermitian half of the operators and false for generating the whole\nboundary::B: boundary twist for the generated operators, nothing for no twist\noperators::OS: the generated operators\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Coupling","page":"Terms","title":"QuantumLattices.Essentials.Terms.Coupling","text":"Coupling{V, I<:ID{SimpleID}} <: Element{V, I}\n\nThe coupling intra/inter interanl degrees of freedom at different lattice points.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Couplings","page":"Terms","title":"QuantumLattices.Essentials.Terms.Couplings","text":"Couplings(cps::Coupling...)\n\nA pack of couplings intra/inter interanl degrees of freedom at different lattice points.\n\nAlias for Elements{<:ID{SimpleID}, <:Coupling}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.GenOperators","page":"Terms","title":"QuantumLattices.Essentials.Terms.GenOperators","text":"GenOperators(constops::Operators, alterops::NamedContainer{Operators}, boundops::NamedContainer{Operators})\nGenOperators(terms::Tuple{Vararg{Term}}, bonds::Bonds, config::IDFConfig, table::Union{Nothing, Table}, half::Bool, ::Val{coord}) where coord\n\nA set of operators. This is the core of AbstractGenerator.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Generator","page":"Terms","title":"QuantumLattices.Essentials.Terms.Generator","text":"Generator(terms::Tuple{Vararg{Term}}, bonds::Bonds, config::IDFConfig, table::Union{Nothing, Table}=nothing, half::Bool=true, boundary::Boundary=Boundary())\nGenerator{coord}(terms::Tuple{Vararg{Term}}, bonds::Bonds, config::IDFConfig, table::Union{Nothing, Table}=nothing, half::Bool=true, boundary::Boundary=Boundary()) where coord\n\nA generator of operators based on terms, configuration of internal degrees of freedom, table of indices and boundary twist.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Parameters","page":"Terms","title":"QuantumLattices.Essentials.Terms.Parameters","text":"Parameters{Names}(values::Number...) where Names\n\nA NamedTuple that contain the key-value pairs.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Parameters-Tuple{AbstractGenerator}","page":"Terms","title":"QuantumLattices.Essentials.Terms.Parameters","text":"Parameters(gen::AbstractGenerator) -> Parameters\n\nGet the parameters of the terms of a generator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Subscript","page":"Terms","title":"QuantumLattices.Essentials.Terms.Subscript","text":"Subscript(  ipattern::NTuple{N1, Any},\n            opattern::NTuple{N2, Any},\n            mapping::Union{Function, Nothing}=nothing,\n            constrain::Union{Function, Nothing}=nothing,\n            identifier::Union{Symbol, Char}=wildcard\n            ) where {N1, N2}\nSubscript{N}() where N\nSubscript(opattern::NTuple{N, Int}) where N\n\nThe subscripts of some orbital/spin degrees of freedom.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Subscript-Tuple{}","page":"Terms","title":"QuantumLattices.Essentials.Terms.Subscript","text":"(subscript::Subscript{N})(::Val{'M'}, values::Vararg{Int, N}) where N -> NTuple{dimension(subscript), Int}\n(subscript::Subscript{N})(::Val{'C'}, values::Vararg{Int, N}) where N -> Bool\n\nConstruct the subscripts from a set of independent variables.\nJudge whether a set of independent variables are valid to construct the subscripts.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Subscripts","page":"Terms","title":"QuantumLattices.Essentials.Terms.Subscripts","text":"Subscripts(contents::Subscript...)\n\nA complete set of all the independent subscripts of the orbital/spin degrees of freedom.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Subscripts-Tuple{}","page":"Terms","title":"QuantumLattices.Essentials.Terms.Subscripts","text":"(subscripts::Subscripts)(::Val{'M'}, values::NTuple{N, Int}) where N -> NTuple{dimension(subscripts), Int}\n(subscripts::Subscripts)(::Val{'C'}, values::NTuple{N, Int}) where N -> Bool\n\nConstruct the complete set of subscripts from a complete set of independent variables.\nJudge whether a complete set of independent variables are valid to construct the complete subscripts.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.Term","page":"Terms","title":"QuantumLattices.Essentials.Terms.Term","text":"Term{ST, K, R, I}(value::Any, bondkind::Any, couplings::TermCouplings, amplitude::TermAmplitude, modulate::Union{TermModulate, Nothing}, factor::Any) where {ST, K, R, I}\nTerm{ST, K, R}( id::Symbol, value::Any, bondkind::Any;\n                couplings::Union{Function, Coupling, Couplings, TermCouplings},\n                amplitude::Union{Function, Nothing}=nothing,\n                modulate::Union{Function, Bool}=false,\n                ) where {ST, K, R}\n\nA term of a quantum lattice system.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.TermAmplitude","page":"Terms","title":"QuantumLattices.Essentials.Terms.TermAmplitude","text":"TermAmplitude(amplitude::Union{Function, Nothing}=nothing)\n\nThe function for the amplitude of a term.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.TermCouplings","page":"Terms","title":"QuantumLattices.Essentials.Terms.TermCouplings","text":"TermCouplings(candidate::Coupling)\nTermCouplings(candidate::Couplings)\nTermCouplings(contents::Tuple{<:Tuple{Vararg{Couplings}}, <:Function})\nTermCouplings(candidates::NTuple{N, <:Couplings}, choice::Function) where N\n\nThe function for the couplings of a term.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.TermFunction","page":"Terms","title":"QuantumLattices.Essentials.Terms.TermFunction","text":"TermFunction <: Function\n\nAbstract type for concrete term functions.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.TermModulate","page":"Terms","title":"QuantumLattices.Essentials.Terms.TermModulate","text":"TermModulate(id::Symbol, modulate::Union{Function, Nothing}=nothing)\nTermModulate(id::Symbol, modulate::Bool)\n\nThe function for the modulation of a term.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.@couplings-Tuple{Any}","page":"Terms","title":"QuantumLattices.Essentials.Terms.@couplings","text":"@couplings cps -> Couplings\n\nConvert an expression/literal to a set of couplings.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.@subscript","page":"Terms","title":"QuantumLattices.Essentials.Terms.@subscript","text":"@subscript expr::Expr with constrain::Expr -> Subscript\n\nConstruct a subscript from a map and optionally with a constrain.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/Terms/#Base.:*-Tuple{Subscript,Subscript}","page":"Terms","title":"Base.:*","text":"*(sub1::Subscript, sub2::Subscript) -> Subscripts\n*(subs::Subscripts, sub::Subscript) -> Subscripts\n*(sub::Subscript, subs::Subscripts) -> Subscripts\n*(subs1::Subscripts, subs2::Subscripts) -> Subscripts\n\nGet the multiplication between subscripts or complete sets of subscripts.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.:+-Tuple{Term}","page":"Terms","title":"Base.:+","text":"+(term::Term) -> Term\n-(term::Term) -> Term\n*(term::Term, factor) -> Term\n*(factor, term::Term) -> Term\n/(term::Term, factor) -> Term\n\nAllowed arithmetic operations for a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.:==-Tuple{AbstractGenerator,AbstractGenerator}","page":"Terms","title":"Base.:==","text":"==(gen1::AbstractGenerator, gen2::AbstractGenerator) -> Bool\n\nJudge whether generators are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.:==-Tuple{GenOperators,GenOperators}","page":"Terms","title":"Base.:==","text":"==(genops1::GenOperators, genops2::GenOperators) -> Bool\n\nJudge whether two sets of operators are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.:==-Tuple{Subscript,Subscript}","page":"Terms","title":"Base.:==","text":"==(sub1::Subscript, sub2::Subscript) -> Bool\n\nJudge whether two subscripts are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.:==-Tuple{Term,Term}","page":"Terms","title":"Base.:==","text":"==(term1::Term, term2::Term) -> Bool\n\nJudge whether two terms are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.:==-Tuple{TermFunction,TermFunction}","page":"Terms","title":"Base.:==","text":"==(tf1::TermFunction, tf2::TermFunction) -> Bool\n\nJudge whether two concrete term functions are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.eltype-Tuple{GenOperators}","page":"Terms","title":"Base.eltype","text":"eltype(ops::GenOperators)\neltype(::Type{<:GenOperators{S, D, B}}) where {S<:Operators, D<:NamedContainer{Operators}, B<:NamedContainer{Operators}}\n\nGet the eltype of a set of operators, which is defined to be the common operator type of all operators it contains.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.empty!-Tuple{GenOperators}","page":"Terms","title":"Base.empty!","text":"empty!(ops::GenOperators) -> GenOperators\n\nEmpty a set of operators.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.empty!-Tuple{Generator}","page":"Terms","title":"Base.empty!","text":"empty!(gen::Generator) -> Generator\n\nEmpty the :bonds, :config, :table and :operators of a generator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.empty-Tuple{GenOperators}","page":"Terms","title":"Base.empty","text":"empty(ops::GenOperators) -> GenOperators\n\nGet an empty copy of a set of operators.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.empty-Union{Tuple{Generator{coord,TS,BS,C,T,B,OS} where OS<:GenOperators where B<:Boundary where T<:Union{Nothing, Table} where C<:IDFConfig where BS<:Bonds where TS<:(NamedTuple{Names,var\"#s22\"} where var\"#s22\"<:Tuple{Vararg{Term,N} where N} where Names)}, Tuple{coord}} where coord","page":"Terms","title":"Base.empty","text":"empty(gen::Generator{coord}) where coord -> Generator\n\nGet an empty copy of a generator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.isequal-Tuple{AbstractGenerator,AbstractGenerator}","page":"Terms","title":"Base.isequal","text":"isequal(gen1::AbstractGenerator, gen2::AbstractGenerator) -> Bool\n\nJudge whether generators are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.isequal-Tuple{GenOperators,GenOperators}","page":"Terms","title":"Base.isequal","text":"isequal(genops1::GenOperators, genops2::GenOperators) -> Bool\n\nJudge whether two sets of operators are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.isequal-Tuple{Subscript,Subscript}","page":"Terms","title":"Base.isequal","text":"isequal(sub1::Subscript, sub2::Subscript) -> Bool\n\nJudge whether two subscripts are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.isequal-Tuple{Term,Term}","page":"Terms","title":"Base.isequal","text":"isequal(term1::Term, term2::Term) -> Bool\n\nJudge whether two terms are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.isequal-Tuple{TermFunction,TermFunction}","page":"Terms","title":"Base.isequal","text":"isequal(tf1::TermFunction, tf2::TermFunction) -> Bool\n\nJudge whether two concrete term functions are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.match","page":"Terms","title":"Base.match","text":"match(params1::Parameters, params2::Parameters, atol=atol, rtol=rtol) -> Bool\n\nJudge whether the second set of parameters matches the first.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Terms/#Base.one-Tuple{Term}","page":"Terms","title":"Base.one","text":"one(term::Term) -> Term\n\nGet a unit term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.replace-Union{Tuple{Term{ST,K,R,I,V,B,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where B where V}, Tuple{I}, Tuple{R}, Tuple{K}, Tuple{ST}} where I where R where K where ST","page":"Terms","title":"Base.replace","text":"replace(term::Term{ST, K, R, I}; kwargs...) where {ST, K, R, I} -> Term\n\nReplace some attributes of a term with key word arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.repr-Tuple{Term,AbstractBond,IDFConfig}","page":"Terms","title":"Base.repr","text":"repr(term::Term, bond::AbstractBond, config::IDFConfig) -> String\n\nGet the repr representation of a term on a bond with a given config.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.show-Tuple{IO,Subscript}","page":"Terms","title":"Base.show","text":"show(io::IO, subscript::Subscript)\n\nShow a subscript.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.show-Tuple{IO,Term}","page":"Terms","title":"Base.show","text":"show(io::IO, term::Term)\n\nShow a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.valtype-Tuple{Term}","page":"Terms","title":"Base.valtype","text":"valtype(term::Term)\nvaltype(::Type{<:Term{ST, K, R, I, V} where {ST, K, R, I}}) where V\n\nGet the value type of a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#Base.zero-Tuple{Term}","page":"Terms","title":"Base.zero","text":"zero(term::Term) -> Term\n\nGet a zero term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.DegreesOfFreedom.isHermitian-Tuple{Term}","page":"Terms","title":"QuantumLattices.Essentials.DegreesOfFreedom.isHermitian","text":"isHermitian(term::Term) -> Bool\nisHermitian(::Type{<:Term}) -> Bool\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.abbr-Tuple{Term}","page":"Terms","title":"QuantumLattices.Essentials.Terms.abbr","text":"abbr(term::Term) -> Symbol\nabbr(::Type{<:Term}) -> Symbol\n\nGet the abbreviation of the kind of a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Essentials.Terms.statistics-Tuple{Term}","page":"Terms","title":"QuantumLattices.Essentials.Terms.statistics","text":"statistics(term::Term) -> Char\nstatistics(::Type{<:Term{ST}}) where ST -> Char\n\nGet the statistics of a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.dimension-Tuple{Subscripts,Int64}","page":"Terms","title":"QuantumLattices.Interfaces.dimension","text":"dimension(subscripts::Subscripts, i::Int) -> Int\ndimension(::Type{<:Subscripts{T}}, i::Int) where T -> Int\n\nGet the total number of the whole variables of a component of the complete subscript set.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.dimension-Tuple{Subscripts}","page":"Terms","title":"QuantumLattices.Interfaces.dimension","text":"dimension(subscripts::Subscripts) -> Int\ndimension(::Type{<:(Subscripts{<:Tuple, R, D} where R)}) where D -> Int\n\nGet the total number of the whole variables of the complete subscript set.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.dimension-Tuple{Subscript}","page":"Terms","title":"QuantumLattices.Interfaces.dimension","text":"dimension(subscript::Subscript) -> Int\ndimension(::Type{<:(Subscript{N1, N2} where N1)}) where N2 -> Int\n\nGet the number of the whole variables that are used to describe the subscripts of some orbital/spin degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.expand","page":"Terms","title":"QuantumLattices.Interfaces.expand","text":"expand(term::Term, bond::AbstractBond, config::IDFConfig, table::Union{Table, Nothing}=nothing, half::Bool=false, coord::Union{Val{true}, Val{false}}=coordpresent) -> Operators\nexpand(term::Term, bonds::Bonds, config::IDFConfig, table::Union{Table, Nothing}=nothing, half::Bool=false, coord::Union{Val{true}, Val{false}}=coordpresent) -> Operators\n\nExpand the operators of a term on a bond/set-of-bonds with a given config.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.expand!","page":"Terms","title":"QuantumLattices.Interfaces.expand!","text":"expand!(operators::Operators, term::Term, bond::AbstractBond, config::IDFConfig,\n        table::Union{Table, Nothing}=nothing,\n        half::Bool=false,\n        coord::Union{Val{true}, Val{false}}=coordpresent\n        ) -> Operators\nexpand!(operators::Operators, term::Term, bonds::Bonds, config::IDFConfig, \n        table::Union{Table, Nothing}=nothing,\n        half::Bool=false,\n        coord::Union{Val{true}, Val{false}}=coordpresent\n        ) -> Operators\n\nExpand the operators of a term on a bond/set-of-bonds with a given config.\n\nThe half parameter determines the behavior of generating operators, which falls into the following two categories\n\ntrue: \"Hermitian half\" of the generated operators\nfalse: \"Hermitian whole\" of the generated operators\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.expand!-Tuple{Dict{I,O} where O<:Operator where I<:(Tuple{Vararg{OID,N}} where N),AbstractGenerator}","page":"Terms","title":"QuantumLattices.Interfaces.expand!","text":"expand!(operators::Operators, gen::AbstractGenerator) -> Operators\n\nExpand the operators of a generator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.expand!-Tuple{Dict{I,O} where O<:Operator where I<:(Tuple{Vararg{OID,N}} where N),GenOperators,Boundary}","page":"Terms","title":"QuantumLattices.Interfaces.expand!","text":"expand!(operators::Operators, ops::GenOperators, boundary::Boundary; kwargs...) -> Operators\n\nExpand the operators with the given boundary twist and term coefficients.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.expand-Tuple{AbstractGenerator}","page":"Terms","title":"QuantumLattices.Interfaces.expand","text":"expand(gen::AbstractGenerator) -> Operators\nexpand(gen::AbstractGenerator{coord}, name::Symbol) where coord -> Operators\nexpand(gen::AbstractGenerator{coord}, i::Int) where coord -> Operators\nexpand(gen::AbstractGenerator{coord}, name::Symbol, i::Int) where coord -> Operators\n\nExpand the operators of a generator:\n\nthe total operators;\nthe operators of a specific term;\nthe operators on a specific bond;\nthe operators of a specific term on a specific bond.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.expand-Union{Tuple{N}, Tuple{Subscripts,Tuple{Vararg{Int64,N}}}} where N","page":"Terms","title":"QuantumLattices.Interfaces.expand","text":"expand(subscripts::Subscripts, dimensions::NTuple{N, Int}) where N -> SbExpand\n\nExpand a complete set of subscripts with a given set of variable ranges.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.id-Tuple{Term}","page":"Terms","title":"QuantumLattices.Interfaces.id","text":"id(term::Term) -> Symbol\nid(::Type{<:Term{ST, K, R, I} where {ST, K, R}}) where I -> Symbol\n\nGet the id of a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.kind-Tuple{Term}","page":"Terms","title":"QuantumLattices.Interfaces.kind","text":"kind(term::Term) -> Symbol\nkind(::Type{<:Term{ST, K} where ST}) where K -> Symbol\n\nGet the kind of a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.rank-Tuple{Subscripts,Int64}","page":"Terms","title":"QuantumLattices.Interfaces.rank","text":"rank(subscripts::Subscripts, i::Int) -> Int\nrank(::Type{<:Subscripts{T}}, i::Int) where T -> Int\n\nGet the number of the independent variables of a component of the complete subscript set.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.rank-Tuple{Subscripts}","page":"Terms","title":"QuantumLattices.Interfaces.rank","text":"rank(subscripts::Subscripts) -> Int\nrank(::Type{<:Subscripts{<:Tuple, R}}) where R -> Int\n\nGet the total number of the independent variables of the complete subscript set.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.rank-Tuple{Subscript}","page":"Terms","title":"QuantumLattices.Interfaces.rank","text":"rank(subscript::Subscript) -> Int\nrank(::Type{<:Subscript{N}}) where N -> Int\n\nGet the number of the independent variables that are used to describe the subscripts of some orbital/spin degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.rank-Tuple{Term}","page":"Terms","title":"QuantumLattices.Interfaces.rank","text":"rank(term::Term) -> Int\nrank(::Type{<:Term{ST, K, R} where {ST, K}}) where R -> Int\n\nGet the rank of a term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.reset!-Union{Tuple{coord}, Tuple{GenOperators,Tuple{Vararg{Term,N} where N},Bonds,IDFConfig,Union{Nothing, Table},Bool,Val{coord}}} where coord","page":"Terms","title":"QuantumLattices.Interfaces.reset!","text":"reset!(genops::GenOperators, terms::Tuple{Vararg{Term}}, bonds::Bonds, config::IDFConfig, table::Union{Nothing, Table}, half::Bool, ::Val{coord}) where coord -> GenOperators\n\nReset a set of operators by new terms, bonds, config, table, etc..\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.reset!-Union{Tuple{coord}, Tuple{Generator{coord,TS,BS,C,T,B,OS} where OS<:GenOperators where B<:Boundary where T<:Union{Nothing, Table} where C<:IDFConfig where BS<:Bonds where TS<:(NamedTuple{Names,var\"#s22\"} where var\"#s22\"<:Tuple{Vararg{Term,N} where N} where Names),AbstractLattice}} where coord","page":"Terms","title":"QuantumLattices.Interfaces.reset!","text":"reset!(gen::Generator{coord}, lattice::AbstractLattice) where coord -> Generator\n\nReset a generator by a new lattice.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.update!-Tuple{AbstractGenerator}","page":"Terms","title":"QuantumLattices.Interfaces.update!","text":"update!(gen::AbstractGenerator; kwargs...) -> typeof(gen)\n\nUpdate the coefficients of the terms in a generator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Interfaces.update!-Tuple{Term,Vararg{Any,N} where N}","page":"Terms","title":"QuantumLattices.Interfaces.update!","text":"update!(term::Term, args...; kwargs...) -> Term\n\nUpdate the value of a term by its modulate function.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Terms/#QuantumLattices.Mathematics.AlgebraOverFields.idtype-Tuple{GenOperators}","page":"Terms","title":"QuantumLattices.Mathematics.AlgebraOverFields.idtype","text":"idtype(ops::GenOperators)\nidtype(::Type{<:GenOperators{S, D, B}}) where {S<:Operators, D<:NamedContainer{Operators}, B<:NamedContainer{Operators}}\n\nGet the idtype of a set of operators, which is defined to be the common idtype of all operators it contains.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"CurrentModule = QuantumLattices.Prerequisites.TypeTraits","category":"page"},{"location":"man/Prerequisites/TypeTraits/#Type-traits","page":"Type traits","title":"Type traits","text":"","category":"section"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"This module defines generic type traits that are useful to the package.","category":"page"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"Julia does not support multi-inheritance, which is sometimes not convenient. A way around this is to use traits, i.e. by utilizing the dispatch on certain (singleton) types known as traits to simulate multi-inheritance. Although this method cannot avoid small repetitive codes, it suits methods well that are complicated and lengthy.","category":"page"},{"location":"man/Prerequisites/TypeTraits/#EfficientOperations","page":"Type traits","title":"EfficientOperations","text":"","category":"section"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"EfficientOperations defines efficient operations such as ==/isequal, </isless, isapprox, replace, etc., that ensure type stability.","category":"page"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"Type stability is the key of Julia to improve the code efficiency. However, it cannot be ensured in some unexpected cases, especially where an iterator is involved. For example, the following codes appears type unstable:","category":"page"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"function Base.:(==)(o1::AbstractType, o2::AbstractType)\n    n1, n2 = fieldcount(typeof(o1)), fieldcount(typeof(o2))\n    (n1 == n2) ? all(getfield(o1, i) == getfield(o2, i) for i = 1:n1) : false\nend","category":"page"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"Methods like above are common when we design abstract types, but they are not type stable. To get rid of it, the generated function trick can be used:","category":"page"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"@generated function Base.:(==)(o1::AbstractType, o2::AbstractType)\n    n1, n2 = fieldcount(o1), fieldcount(o2)\n    if n1 == n2\n        expr=:(getfield(o1, 1) == getfield(o2, 1))\n        for i = 2:n1\n            expr = Expr(:&&, expr, :(getfield(o1, $i) == getfield(o2, $i)))\n        end\n        return expr\n    else\n        return :(false)\n    end\nend","category":"page"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"Then type stability can be ensured. We use this trick to implement the methods such as ==/isequal, </isless, isapprox, replace, etc., with the trait efficientoperations::EfficientOperations. Other types can resort to these methods by passing efficientoperations as the first argument.","category":"page"},{"location":"man/Prerequisites/TypeTraits/#MemoryOrder","page":"Type traits","title":"MemoryOrder","text":"","category":"section"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"MemoryOrder provides the conversions, subtoind and indtosub, between a Cartesian index represented by a tuple and a linear index represented by an integer. C/C++ order or Fortran order can be specified by use of the constants corder or forder, which are instances of singleton types COrder and FOrder that are both subtypes of the abstract type MemoryOrder.","category":"page"},{"location":"man/Prerequisites/TypeTraits/#Manual","page":"Type traits","title":"Manual","text":"","category":"section"},{"location":"man/Prerequisites/TypeTraits/","page":"Type traits","title":"Type traits","text":"Modules = [TypeTraits]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Prerequisites/TypeTraits/#QuantumLattices.Prerequisites.TypeTraits.corder","page":"Type traits","title":"QuantumLattices.Prerequisites.TypeTraits.corder","text":"corder\n\nIndicate that the convertion between Cartesian index and linear index is using the C/C++ order.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/TypeTraits/#QuantumLattices.Prerequisites.TypeTraits.efficientoperations","page":"Type traits","title":"QuantumLattices.Prerequisites.TypeTraits.efficientoperations","text":"efficientoperations\n\nIndicate that the efficient operations, i.e. \"==\"/\"isequal\", \"<\"/\"isless\" or \"replace\", will be used.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/TypeTraits/#QuantumLattices.Prerequisites.TypeTraits.forder","page":"Type traits","title":"QuantumLattices.Prerequisites.TypeTraits.forder","text":"forder\n\nIndicate that the convertion between Cartesian index and linear index is using the Fortran order.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/TypeTraits/#Base.:<-Tuple{QuantumLattices.Prerequisites.TypeTraits.EfficientOperations,Any,Any}","page":"Type traits","title":"Base.:<","text":"<(::EfficientOperations, o1, o2) -> Bool\n\nCompare two objects and judge whether the first is less than the second.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#Base.:==-Tuple{QuantumLattices.Prerequisites.TypeTraits.EfficientOperations,Any,Any}","page":"Type traits","title":"Base.:==","text":"==(::EfficientOperations, o1, o2) -> Bool\n\nCompare two objects and judge whether they are eqaul to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#Base.isapprox-Union{Tuple{Names}, Tuple{QuantumLattices.Prerequisites.TypeTraits.EfficientOperations,Val{Names},Any,Any}} where Names","page":"Type traits","title":"Base.isapprox","text":"isapprox(::EfficientOperations, ::Val{Names}, o1, o2; atol::Real=atol, rtol::Real=rtol) where Names -> Bool\n\nCompare two objects and judge whether they are inexactly equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#Base.isequal-Tuple{QuantumLattices.Prerequisites.TypeTraits.EfficientOperations,Any,Any}","page":"Type traits","title":"Base.isequal","text":"isequal(::EfficientOperations, o1, o2) -> Bool\n\nCompare two objects and judge whether they are eqaul to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#Base.isless-Tuple{QuantumLattices.Prerequisites.TypeTraits.EfficientOperations,Any,Any}","page":"Type traits","title":"Base.isless","text":"isless(::EfficientOperations, o1, o2) -> Bool\n\nCompare two objects and judge whether the first is less than the second.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#Base.replace-Tuple{QuantumLattices.Prerequisites.TypeTraits.EfficientOperations,Any}","page":"Type traits","title":"Base.replace","text":"replace(::EfficientOperations, o; kwargs...) -> typeof(o)\n\nReturn a copy of the input object with some of the field values replaced by the keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#QuantumLattices.Prerequisites.TypeTraits.indtosub-Tuple{Tuple,Int64,QuantumLattices.Prerequisites.TypeTraits.FOrder}","page":"Type traits","title":"QuantumLattices.Prerequisites.TypeTraits.indtosub","text":"indtosub(dims::Tuple, ind::Int, order::FOrder) -> Tuple\nindtosub(dims::Tuple, ind::Int, order::COrder) -> Tuple\n\nConvert an linear index to Cartesian index. Fortran-order or C-order can be assigned.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/TypeTraits/#QuantumLattices.Prerequisites.TypeTraits.subtoind-Union{Tuple{N}, Tuple{Tuple{Vararg{Int64,N}},Tuple{Vararg{Int64,N}},QuantumLattices.Prerequisites.TypeTraits.FOrder}} where N","page":"Type traits","title":"QuantumLattices.Prerequisites.TypeTraits.subtoind","text":"subtoind(dims::NTuple{N, Int}, inds::NTuple{N, Int}, order::FOrder) where N -> Int\nsubtoind(dims::NTuple{N, Int}, inds::NTuple{N, Int}, order::COrder) where N -> Int\n\nConvert an Cartesian index to linear index. Fortran-order or C-order can be assigned.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"CurrentModule = QuantumLattices.Mathematics.AlgebraOverFields","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"push!(LOAD_PATH, \"../../../../src/\")\nusing QuantumLattices.Mathematics.AlgebraOverFields","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/#Algebra-over-fields","page":"Algebra over fields","title":"Algebra over fields","text":"","category":"section"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"An algebra over a field is a vector space over that field, in which a bilinear operator (often called the \"multiplication\") between vectors is defined.","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"With the help of the structure constants of the algebra, the result of the bilinear operation between any arbitrary two vectors can be expressed by a sum of individual ones. Therefore, in principle, an algebra can be represented by the complete basis set of its corresponding vector space and a rank-3 tensor encapsulating its structure constants. It is noted that the \"bilinear operation\" is not restricted to the usual multiplication only. For example, it is the commutator, which is a composition of the usual multiplication and subtraction (for any A and B, the commutator [A, B] is defined as [A, B]≝AB-BA) that serves as the bilinear operator for Lie algebras. In this module, for scalars in the field and elements in the algebra, we only provide the interfaces of the scalar multiplication (including the scalar division) between a scalar and an element, the addition (including the subtraction) and the usual multiplication between two elements. Other complicated operations should be composed from these basic ones.","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/#SimpleID-and-ID","page":"Algebra over fields","title":"SimpleID and ID","text":"","category":"section"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"SimpleID is the building block of the id system of an algebra over a field, while ID defines the specific identifier of an element in that algebra.","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"Generally, the usual multiplication between two elements of an algebra is not commutable, and the rank of the multiplication is just the add-up before the simplification with the help of the algebra structure. We thus use a simple id to denote a single basis of the corresponding vector space, and an id to denote the identifier of an element. With the help of the direct product (⊗) of two ids, an over complete id system designed for the whole algebra is constructed. This id system is redundant because it does not reflects the structure constants of the algebra, which reduces independent basis elements. Extra mechanisms should be provided to kill this redundancy, which goes beyond the current module. Users should define them themselves.","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/#Element-and-Elements","page":"Algebra over fields","title":"Element and Elements","text":"","category":"section"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"Element defines a single element of an algebra while Elements defines an expression composed of several elements from an algebra.","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"The first and second attributes of an Element must be","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"value::Number: the coefficient of the element\nid::ID: the id of the element","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"Arithmetic operations (+, -, *, /) between a scalar, an Element or an Elements is defined. See Manual for details.","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/#Manual","page":"Algebra over fields","title":"Manual","text":"","category":"section"},{"location":"man/Mathematics/AlgebraOverFields/","page":"Algebra over fields","title":"Algebra over fields","text":"Modules = [AlgebraOverFields]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.Element","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.Element","text":"Element{V, I<:ID{SimpleID}}\n\nAn element of an algebra over a field.\n\nThe first and second attributes of an element must be\n\nvalue: the coefficient of the element\nid::ID{SimpleID}: the id of the element\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.Elements","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.Elements","text":"Elements{I<:ID{SimpleID}, M<:Element} <: AbstractDict{I, M}\n\nAn set of elements of an algebra over a field.\n\nType alias for Dict{I<:ID{SimpleID}, M<:Element}. Similar iterms are automatically merged thanks to the id system.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.Elements-Tuple{Any}","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.Elements","text":"Elements(ms)\nElements(ms::Pair{I, M}...) where {I<:ID{SimpleID}, M<:Element}\nElements(ms::Element...)\n\nGet the set of elements with similar items merged.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.ID","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.ID","text":"ID{I<:SimpleID, N}\n\nThe (composite) id system of an algebra over a field.\n\nType alias for NTuple{N, I} where {N, I<:SimpleID}.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.ID-Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N} where N}","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.ID","text":"ID(ids::SimpleID...)\nID(ids::NTuple{N, SimpleID}) where N\n\nGet the composite id from simple ids.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.ID-Union{Tuple{M}, Tuple{N}, Tuple{SID}, Tuple{Type{SID},Vararg{Tuple{Vararg{Any,N}},M}}} where M where N where SID<:QuantumLattices.Mathematics.AlgebraOverFields.SimpleID","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.ID","text":"ID(::Type{SID}, attrs::Vararg{NTuple{N}, M}) where {SID<:SimpleID, N, M}\n\nGet the composite id from the components of simple ids.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.ScalarElement","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.ScalarElement","text":"ScalarElement{V}\n\nIdentity element.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.SimpleID","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.SimpleID","text":"SimpleID <: NamedVector\n\nA simple id is the building block of the id system of an algebra over a field.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:*-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Nothing}","page":"Algebra over fields","title":"Base.:*","text":"*(m::Element, ::Nothing) -> Nothing\n*(::Nothing, m::Element) -> Nothing\n*(factor::Number, m::Element) -> Element\n*(m::Element, factor::Number) -> Element\n*(m1::Element, m2::Element) -> Element\n*(ms::Elements, ::Nothing) -> Nothing\n*(::Nothing, ms::Elements) -> Nothing\n*(factor::Number, ms::Elements) -> Elements\n*(ms::Elements, factor::Number) -> Elements\n*(m::Element, ms::Elements) -> Elements\n*(ms::Elements, m::Element) -> Elements\n*(ms1::Elements, ms2::Elements) -> Elements\n\nOverloaded * operator for element-scalar multiplications and element-element multiplications of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:*-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,QuantumLattices.Mathematics.AlgebraOverFields.SimpleID}","page":"Algebra over fields","title":"Base.:*","text":"*(sid1::SimpleID, sid2::SimpleID) -> ID{SimpleID}\n*(sid::SimpleID, cid::ID{SimpleID}) -> ID{SimpleID}\n*(cid::ID{SimpleID}, sid::SimpleID) -> ID{SimpleID}\n*(cid1::ID{SimpleID}, cid2::ID{SimpleID}) -> ID{SimpleID}\n\nGet the product of the id system.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:+-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.:+","text":"+(m::Element) -> typeof(m)\n+(m::Element, ::Nothing) -> typeof(m)\n+(::Nothing, m::Element) -> typeof(m)\n+(m::Element, factor::Number) -> Elements\n+(factor::Number, m::Element) -> Elements\n+(m1::Element, m2::Element) -> Elements\n+(ms::Elements) -> typeof(ms)\n+(ms::Elements, ::Nothing) -> typeof(ms)\n+(::Nothing, ms::Elements) -> typeof(ms)\n+(ms::Elements, factor::Number) -> Elements\n+(factor::Number, ms::Elements) -> Elements\n+(ms::Elements, m::Element) -> Elements\n+(m::Element, ms::Elements) -> Elements\n+(ms1::Elements, ms2::Elements) -> Elements\n\nOverloaded + operator between elements of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:--Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.:-","text":"-(m::Element) -> typeof(m)\n-(m::Element, ::Nothing) -> typeof(m)\n-(::Nothing, m::Element) -> typeof(m)\n-(m::Element, factor::Number) -> Elements\n-(factor::Number, m::Element) -> Elements\n-(m1::Element, m2::Element) -> Elements\n-(ms::Elements) -> typeof(ms)\n-(ms::Elements, ::Nothing) -> typeof(ms)\n-(::Nothing, ms::Elements) -> typeof(ms)\n-(ms::Elements, factor::Number) -> Elements\n-(factor::Number, ms::Elements) -> Elements\n-(m::Element, ms::Elements) -> Elements\n-(ms::Elements, m::Element) -> Elements\n-(ms1::Elements, ms2::Elements) -> Elements\n\nOverloaded - operator between elements of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:/-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Number}","page":"Algebra over fields","title":"Base.:/","text":"/(m::Element, factor::Number) -> Element\n/(m::Element, factor::ScalarElement) -> Element\n/(ms::Elements, factor::Number) -> Elements\n/(ms::Elements, factor::ScalarElement) -> Elements\n\nOverloaded / operator for element-scalar division of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.://-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Integer}","page":"Algebra over fields","title":"Base.://","text":"//(m::Element, factor::Integer) -> Element\n//(m::Element, factor::ScalarElement) -> Element\n//(ms::Elements, factor::Integer) ->  Elements\n//(ms::Elements, factor::ScalarElement) -> Elements\n\nOverloaded // operator for element-scalar division of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:==-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N),Nothing}","page":"Algebra over fields","title":"Base.:==","text":"==(ms::Elements, ::Nothing) -> Bool\n==(::Nothing, ms::Elements) -> Bool\n\nJudge whether a set of elements is identically empty.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:==-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.:==","text":"==(m1::Element, m2::Element) -> Bool\n\nCompare two elements and judge whether they are equal to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.:^-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Integer}","page":"Algebra over fields","title":"Base.:^","text":"^(m::Element, n::Integer) -> Element\n^(ms::Elements, n::Integer) -> Elements\n\nOverloaded ^ operator for element-integer power of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.convert-Union{Tuple{M}, Tuple{Type{M},QuantumLattices.Mathematics.AlgebraOverFields.Element{V,Tuple{}} where V}} where M<:(QuantumLattices.Mathematics.AlgebraOverFields.Element{V,Tuple{}} where V)","page":"Algebra over fields","title":"Base.convert","text":"convert(::Type{M}, m::ScalarElement) where M<:ScalarElement\nconvert(::Type{M}, m::Number) where M<:ScalarElement\nconvert(::Type{M}, m::Element) where M<:Element\n\nConvert a scalar element from one type to another;\nConvert a scalar to a scalar element;\nConvert an element from one type to another.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.getproperty-Tuple{Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N,Symbol}","page":"Algebra over fields","title":"Base.getproperty","text":"getproperty(cid::ID{SimpleID}, name::Symbol)\n\nGet the property of a composite id.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.isapprox-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.isapprox","text":"isapprox(m1::Element, m2::Element; atol::Real=atol, rtol::Real=rtol) -> Bool\n\nCompare two elements and judge whether they are inexactly equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.isequal-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N),Nothing}","page":"Algebra over fields","title":"Base.isequal","text":"isequal(ms::Elements, ::Nothing) -> Bool\nisequal(::Nothing, ms::Elements) -> Bool\n\nJudge whether a set of elements is identically empty.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.isequal-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.isequal","text":"isequal(m1::Element, m2::Element) -> Bool\n\nCompare two elements and judge whether they are equal to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.one-Union{Tuple{Type{M}}, Tuple{M}} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element","page":"Algebra over fields","title":"Base.one","text":"one(::Type{M}) where M<:Element\n\nGet the identity operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.permute!","page":"Algebra over fields","title":"Base.permute!","text":"permute!(result::Elements, m::Element, table=nothing) -> Elements\npermute!(result::Elements, ms::Elements, table=nothing) -> Elements\n\nPermute the ids of an-element/a-set-of-elements to the descending order according to a table, and store the permuted elements in result.\n\nnote: Note\nTo use this function, the user must implement a method of permute, which computes the result of the permutation of a rank-2 element and takes the following interface:permute(::Type{M}, id1::SimpleID, id2::SimpleID, table=nothing) -> Union{M, Elements}Here, M is the type of the input element m in permute!, id1 and id2 are two arbitary simple ids contained in m.id.\n\n\n\n\n\n","category":"function"},{"location":"man/Mathematics/AlgebraOverFields/#Base.promote_rule-Union{Tuple{M2}, Tuple{M1}, Tuple{Type{M1},Type{M2}}} where M2<:QuantumLattices.Mathematics.AlgebraOverFields.Element where M1<:QuantumLattices.Mathematics.AlgebraOverFields.Element","page":"Algebra over fields","title":"Base.promote_rule","text":"promote_rule(::Type{M1}, ::Type{M2}) where {M1<:Element, M2<:Element}\n\nDefine the promote rule for Element types.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.promote_type-Tuple{Type{Tuple{}},Type{Tuple{}}}","page":"Algebra over fields","title":"Base.promote_type","text":"promote_type(::Type{Tuple{}}, ::Type{Tuple{}})\npromote_type(::Type{Tuple{}}, I::Type{<:ID{SimpleID, N}}) where N\npromote_type(I::Type{<:ID{SimpleID, N}}, ::Type{Tuple{}}) where N\n\nDefine the promote rule for ID types.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.replace-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Vararg{Pair{var\"#s19\",var\"#s18\"} where var\"#s18\"<:Union{QuantumLattices.Mathematics.AlgebraOverFields.Element, Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)} where var\"#s19\"<:QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N} where N}","page":"Algebra over fields","title":"Base.replace","text":"replace(m::Element, pairs::Pair{<:SimpleID, <:Union{Element, Elements}}...) -> Element/Elements\nreplace(ms::Elements, pairs::Pair{<:SimpleID, <:Union{Element, Elements}}...) -> Elements\n\nReplace the rank-1 components of an element with new element/elements.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.replace-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.replace","text":"replace(m::Element; kwargs...) -> typeof(m)\n\nReturn a copy of a concrete Element with some of the field values replaced by the keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.repr-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"Base.repr","text":"repr(ms::Elements) -> String\n\nGet the repr representation of a set of elements.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.show-Tuple{IO,Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"Base.show","text":"show(io::IO, ms::Elements)\n\nShow a set of elements.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.show-Tuple{IO,Tuple{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N} where N}}","page":"Algebra over fields","title":"Base.show","text":"show(io::IO, cid::Tuple{SimpleID, Vararg{SimpleID}})\n\nShow a composite id.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.split-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.split","text":"split(m::Element) -> Tuple{Any, Vararg{Element}}\n\nSplit an element into the coefficient and a sequence of rank-1 elements.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.valtype-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"Base.valtype","text":"valtype(m::Element)\nvaltype(::Type{<:Element})\nvaltype(::Type{<:Element{V}}) where V\n\nGet the type of the value of an element.\n\nThe result is also the type of the field over which the algebra is defined.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#Base.zero-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"Base.zero","text":"zero(ms::Elements) -> Nothing\nzero(::Type{<:Elements}) -> Nothing\n\nGet a zero set of elements.\n\nA zero set of elements is defined to be the one with no elements.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.:⊗-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.:⊗","text":"⊗(m::Element, ms::Elements) -> Elements\n⊗(ms::Elements, m::Element) -> Elements\n⊗(ms1::Elements, ms2::Elements) -> Elements\n\nOverloaded ⊗ operator for element-element multiplications of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.:⋅-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.:⋅","text":"⋅(m::Element, ms::Elements) -> Elements\n⋅(ms::Elements, m::Element) -> Elements\n⋅(ms1::Elements, ms2::Elements) -> Elements\n\nOverloaded ⋅ operator for element-element multiplications of an algebra over a field.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.add!-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.add!","text":"add!(ms::Elements) -> typeof(ms)\nadd!(ms::Elements, ::Nothing) -> typeof(ms)\nadd!(ms::Elements, m::Number) -> typeof(ms)\nadd!(ms::Elements, m::Element) -> typeof(ms)\nadd!(ms::Elements, mms::Elements) -> typeof(ms)\n\nGet the inplace addition of elements to a set.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.div!-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N),QuantumLattices.Mathematics.AlgebraOverFields.Element{V,Tuple{}} where V}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.div!","text":"div!(ms::Elements, factor::ScalarElement) -> Elements\ndiv!(ms::Elements, factor::Number) -> Elements\n\nGet the inplace division of element with a scalar.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.mul!-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N),QuantumLattices.Mathematics.AlgebraOverFields.Element{V,Tuple{}} where V}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.mul!","text":"mul!(ms::Elements, factor::ScalarElement) -> Elements\nmul!(ms::Elements, factor::Number) -> Elements\n\nGet the inplace multiplication of elements with a scalar.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.permute","page":"Algebra over fields","title":"QuantumLattices.Interfaces.permute","text":"permute(m::Element, table=nothing) -> Elements\npermute(ms::Elements, table=nothing) -> Elements\n\nPermute the ids of an-element/a-set-of-elements to the descending order according to a table.\n\n\n\n\n\n","category":"function"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.rank-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.rank","text":"rank(m::Element) -> Int\nrank(::Type{M}) where M<:Element -> Int\n\nGet the rank of an element.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.rank-Tuple{Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.rank","text":"rank(id::ID{SimpleID}) -> Int\nrank(::Type{<:ID{SimpleID}}) -> Any\nrank(::Type{<:ID{SimpleID, N}}) where N -> Int\n\nGet the rank of a composite id.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.sequence-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element,Any}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.sequence","text":"sequence(m::Element, table=nothing) -> NTuple{rank(m), Int}\n\nGet the sequence of the ids of an element according to a table.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Interfaces.sub!-Tuple{Dict{I,M} where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)}","page":"Algebra over fields","title":"QuantumLattices.Interfaces.sub!","text":"sub!(ms::Elements) -> typeof(ms)\nsub!(ms::Elements, ::Nothing) -> typeof(ms)\nadd!(ms::Elements, m::Number) -> typeof(ms)\nsub!(ms::Elements, m::Element) -> typeof(ms)\nsub!(ms::Elements, mms::Elements) -> typeof(ms)\n\nGet the inplace subtraction of elements from a set.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.idisless-Tuple{Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N,Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N}","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.idisless","text":"idisless(cid1::ID{SimpleID}, cid2::ID{SimpleID}) -> Bool\n\nCompare two ids and judge whether the first is less than the second.\n\nWe define that ids with smaller ranks are always less than those with higher ranks. If two ids are of the same rank, the comparison goes just like that between tuples.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.idpropertynames-Union{Tuple{Type{I}}, Tuple{I}} where I<:(Tuple{Vararg{QuantumLattices.Mathematics.AlgebraOverFields.SimpleID,N}} where N)","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.idpropertynames","text":"idpropertynames(::Type{I}) where I<:ID{SimpleID} -> Tuple{Vararg{Symbol}}\n\nGet the property names of a composite id.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.idtype-Tuple{QuantumLattices.Mathematics.AlgebraOverFields.Element}","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.idtype","text":"idtype(m::Element)\nidtype(::Type{<:Element{V, I} where V}) where I<:ID{SimpleID}\nidtype(::Type{<:Element})\n\nThe type of the id of an element.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/AlgebraOverFields/#QuantumLattices.Mathematics.AlgebraOverFields.mul_promote_type-Union{Tuple{V}, Tuple{M}, Tuple{Type{M},Type{V}}} where V<:Number where M<:QuantumLattices.Mathematics.AlgebraOverFields.Element","page":"Algebra over fields","title":"QuantumLattices.Mathematics.AlgebraOverFields.mul_promote_type","text":"mul_promote_type(::Type{M}, ::Type{V}) where {M<:Element, V<:Number}\nmul_promote_type(::Type{V}, ::Type{M}) where {M<:Element, V<:Number}\n\nDefine the promote rule for the multiplication between an Element and a scalar.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/","page":"Spin package","title":"Spin package","text":"CurrentModule = QuantumLattices.Essentials.SpinPackage","category":"page"},{"location":"man/Essentials/SpinPackage/#Spin-package","page":"Spin package","title":"Spin package","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#Spin-degrees-of-freedom","page":"Spin package","title":"Spin degrees of freedom","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#SID-and-Spin","page":"Spin package","title":"SID and Spin","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#SIndex","page":"Spin package","title":"SIndex","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#Predefined-spin-operators","page":"Spin package","title":"Predefined spin operators","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#Spin-terms","page":"Spin package","title":"Spin terms","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#SCID-and-SpinCoupling","page":"Spin package","title":"SCID and SpinCoupling","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#Predefined-spin-couplings","page":"Spin package","title":"Predefined spin couplings","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#Predefined-spin-terms","page":"Spin package","title":"Predefined spin terms","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/#Manual","page":"Spin package","title":"Manual","text":"","category":"section"},{"location":"man/Essentials/SpinPackage/","page":"Spin package","title":"Spin package","text":"Modules = [SpinPackage]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.soptdefaultlatex","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.soptdefaultlatex","text":"soptdefaultlatex\n\nThe default LaTeX format of the oids of a spin operator.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SCID","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SCID","text":"SCID(; center=wildcard, atom=wildcard, orbital=wildcard, tag='z', subscript=wildcard)\n\nThe id of a spin coupling.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SID","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SID","text":"SID <: IID\n\nThe spin id.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SID-Tuple{}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SID","text":"SID(; orbital::Int=1, spin::Real=0.5, tag::Char='z')\n\nCreate a spin id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SIndex","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SIndex","text":"SIndex{S} <: Index{PID{S}, SID}\n\nThe spin index.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SOperator","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SOperator","text":"SOperator(value::Number, id::ID{OID}=ID())\n\nSpin operator.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Spin","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Spin","text":"Spin <: Internal{SID}\n\nThe spin interanl degrees of freedom.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Spin-Tuple{}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Spin","text":"Spin(; atom::Int=1, norbital::Int=1, spin::Real=0.5)\n\nConstruct a spin degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SpinCoupling","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SpinCoupling","text":"SpinCoupling(value::Number, id::ID{SCID}, subscripts::Subscripts)\nSpinCoupling{N}(value::Number=1;\n                tags::NTuple{N, Char},\n                centers::Union{NTuple{N, Int}, Nothing}=nothing,\n                atoms::Union{NTuple{N, Int}, Nothing}=nothing,\n                orbitals::Union{NTuple{N, Int}, Subscript, Nothing}=nothing\n                ) where N\n\nSpin coupling.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.SpinTerm","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.SpinTerm","text":"SpinTerm{R}(id::Symbol, value::Any, bondkind::Any;\n            couplings::Union{Function, Coupling, Couplings},\n            amplitude::Union{Function, Nothing}=nothing,\n            modulate::Union{Function, Bool}=false,\n            ) where R\n\nSpin term.\n\nType alias for Term{'B', :SpinTerm, R, id, V, <:Any, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.@dm_str-Tuple{String}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.@dm_str","text":"dm\"x sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\ndm\"y sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\ndm\"z sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\n\nThe DM couplings.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.@gamma_str-Tuple{String}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.@gamma_str","text":"gamma\"x sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\ngamma\"y sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\ngamma\"z sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\n\nThe Gamma couplings.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.@heisenberg_str-Tuple{String}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.@heisenberg_str","text":"heisenberg\"sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\n\nThe Heisenberg couplings.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.@ising_str-Tuple{String}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.@ising_str","text":"ising\"x sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\nising\"y sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\nising\"z sl(a₁, a₂)⊗ob(o₁, o₂)@(c₁, c₂)\" -> Couplings\n\nThe Ising couplings.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.@sc_str-Tuple{String}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.@sc_str","text":"sc\"...\" -> SpinCoupling\n\nConstruct a SpinCoupling from a literal string.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.@sˣ_str-Tuple{String}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.@sˣ_str","text":"sˣ\"sl(a)⊗ob(o)\" -> Couplings\nsʸ\"sl(a)⊗ob(o)\" -> Couplings\nsᶻ\"sl(a)⊗ob(o)\" -> Couplings\n\nThe single Sˣ/Sʸ/Sᶻ coupling.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/SpinPackage/#Base.:*-Tuple{SpinCoupling,SpinCoupling}","page":"Spin package","title":"Base.:*","text":"*(sc1::SpinCoupling, sc2::SpinCoupling) -> SpinCoupling\n\nGet the multiplication between two spin couplings.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#Base.adjoint-Tuple{SID}","page":"Spin package","title":"Base.adjoint","text":"adjoint(sid::SID) -> SID\n\nGet the adjoint of a spin id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#Base.repr-Tuple{SpinCoupling}","page":"Spin package","title":"Base.repr","text":"repr(sc::SpinCoupling) -> String\n\nGet the repr representation of a spin coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#Base.show-Tuple{IO,SpinCoupling}","page":"Spin package","title":"Base.show","text":"show(io::IO, sc::SpinCoupling)\n\nShow a spin coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#Base.union-Union{Tuple{P}, Tuple{Type{P},Type{SID}}} where P<:PID","page":"Spin package","title":"Base.union","text":"union(::Type{P}, ::Type{SID}) where {P<:PID}\n\nGet the union type of PID and SID.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.DegreesOfFreedom.otype-Tuple{Type{var\"#s467\"} where var\"#s467\"<:(Term{'B',:SpinTerm,R,id,V,B,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where B where V where id where R),Type{var\"#s464\"} where var\"#s464\"<:OID}","page":"Spin package","title":"QuantumLattices.Essentials.DegreesOfFreedom.otype","text":"otype(T::Type{<:SpinTerm}, I::Type{<:OID})\n\nGet the operator type of a spin term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.DegreesOfFreedom.script-Tuple{OID{var\"#s468\",RC,IC,S} where S<:Union{Nothing, Int64} where IC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where RC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where var\"#s468\"<:SIndex,Val{:site}}","page":"Spin package","title":"QuantumLattices.Essentials.DegreesOfFreedom.script","text":"script(oid::OID{<:SIndex}, ::Val{:site}) -> Int\nscript(oid::OID{<:SIndex}, ::Val{:orbital}) -> Int\nscript(oid::OID{<:SIndex}, ::Val{:spin}) -> Float\nscript(oid::OID{<:SIndex}, ::Val{:tag}) -> Char\n\nGet the required script of a spin oid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.DM-Tuple{Char}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.DM","text":"DM( tag::Char;\n    centers::Union{NTuple{2, Int}, Nothing}=nothing,\n    atoms::Union{NTuple{2, Int}, Nothing}=nothing,\n    orbitals::Union{NTuple{2, Int}, Subscript, Nothing}=nothing\n    ) -> Couplings{ID{SCID, 2}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 2}}}\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Gamma-Tuple{Char}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Gamma","text":"Gamma(  tag::Char;\n        centers::Union{NTuple{2, Int}, Nothing}=nothing,\n        atoms::Union{NTuple{2, Int}, Nothing}=nothing,\n        orbitals::Union{NTuple{2, Int}, Subscript, Nothing}=nothing\n        ) -> Couplings{ID{SCID, 2}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 2}}}\n\nThe Gamma couplings.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Heisenberg","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Heisenberg","text":"Heisenberg( mode::String=\"+-z\";\n            centers::Union{NTuple{2, Int}, Nothing}=nothing,\n            atoms::Union{NTuple{2, Int}, Nothing}=nothing,\n            orbitals::Union{NTuple{2, Int}, Subscript, Nothing}=nothing\n            ) -> Couplings{ID{SCID, 2}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 2}}}\n\nThe Heisenberg couplings.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Ising-Tuple{Char}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Ising","text":"Ising(  tag::Char;\n        centers::Union{NTuple{2, Int}, Nothing}=nothing,\n        atoms::Union{NTuple{2, Int}, Nothing}=nothing,\n        orbitals::Union{NTuple{2, Int}, Subscript, Nothing}=nothing\n        ) -> Couplings{ID{SCID, 2}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 2}}}\n\nThe Ising couplings.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Sʸ-Tuple{}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Sʸ","text":"Sʸ(; atom::Union{Int, Nothing}=nothing, orbital::Union{Int, Nothing}=nothing) -> Couplings{ID{SCID, 1}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 1}}}\n\nThe single Sʸ coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Sˣ-Tuple{}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Sˣ","text":"Sˣ(; atom::Union{Int, Nothing}=nothing, orbital::Union{Int, Nothing}=nothing) -> Couplings{ID{SCID, 1}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 1}}}\n\nThe single Sˣ coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.Sᶻ-Tuple{}","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.Sᶻ","text":"Sᶻ(; atom::Union{Int, Nothing}=nothing, orbital::Union{Int, Nothing}=nothing) -> Couplings{ID{SCID, 1}, SpinCoupling{Rational{Int}/Int, <:ID{SCID, 1}}}\n\nThe single Sᶻ coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.SpinPackage.usualspinindextotuple","page":"Spin package","title":"QuantumLattices.Essentials.SpinPackage.usualspinindextotuple","text":"usualspinindextotuple\n\nIndicate that the filtered attributes are (:scope, :site, :orbital) when converting a spin index to tuple.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Essentials.Terms.statistics-Tuple{SOperator}","page":"Spin package","title":"QuantumLattices.Essentials.Terms.statistics","text":"statistics(opt::SOperator) -> Char\nstatistics(::Type{<:SOperator}) -> Char\n\nGet the statistics of SOperator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Interfaces.expand-Union{Tuple{K}, Tuple{SpinCoupling,PID,Spin}, Tuple{SpinCoupling,PID,Spin,Union{Nothing, Val{K}}}} where K","page":"Spin package","title":"QuantumLattices.Interfaces.expand","text":"expand(sc::SpinCoupling, pid::PID, spin::Spin, kind::Union{Val{K}, Nothing}=nothing) where K -> Union{SCExpand, Tuple{}}\nexpand(sc::SpinCoupling, pids::NTuple{N, PID}, spins::NTuple{N, Spin}, kind::Union{Val{K}, Nothing}=nothing) where {N, K} -> Union{SCExpand, Tuple{}}\n\nExpand a spin coupling with the given set of point ids and spin degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Interfaces.matrix","page":"Spin package","title":"QuantumLattices.Interfaces.matrix","text":"matrix(sid::SID, dtype::Type{<:Number}=Complex{Float}) -> Matrix{dtype}\n\nGet the matrix representation of a sid.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/SpinPackage/#QuantumLattices.Interfaces.permute-Tuple{Type{var\"#s464\"} where var\"#s464\"<:SOperator,OID{var\"#s462\",RC,IC,S} where S<:Union{Nothing, Int64} where IC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where RC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where var\"#s462\"<:SIndex,OID{var\"#s350\",RC,IC,S} where S<:Union{Nothing, Int64} where IC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where RC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where var\"#s350\"<:SIndex,Any}","page":"Spin package","title":"QuantumLattices.Interfaces.permute","text":"permute(::Type{<:SOperator}, id1::OID{<:SIndex}, id2::OID{<:SIndex}, table) -> Tuple{Vararg{SOperator}}\n\nPermute two fermionic oid and get the result.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"CurrentModule = QuantumLattices.Prerequisites","category":"page"},{"location":"man/Prerequisites/Introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"This module contains the prerequisites of the package.","category":"page"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"The constants, types, macros, functions or submodules defined in this module will not be exported by the package. Instead, they serve as the prerequisites. The range of the contents are quite wide, but basically, they fall into two categories:","category":"page"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"Global constants and miscellaneous tiny useful functions;\nBasic data structures as supplements to the Julia.Base and other common packages.","category":"page"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"The first category is contained in the main body of this module, while the other comes in separate submodules.","category":"page"},{"location":"man/Prerequisites/Introduction/#Constants-and-functions","page":"Introduction","title":"Constants and functions","text":"","category":"section"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"All the following constants and functions in this section are defined in the main body and are exported by this module.","category":"page"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"atol\nrtol\nFloat\ndecimaltostr\nordinal\ndelta\nrawtype","category":"page"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.atol","page":"Introduction","title":"QuantumLattices.Prerequisites.atol","text":"Absolute tolerance for float numbers.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.rtol","page":"Introduction","title":"QuantumLattices.Prerequisites.rtol","text":"Relative tolerance for float numbers.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.Float","page":"Introduction","title":"QuantumLattices.Prerequisites.Float","text":"Default float type.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.decimaltostr","page":"Introduction","title":"QuantumLattices.Prerequisites.decimaltostr","text":"decimaltostr(number, ::Int=5)\ndecimaltostr(number::Integer, n::Int=5)\ndecimaltostr(number::Rational, n::Int=5)\ndecimaltostr(number::AbstractFloat, n::Int=5)\ndecimaltostr(number::Complex, n::Int=5)\n\nConvert a number to a string with at most n decimal places.\n\n\n\n\n\n","category":"function"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.ordinal","page":"Introduction","title":"QuantumLattices.Prerequisites.ordinal","text":"ordinal(number::Interger)\n\nConvert a positive number to its corresponding ordinal.\n\n\n\n\n\n","category":"function"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.delta","page":"Introduction","title":"QuantumLattices.Prerequisites.delta","text":"delta(i, j) -> Int\n\nKronecker delta function.\n\n\n\n\n\n","category":"function"},{"location":"man/Prerequisites/Introduction/#QuantumLattices.Prerequisites.rawtype","page":"Introduction","title":"QuantumLattices.Prerequisites.rawtype","text":"rawtype(T::DataType) -> Union{DataType, UnionAll}\nrawtype(T::UnionAll) -> Union{DataType, UnionAll}\n\nGet the \"raw part\" of a type. That is, the type without all its type parameters.\n\n\n\n\n\n","category":"function"},{"location":"man/Prerequisites/Introduction/#Basic-structures","page":"Introduction","title":"Basic structures","text":"","category":"section"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"Here lists the table of contents of the basic data structures that are supplements to the Julia.Base and other common packages:","category":"page"},{"location":"man/Prerequisites/Introduction/","page":"Introduction","title":"Introduction","text":"Pages = [\n        \"TypeTraits.md\",\n        \"Factories.md\",\n        \"CompositeStructures.md\",\n        \"SimpleTrees.md\",\n        \"NamedVectors.md\",\n        ]\nDepth = 2","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"CurrentModule = QuantumLattices.Prerequisites.SimpleTrees","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"push!(LOAD_PATH, \"../../../../src/\")\nusing QuantumLattices.Prerequisites.SimpleTrees","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#Simple-trees","page":"Simple trees","title":"Simple trees","text":"","category":"section"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"The aim of this module is to represent the standard tree structure in efficiency-non-sensitive cases. Please note that the default implementation of tree methods are far from optimal in efficiency. Therefore, please DO NOT use it if you need an efficient tree for addition, deletion, sort and inquiry. This module of codes apply only when the structure of tree matters but not the efficiency.","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#AbstractSimpleTree","page":"Simple trees","title":"AbstractSimpleTree","text":"","category":"section"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"AbstractSimpleTree{N, D} is the abstract type for all concrete trees. By design, it has two type parameters:","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"N: the type of the tree's node\nD: the type of the tree's data","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"To fully utilize the methods designed for a tree structure, in our protocol, a concrete subtype must implement the following methods:","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"inquiry related methods\nroot(tree::AbstractSimpleTree{N}) where N -> Union{N, Nothing}\nGet a tree's root node (nothing for empty trees)\nhaskey(tree::AbstractSimpleTree{N}, node::N) where N -> Bool\nCheck whether a node is in a tree.\nlength(tree::AbstractSimpleTree) -> Int\nGet the number of a tree's nodes.\nparent(tree::AbstractSimpleTree{N},\n       node::N,\n       superparent::Union{N, Nothing}=nothing\n       ) where N -> Union{N, Nothing}\nGet the parent of a tree's node or return superparent when the input node is the tree's root.\nchildren(tree::AbstractSimpleTree{N}, node::N) where N -> Vector{N}\nGet the children of a tree's node.\nstructure modification related methods\naddnode!(tree::AbstractSimpleTree{N},\n         parent::Union{N, Nothing},\n         node::N\n         ) where N -> typeof(tree)\nUpdate the structure of a tree by adding a node. When the parent is nothing, the input tree must be empty and the input node becomes the tree's root.\ndeletenode!(tree::AbstractSimpleTree{N}, node::N) where N -> typeof(tree)\nUpdate the structure of a tree by deleting a node.\nindex related methods\ngetindex(tree::AbstractSimpleTree{N, D}, node::N) where {N, D} -> D\nGet the data of a tree's node\nsetindex!(tree::AbstractSimpleTree{N, D}, node::N, data::D) where {N, D}\nSet the data of a tree's node.","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"Based on these methods, we implement several generic functions for inquiries and manipulations","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"inquiry for type parameters: keytype, valtype, eltype\nexpansion over nodes/data-records: keys, values, pairs\ninquiry for info of nodes: isleaf, level\ninquiry for nodes: ancestor, descendants, siblings, leaves\nmodification: push!, append!, delete!, empty!","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"And optionally, when a subtype implement the following method,","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"empty(tree::AbstractSimpleTree) -> typeof(tree)","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"which constructs an empty tree of the same type with the input one, two more methods are supported:","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"subtree: Get a subtree starting from a node.\nmove!: Move a subtree to a new position.","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#SimpleTreeCore-and-SimpleTree","page":"Simple trees","title":"SimpleTreeCore and SimpleTree","text":"","category":"section"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"To implement all the prerequisites listed above costs a bit efforts. We provide two lazy ways to get over this:","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"Inheritance AbstractSimpleTree with TREECORE::SimpleTreeCore as the last attribute\nInclusion an attribute which is an instance of SimpleTree","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#SimpleTreeCore","page":"Simple trees","title":"SimpleTreeCore","text":"","category":"section"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"SimpleTreeCore{N, D}, as the literal meaning indicates, is the core of a tree. It encapsulates all the data structures needed by the default implementation, which contains 4 attributes:","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"root::N: the tree's root node\ncontents::Dict{N, D}: the tree's (node, data) pairs\nparent::Dict{N, N}: records of the parent of each of the tree's nodes\nchildren::Dict{N, Vector{N}}: records of the children of each of the tree's nodes","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"As above, the first lazy way is to include this struct with the special name :TREECORE in your concrete subtype as the last attribute. This process can be even lazier, in that we provide a macro @simpletree to decorate your \"raw\" struct automatically, e.g.","category":"page"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"# simple subtree\n@simpletree(struct SubTree1 end)\n\n# subtree with tree parameters\n@simpletree(struct SubTree2 end, {N<:AbstractString, D<:Number})\n\n# subtree with definite tree parameters\n@simpletree(struct SubTree3 end, {::String, ::Int})\n\n# subtree with extra fields\n@simpletree(struct SubTree4 info::Vector{Int} end, {N<:AbstractString, D<:Number})\n\n# subtree with extra parametric fields\n@simpletree(struct SubTree5{T} info::Vector{T} end, {N<:AbstractString, D<:Number})\n\n# subtree with extra fields whose parameters overlap with node/data type\n@simpletree(struct SubTree6{N} info::Vector{N} end, {N<:AbstractString, D<:Number})","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#SimpleTree","page":"Simple trees","title":"SimpleTree","text":"","category":"section"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"SimpleTree{N, D} is the minimum struct that implements all the default tree methods. You can include an instance of it as an attribute in your own type to utilize all the tree methods.","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#Manual","page":"Simple trees","title":"Manual","text":"","category":"section"},{"location":"man/Prerequisites/SimpleTrees/","page":"Simple trees","title":"Simple trees","text":"Modules = [SimpleTrees]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.simpletreedepth","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.simpletreedepth","text":"simpletreedepth\n\nIndicate that the iteration over a tree is depth-first.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.simpletreewidth","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.simpletreewidth","text":"simpletreewidth\n\nIndicate that the iteration over a tree is width-first.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree","text":"AbstractSimpleTree{Node, Data}\n\nAbstract type for all concrete trees.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.SimpleTree","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.SimpleTree","text":"SimpleTree{N, D}() where {N, D}\n\nThe minimum tree structure that implements all the default tree methods.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeCore","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeCore","text":"SimpleTreeCore()\n\nThe core of a tree.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.@simpletree","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.@simpletree","text":"@simpletree structdef treeparams::Union{Expr, Nothing}=nothing\n\nDecorate a \"raw\" struct to be a subtype of AbstractSimpleTree.\n\nnote: Note\nA \"raw\" struct means:\nIt has no explicit supertype;\nIt has no inner constructor;\nIt has no attribute :TREECORE.\nThe keytype and valtype can be assigned by the argument treeparams in the form {keytype, valtype}.\nWhen the formal argument names of keytype and valtype are not assigned, they can be automatically generated by the functioin gensym. For example, the struct Tree after the decoration by the following code\n@simpletree(struct Tree{N} info::Vector{N} end)\nwill have three type parameters.\nWhen the keytype or valtype is a definite type, use symbol :(::) before that type. For example, the struct Tree decorated by the following code\n@simpletree(struct Tree{N} info::Vector{N} end, {::String, D<:Number})\nonly has two type parameters N and D<:Number.\nWhen the formal argument names of keytype and valtype overlap with those of the raw struct type parameters, the duplicates will be considered as the same. For example, the decorated struct Tree by the following code\n@simpletree(struct Tree{D} info::Vector{D} end, {::String, D<:Number})\nhas only one type parameter D<:Number, where the D in the info::Vector{D} is the same D with that in the decorated attribute TREECORE::SimpleTreeCore{String, D}.\nWhen the formal argument names of keytype and valtype have no intersection with those of the raw struct type parameters, the type parameters of the decorated struct will be just extended by keytype and valtype. For example, the decorated struct Tree by the following code\n@simpletree(struct Tree{T} info::Vector{T} end, {N<:Tuple, D<:Number})\nhas 3 type parameters, T, N<:Tuple and D<:Number.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/SimpleTrees/#Base.:==-Union{Tuple{TC}, Tuple{TC,TC}} where TC<:QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeCore","page":"Simple trees","title":"Base.:==","text":"==(tc1::TC, tc2::TC) where TC<:SimpleTreeCore -> Bool\nisequal(tc1::TC, tc2::TC) where TC<:SimpleTreeCore -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.:==-Union{Tuple{T}, Tuple{T,T}} where T<:QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree","page":"Simple trees","title":"Base.:==","text":"==(t1::T, t2::T) where T<:AbstractSimpleTree -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.append!-Union{Tuple{D}, Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D},QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D}}} where D where N","page":"Simple trees","title":"Base.append!","text":"append!(tree::AbstractSimpleTree{N, D}, subtree::AbstractSimpleTree{N, D}) where {N, D} -> typeof(tree)\nappend!(tree::AbstractSimpleTree{N, D}, node::Union{N, Nothing}, subtree::AbstractSimpleTree{N, D}) where {N, D} -> typeof(tree)\n\nAppend a subtree to a tree.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.delete!-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"Base.delete!","text":"delete!(tree::AbstractSimpleTree{N}, node::N) where N -> typeof(tree)\n\nDelete a node and all its descendants from a tree.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.eltype-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"Base.eltype","text":"eltype(tree::AbstractSimpleTree)\neltype(::Type{<:AbstractSimpleTree{N, D}}) where {N, D}\n\nGet the eltype of a tree.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.empty!-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"Base.empty!","text":"empty!(tree::AbstractSimpleTree) -> typeof(tree)\n\nEmpty a tree.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.empty-Union{Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D}}, Tuple{D}, Tuple{N}} where D where N","page":"Simple trees","title":"Base.empty","text":"empty(tree::AbstractSimpleTree)\n\nConstruct an empty tree of the same type with the input one.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.getindex-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"Base.getindex","text":"getindex(tree::AbstractSimpleTree{N}, node::N) where N -> N\n\nGet the data of a tree's node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.haskey-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"Base.haskey","text":"haskey(tree::AbstractSimpleTree{N}, node::N) where N -> Bool\n\nCheck whether a node is in a tree.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.isequal-Union{Tuple{T}, Tuple{T,T}} where T<:QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree","page":"Simple trees","title":"Base.isequal","text":"isequal(t1::T, t2::T) where T<:AbstractSimpleTree -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.keys-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeIteration}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeIteration,Union{Nothing, N}}} where N","page":"Simple trees","title":"Base.keys","text":"keys(tree::AbstractSimpleTree{N}, ::SimpleTreeDepth, node::Union{N, Nothing}=root(tree)) where N\nkeys(tree::AbstractSimpleTree{N}, ::SimpleTreeWidth, node::Union{N, Nothing}=root(tree)) where N\n\nIterate over a tree's nodes starting from a certain node by depth first search or width first search.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.keytype-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"Base.keytype","text":"keytype(tree::AbstractSimpleTree)\nkeytype(::Type{<:AbstractSimpleTree{N}}) where N\n\nGet a tree's node type.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.length-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"Base.length","text":"length(tree::AbstractSimpleTree) -> Int\n\nGet the number of a tree's nodes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.pairs-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeIteration}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeIteration,Union{Nothing, N}}} where N","page":"Simple trees","title":"Base.pairs","text":"pairs(tree::AbstractSimpleTree{N}, ::SimpleTreeDepth, node::Union{N, Nothing}=root(tree)) where N\npairs(tree::AbstractSimpleTree{N}, ::SimpleTreeWidth, node::Union{N, Nothing}=root(tree)) where N\n\nIterate over a tree's (node, data) pairs starting from a certain node by depth first search or width first search.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.push!-Union{Tuple{D}, Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D},N,D}} where D where N","page":"Simple trees","title":"Base.push!","text":"push!(tree::AbstractSimpleTree{N, D}, node::N, data::D) where {N, D} -> typeof(tree)\npush!(tree::AbstractSimpleTree{N, D}, parent::Union{N, Nothing}, node::N, data::D) where {N, D} -> typeof(tree)\n\nPush a new node to a tree. When parent is nothing, this function set the root node of an empty tree.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.setindex!-Union{Tuple{D}, Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D},D,N}} where D where N","page":"Simple trees","title":"Base.setindex!","text":"setindex!(tree::AbstractSimpleTree{N, D}, data::D, node::N) where {N, D}\n\nSet the data of a tree's node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.valtype-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"Base.valtype","text":"valtype(tree::AbstractSimpleTree)\nvaltype(::Type{<:AbstractSimpleTree{N, D} where N}) where D=D\n\nGet a tree's data type.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#Base.values-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeIteration}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,QuantumLattices.Prerequisites.SimpleTrees.SimpleTreeIteration,Union{Nothing, N}}} where N","page":"Simple trees","title":"Base.values","text":"values(tree::AbstractSimpleTree{N}, ::SimpleTreeDepth, node::Union{N, Nothing}=root(tree)) where N\nvalues(tree::AbstractSimpleTree{N}, ::SimpleTreeWidth, node::Union{N, Nothing}=root(tree)) where N\n\nIterate over a tree's data starting from a certain node by depth first search or width first search.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.addnode!-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.addnode!","text":"addnode!(tree::AbstractSimpleTree{N}, node::N) where N} -> typeof(tree)\naddnode!(tree::AbstractSimpleTree{N}, ::Nothing, node::N) where N -> typeof(tree)\naddnode!(tree::AbstractSimpleTree{N}, parent::N, node::N) where N -> typeof(tree)\n\nUpdate the structure of a tree by adding a node. When the parent is nothing, the input tree must be empty and the input node becomes the tree's root.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.ancestor-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N,Int64}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.ancestor","text":"ancestor(tree::AbstractSimpleTree{N}, node::N, generation::Int=1) where N -> N\n\nGet the ancestor of a tree's node of the n-th generation.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.children-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.children","text":"children(tree::AbstractSimpleTree) -> Vector{keytype(tree)}\nchildren(tree::AbstractSimpleTree, ::Nothing) -> Vector{keytype(tree)}\nchildren(tree::AbstractSimpleTree{N}, node::N) where N -> Vector{N}\n\nGet the children of a tree's node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.deletenode!-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.deletenode!","text":"deletenode!(tree::AbstractSimpleTree{N}, node::N) where N -> typeof(tree)\n\nUpdate the structure of a tree by deleting a node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.descendants-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N,Int64}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.descendants","text":"descendants(tree::AbstractSimpleTree{N}, node::N, generation::Int=1) where N -> Vector{N}\n\nGet the descendants of a tree's node of the nth generation.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.isleaf-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.isleaf","text":"isleaf(tree::AbstractSimpleTree{N}, node::N) where N -> Bool\n\nJudge whether a tree's node is a leaf (a node without children) or not.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.leaves-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.leaves","text":"leaves(tree::AbstractSimpleTree) -> Vector{keytype(tree)}\n\nGet a tree's leaves.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.level-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.level","text":"level(tree::AbstractSimpleTree{N}, node::N) where N -> Int\n\nGet the level of tree's node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.move!-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.move!","text":"move!(tree::AbstractSimpleTree{N}, node::N, parent::N) where N -> typeof(tree)\n\nMove a subtree to a new position.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.parent-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N,Union{Nothing, N}}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.parent","text":"parent(tree::AbstractSimpleTree{N}, node::N, superparent::Union{N, Nothing}=nothing) where N -> Union{N, Nothing}\n\nGet the parent of a tree's node. When node is the tree's root, return superparent.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.root-Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree}","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.root","text":"root(tree::AbstractSimpleTree) -> Union{keytype(tree), Nothing}\n\nGet a tree's root node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.siblings-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.siblings","text":"siblings(tree::AbstractSimpleTree{N}, node::N) where N -> Vector{N}\n\nGet the siblings (other nodes sharing the same parent) of a tree's node.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/SimpleTrees/#QuantumLattices.Prerequisites.SimpleTrees.subtree-Union{Tuple{N}, Tuple{QuantumLattices.Prerequisites.SimpleTrees.AbstractSimpleTree{N,D} where D,N}} where N","page":"Simple trees","title":"QuantumLattices.Prerequisites.SimpleTrees.subtree","text":"subtree(tree::AbstractSimpleTree{N}, node::N) where N -> typeof(tree)\n\nGet a subtree whose root is node.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"CurrentModule = QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/#Spatial-info-of-a-unitcell","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"push!(LOAD_PATH, \"../../../src/\")\nusing QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"The first step toward the complete description of a quantum lattice system is the understanding of the spatial info of a unitcell.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/#Point","page":"Spatial info of a unitcell","title":"Point","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"The basic data structure encoding the spatial info of a unitcell is Point.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Theoretically, the only information that is needed to determine a point in a lattice is its coordinates in the real space. Now that coordinates sometimes are complicated real numbers and are not convenient for lookup, it is desirable to attach to each point with a sensible id. Then you may agree that the most appropriate data structure representing a point should contain two parts, the id part and the coordinate part. But the story does not end up here. This is because we want to compress the whole spatial info of a lattice into its unitcells. For each lattice, there exists a freedom to choose its unitcells. Sometimes we even need enlarged unitcells. Therefore, something must be adopted to keep the info of which unitcell a point belongs to in the lattice. This information is useful even when we only keep the data of points within a single unitcell because at this time we usually have to obtain those bonds across the unitcell boundaries that must contain a point in other unitcells. Now we arrive at the final structure, just as the Point defined in this package, which has three attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"pid::PID: the id of a point\nrcoord::StaticArrays.SVector: the coordinates of the point in the real space\nicoord::StaticArrays.SVector: the coordinates of the unitcell the point belongs to in the real space","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Here PID contains two attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"scope::Any: the scope of a point\nsite::Int: the site index of a point","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"The :site attribute is necessary and easy to understand for a point id. Yet sometimes it is more convenient if we can assign extra information to a point id, e.g., a priori knowledge of the groupings of lattice points. Therefore, we provide another attribute, :scope, to act as the supplement to the :site attribute, which can be anything you want.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Let's see some examples.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"You can specify both the :scope attribute and the :site attribute during the initialization of a PID:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"PID(\"WhateverYouWant\", 1)","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Or, you can omit the :scope attribute:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"PID(1)","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Then the :scope attribute get a default value 'T', which is short for the nick name of my wife.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"At the construction of a Point, :rcoord and :icoord can accept tuples as inputs, such as","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Point(PID(1), (0.0,), (0.0,))","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"If the :icoord is omitted, it will be initialized by a zero StaticArrays.SVector:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Point(PID(1), (0.0,))","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/#Lattice","page":"Spatial info of a unitcell","title":"Lattice","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Lattice is the simplest structure to encode all the spatial info within a unitcell. Apparently, it must contain all the points of a unitcell. Besides, a unitcell can assume either open or periodic boundary for every spatial dimension, thus a Lattice should also contain the translation vectors. Other stuff also appears to be useful, such as the name, the reciprocals dual to the translation vectors, and the bond length of each order of nearest neighbors. Therefore, in this package, Lattice gets seven attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"name::String: the name of the lattice\npids::Vector{<:PID}: the pids of the lattice\nrcoords::Matrix{Float64}: the rcoords of the lattice\nicoords::Matrix{Float64}: the icoords of the lattice\nvectors::Vector{<:StaticArrays.SVector}: the translation vectors of the lattice\nreciprocals::Vector{<:StaticArrays.SVector}: the reciprocals of the lattice\nneighbors::Dict{Int, Float64}: the order-distance map of the nearest neighbors of the lattice","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Here, the :pids, :rcoords and :icoords attributes decompose the points in a lattice, which makes it convenient for global operations on the lattice.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Points can be used directly to construct a lattice, whereas :vectors and :neighbors can be assigned by keyword arguments:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))],\n        vectors=[[2.0]],\n        neighbors=Dict(1=>1.0, 2=>2.0)\n        )","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"The :neighbors keyword argument can also be a natural number, which sets the highest order of nearest neighbors, and the order-distance map of nearest neighbors can be computed automatically by the construction function:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))],\n        vectors=[[2.0]],\n        neighbors=2\n        )","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"It is noted that the :vectors and :neighbors attributes can also be omitted at the initialization, then :vectors will be set to be empty and :neighbors to be 1 upon the call of the construction function:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))])","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"In all cases, the :reciprocals attributes need not be assigned because it can be deduced from the input :vectors.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/#Bonds","page":"Spatial info of a unitcell","title":"Bonds","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"One of the most important functions of a lattice is to inquiry the bonds it contains.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"A usual bond contains two points, the start point and the end point. This structure is implemented as Bond, which has three attributes:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"neighbor::Int: the nearest neighbor order of the bond\nspoint::Point: the start point of the bond\nepoint::Point: the end point of the bond","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"The :neighbor provides the a priori info of the nearest neighbor order of a bond, which proves to be quite advantageous in future uses.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"There are other types of generalized bonds. In fact, a single point can also be viewed as a kind of bond, namely, the zeroth order nearest neighbor bond. We can also have more complex generalized bonds, such as a plaquette (the minimum four-site square) in the square lattice. All these generalized bonds gather under the abstract type, AbstractBond, and the generation from a lattice of such generalized bonds can be managed by the type Bonds. In this package, we only implement two types of concrete generalized bonds, i.e. Point and Bond. Users interested in other types can define them themselves by extending our protocols. In this way, the management of the generation of these user extended bonds can be utilized by Bonds without extra modifications. See Bonds for more details.","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"Now let's see a simple example:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"lattice = Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))],\n                vectors=[[2.0]],\n                neighbors=2\n                )\nBonds(lattice)","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"By default, Bonds(lattice::Lattice) generates all the generalized bonds with orders of nearest neighbors specified by the attribute :neighbors of the input lattice, including the individual points and the bonds across the periodic boundaries. Note that the bonds whose lengths are not present in the :neighbors attribute of the input lattice won't be included in the result, even when their lengths are shorter:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"lattice = Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))],\n                vectors=[[2.0]],\n                neighbors=Dict(2=>2.0)\n                )\nBonds(lattice)","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"In other words, the :neighbors attribute can be viewed as a filter of the generated bonds (but this filter only affects the Bond typed but not the Point typed generalized bonds). When the input lattice has no translation vectors, the generated bonds will only contain the individual points and the intra-unitcell bonds, just as expected:","category":"page"},{"location":"tutorials/UnitcellDescription/SpatialInfoOfAUnitcell/","page":"Spatial info of a unitcell","title":"Spatial info of a unitcell","text":"lattice = Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))])\nBonds(lattice)","category":"page"},{"location":"man/Essentials/FockPackage/","page":"Fock package","title":"Fock package","text":"CurrentModule = QuantumLattices.Essentials.FockPackage","category":"page"},{"location":"man/Essentials/FockPackage/#Fock-package","page":"Fock package","title":"Fock package","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#Fock-degrees-of-freedom","page":"Fock package","title":"Fock degrees of freedom","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#FID-and-Fock","page":"Fock package","title":"FID and Fock","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#FIndex","page":"Fock package","title":"FIndex","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#Predefined-Fock-operators","page":"Fock package","title":"Predefined Fock operators","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#Fock-terms","page":"Fock package","title":"Fock terms","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#FCID-and-FockCoupling","page":"Fock package","title":"FCID and FockCoupling","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#Predefined-Fock-couplings","page":"Fock package","title":"Predefined Fock couplings","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#Predefined-Fock-terms","page":"Fock package","title":"Predefined Fock terms","text":"","category":"section"},{"location":"man/Essentials/FockPackage/#Manual","page":"Fock package","title":"Manual","text":"","category":"section"},{"location":"man/Essentials/FockPackage/","page":"Fock package","title":"Fock package","text":"Modules = [FockPackage]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.ANNIHILATION","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.ANNIHILATION","text":"ANNIHILATION\n\nIndicate that the nambu index is ANNIHILATION.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.BFockTerm","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.BFockTerm","text":"BFockTerm\n\nBosonic Fock term types.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.CREATION","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.CREATION","text":"CREATION\n\nIndicate that the nambu index is CREATION.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FFockTerm","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FFockTerm","text":"FFockTerm\n\nFermionic Fock term types.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.MAJORANA","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.MAJORANA","text":"MAJORANA\n\nIndicate that the nambu index is MAJORANA.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.boptdefaultlatex","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.boptdefaultlatex","text":"boptdefaultlatex\n\nThe default LaTeX format of the oids of a bosonic operator.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.foptdefaultlatex","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.foptdefaultlatex","text":"foptdefaultlatex\n\nThe default LaTeX format of the oids of a fermionic operator.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.BOperator","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.BOperator","text":"BOperator(value::Number, id::ID{OID}=ID())\n\nBosonic Fock operator.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Coulomb","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Coulomb","text":"Coulomb{ST}(    id::Symbol, value::Any, bondkind::Int=1;\n                couplings::Union{Function, Coupling, Couplings, Nothing}=nothing,\n                amplitude::Union{Function, Nothing}=nothing,\n                modulate::Union{Function, Bool}=false\n                ) where ST\n\nCoulomb term.\n\nType alias for Term{statistics, :Coulomb, 4, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FCID","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FCID","text":"FCID(; center=wildcard, atom=wildcard, orbital=wildcard, spin=wildcard, nambu=wildcard, obsub=wildcard, spsub=wildcard)\n\nThe id of a Fock coupling.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FID","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FID","text":"FID <: IID\n\nThe Fock id.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FID-Tuple{}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FID","text":"FID(; orbital::Int=1, spin::Int=1, nambu::Int=ANNIHILATION)\n\nCreate a Fock id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FIndex","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FIndex","text":"FIndex{S} <: Index{PID{S}, FID}\n\nThe Fock index.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FOperator","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FOperator","text":"FOperator(value::Number, id::ID{OID}=ID())\n\nFermionic Fock operator.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Fock","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Fock","text":"Fock <: Internal{FID}\n\nThe Fock interanl degrees of freedom.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Fock-Tuple{}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Fock","text":"Fock(; atom::Int=1, norbital::Int=1, nspin::Int=2, nnambu::Int=2)\n\nConstruct a Fock degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FockCoupling","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FockCoupling","text":"FockCoupling(value::Number, id::ID{FCID}, obsubscripts::Subscripts, spsubscripts::Subscripts)\nFockCoupling{N}(value::Number=1;\n                centers::Union{NTuple{N, Int}, Nothing}=nothing,\n                atoms::Union{NTuple{N, Int}, Nothing}=nothing,\n                orbitals::Union{NTuple{N, Int}, Subscript, Nothing}=nothing,\n                spins::Union{NTuple{N, Int}, Subscript, Nothing}=nothing,\n                nambus::Union{NTuple{N, Int}, Nothing}=nothing\n                ) where N\n\nFock coupling.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.FockOperator","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.FockOperator","text":"FockOperator{V<:Number, I<:ID{OID}} <: Operator{V, I}\n\nAbstract type for all Fock operators.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Hopping","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Hopping","text":"Hopping{ST}(id::Symbol, value::Any, bondkind::Int=1;\n            couplings::Union{Function, Coupling, Couplings, Nothing}=nothing,\n            amplitude::Union{Function, Nothing}=nothing,\n            modulate::Union{Function, Bool}=false,\n            ) where {ST}\n\nHopping term.\n\nType alias for Term{statistics, :Hopping, 2, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Hubbard","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Hubbard","text":"Hubbard{ST}(id::Symbol, value::Any; amplitude::Union{Function, Nothing}=nothing, modulate::Union{Function, Bool}=false) where ST\n\nHubbard term.\n\nType alias for Term{statistics, :Hubbard, 4, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.InterOrbitalInterSpin","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.InterOrbitalInterSpin","text":"InterOrbitalInterSpin{ST}(id::Symbol, value::Any; amplitude::Union{Function, Nothing}=nothing, modulate::Union{Function, Bool}=false) where ST\n\nInterorbital-interspin term.\n\nType alias for Term{statistics, :InterOrbitalInterSpin, 4, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.InterOrbitalIntraSpin","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.InterOrbitalIntraSpin","text":"InterOrbitalIntraSpin{ST}(id::Symbol, value::Any; amplitude::Union{Function, Nothing}=nothing, modulate::Union{Function, Bool}=false) where ST\n\nInterorbital-intraspin term.\n\nType alias for Term{statistics, :InterOrbitalIntraSpin, 4, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Onsite","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Onsite","text":"Onsite{ST}( id::Symbol, value::Any;\n            couplings::Union{Function, Coupling, Couplings, Nothing}=nothing,\n            amplitude::Union{Function, Nothing}=nothing,\n            modulate::Union{Function, Bool}=false,\n            ) where {ST}\n\nOnsite term.\n\nType alias for Term{statistics, :Onsite, 2, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.PairHopping","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.PairHopping","text":"PairHopping{ST}(id::Symbol, value::Any; amplitude::Union{Function, Nothing}=nothing, modulate::Union{Function, Bool}=false) where ST\n\nPair-hopping term.\n\nType alias for Term{statistics, :PairHopping, 4, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.Pairing","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.Pairing","text":"Pairing{ST}(id::Symbol, value::Any, bondkind::Int=0;\n            couplings::Union{Function, Coupling, Couplings, Nothing}=nothing,\n            amplitude::Union{Function, Nothing}=nothing,\n            modulate::Union{Function, Bool}=false,\n            ) where {ST}\n\nPairing term.\n\nType alias for Term{statistics, :Pairing, 2, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.SpinFlip","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.SpinFlip","text":"SpinFlip{ST}(id::Symbol, value::Any; amplitude::Union{Function, Nothing}=nothing, modulate::Union{Function, Bool}=false) where ST\n\nSpin-flip term.\n\nType alias for Term{statistics, :SpinFlip, 4, id, V, Int, <:TermCouplings, <:TermAmplitude, <:Union{TermModulate, Nothing}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@fc_str-Tuple{Any}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@fc_str","text":"fc\"...\" -> FockCoupling\n\nConstruct a FockCoupling from a literal string.\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@σʸ_str-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@σʸ_str","text":"σʸ\"sp\"/σʸ\"sp@(c₁, c₂)\" -> Couplings\nσʸ\"ob\"/σʸ\"ob@(c₁, c₂)\" -> Couplings\nσʸ\"sl\"/σʸ\"sl@(c₁, c₂)\" -> Couplings\nσʸ\"ph\"/σʸ\"ph@(c₁, c₂)\" -> Couplings\n\nThe Pauli matrix σʸ, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@σˣ_str-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@σˣ_str","text":"σˣ\"sp\"/σˣ\"sp@(c₁, c₂)\" -> Couplings\nσˣ\"ob\"/σˣ\"ob@(c₁, c₂)\" -> Couplings\nσˣ\"sl\"/σˣ\"sl@(c₁, c₂)\" -> Couplings\nσˣ\"ph\"/σˣ\"ph@(c₁, c₂)\" -> Couplings\n\nThe Pauli matrix σˣ, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@σᶻ_str-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@σᶻ_str","text":"σᶻ\"sp\"/σᶻ\"sp@(c₁, c₂)\" -> Couplings\nσᶻ\"ob\"/σᶻ\"ob@(c₁, c₂)\" -> Couplings\nσᶻ\"sl\"/σᶻ\"sl@(c₁, c₂)\" -> Couplings\nσᶻ\"ph\"/σᶻ\"ph@(c₁, c₂)\" -> Couplings\n\nThe Pauli matrix σᶻ, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@σ⁰_str-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@σ⁰_str","text":"σ⁰\"sp\"/σ⁰\"sp@(c₁, c₂)\" -> Couplings\nσ⁰\"ob\"/σ⁰\"ob@(c₁, c₂)\" -> Couplings\nσ⁰\"sl\"/σ⁰\"sl@(c₁, c₂)\" -> Couplings\nσ⁰\"ph\"/σ⁰\"ph@(c₁, c₂)\" -> Couplings\n\nThe Pauli matrix σ⁰, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@σ⁺_str-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@σ⁺_str","text":"σ⁺\"sp\"/σ⁺\"sp@(c₁, c₂)\" -> Couplings\nσ⁺\"ob\"/σ⁺\"ob@(c₁, c₂)\" -> Couplings\nσ⁺\"sl\"/σ⁺\"sl@(c₁, c₂)\" -> Couplings\nσ⁺\"ph\"/σ⁺\"ph@(c₁, c₂)\" -> Couplings\n\nThe Pauli matrix σ⁺, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.@σ⁻_str-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.@σ⁻_str","text":"σ⁻\"sp\"/σ⁻\"sp@(c₁, c₂)\" -> Couplings\nσ⁻\"ob\"/σ⁻\"ob@(c₁, c₂)\" -> Couplings\nσ⁻\"sl\"/σ⁻\"sl@(c₁, c₂)\" -> Couplings\nσ⁻\"ph\"/σ⁻\"ph@(c₁, c₂)\" -> Couplings\n\nThe Pauli matrix σ⁻, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"macro"},{"location":"man/Essentials/FockPackage/#Base.:*-Tuple{FOperator,FOperator}","page":"Fock package","title":"Base.:*","text":"*(f1::FOperator, f2::FOperator) -> Union{Nothing, FOperator}\n\nGet the multiplication of two fermionic Fock operators.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#Base.:*-Tuple{FockCoupling,FockCoupling}","page":"Fock package","title":"Base.:*","text":"*(fc1::FockCoupling, fc2::FockCoupling) -> FockCoupling\n\nGet the multiplication between two Fock couplings.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#Base.adjoint-Tuple{FID}","page":"Fock package","title":"Base.adjoint","text":"adjoint(fid::FID) -> FID\n\nGet the adjoint of a Fock id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#Base.angle-Tuple{OID{var\"#s467\",RC,IC,S} where S<:Union{Nothing, Int64} where IC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where RC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where var\"#s467\"<:FIndex,AbstractArray{var\"#s464\",1} where var\"#s464\"<:AbstractArray{Float64,1},AbstractArray{Float64,1}}","page":"Fock package","title":"Base.angle","text":"angle(id::OID{<:FIndex}, vectors::AbstractVector{<:AbstractVector{Float}}, values::AbstractVector{Float}) -> Complex{Float}\n\nGet the twist phase corresponding to a Fock oid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#Base.repr-Tuple{FockCoupling}","page":"Fock package","title":"Base.repr","text":"repr(fc::FockCoupling) -> String\n\nGet the repr representation of a Fock coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#Base.show-Tuple{IO,FockCoupling}","page":"Fock package","title":"Base.show","text":"show(io::IO, fc::FockCoupling)\n\nShow a Fock coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#Base.union-Union{Tuple{P}, Tuple{Type{P},Type{FID}}} where P<:PID","page":"Fock package","title":"Base.union","text":"union(::Type{P}, ::Type{FID}) where {P<:PID}\n\nGet the union type of PID and FID.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.DegreesOfFreedom.otype-Tuple{Type{var\"#s467\"} where var\"#s467\"<:Union{Term{'F',:Onsite,2,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:Hopping,2,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:Pairing,2,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:Hubbard,4,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:InterOrbitalInterSpin,4,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:InterOrbitalIntraSpin,4,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:SpinFlip,4,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:PairHopping,4,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id, Term{'F',:Coulomb,4,id,V,Int64,C,A,M} where M<:Union{Nothing, TermModulate} where A<:TermAmplitude where C<:TermCouplings where V where id},Type{var\"#s464\"} where var\"#s464\"<:OID}","page":"Fock package","title":"QuantumLattices.Essentials.DegreesOfFreedom.otype","text":"otype(T::Type{<:FFockTerm}, I::Type{<:OID})\notype(T::Type{<:BFockTerm}, I::Type{<:OID})\n\nGet the operator type of a Fock term.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.DegreesOfFreedom.script-Tuple{OID{var\"#s468\",RC,IC,S} where S<:Union{Nothing, Int64} where IC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where RC<:Union{Nothing, StaticArrays.SArray{Tuple{S},T,1,S} where T where S} where var\"#s468\"<:FIndex,Val{:site}}","page":"Fock package","title":"QuantumLattices.Essentials.DegreesOfFreedom.script","text":"script(oid::OID{<:FIndex}, ::Val{:site}) -> Int\nscript(oid::OID{<:FIndex}, ::Val{:orbital}) -> Int\nscript(oid::OID{<:FIndex}, ::Val{:spinint}) -> Int\nscript(oid::OID{<:FIndex}, ::Val{:spinsym}) -> String\nscript(oid::OID{<:FIndex}, ::Val{:nambu}) -> String\n\nGet the required script of an Fock oid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.isnormalordered-Tuple{FockOperator}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.isnormalordered","text":"isnormalordered(opt::FockOperator) -> Bool\n\nJudge whether a FockOperator is normal ordered.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.nambufockindextotuple","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.nambufockindextotuple","text":"nambufockindextotuple\n\nIndicate that the filtered attributes are (:scope, :nambu, :site, :orbital, :spin) when converting a Fock index to tuple.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.usualfockindextotuple","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.usualfockindextotuple","text":"usualfockindextotuple\n\nIndicate that the filtered attributes are (:scope, :site, :orbital, :spin) when converting a Fock index to tuple.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.σʸ-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.σʸ","text":"σʸ(mode::String; centers::Union{NTuple{2, Int}, Nothing}=nothing) -> Couplings{ID{FCID, 2}, FockCoupling{Int, <:ID{FCID, 2}}}\n\nThe Pauli matrix σʸ, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.σˣ-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.σˣ","text":"σˣ(mode::String; centers::Union{NTuple{2, Int}, Nothing}=nothing) -> Couplings{ID{FCID, 2}, FockCoupling{Int, <:ID{FCID, 2}}}\n\nThe Pauli matrix σˣ, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.σᶻ-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.σᶻ","text":"σᶻ(mode::String; centers::Union{NTuple{2, Int}, Nothing}=nothing) -> Couplings{ID{FCID, 2}, FockCoupling{Int, <:ID{FCID, 2}}}\n\nThe Pauli matrix σᶻ, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.σ⁰-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.σ⁰","text":"σ⁰(mode::String; centers::Union{NTuple{2, Int}, Nothing}=nothing) -> Couplings{ID{FCID, 2}, FockCoupling{Int, <:ID{FCID, 2}}}\n\nThe Pauli matrix σ⁰, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.σ⁺-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.σ⁺","text":"σ⁺(mode::String; centers::Union{NTuple{2, Int}, Nothing}=nothing) -> Couplings{ID{FCID, 2}, FockCoupling{Int, <:ID{FCID, 2}}}\n\nThe Pauli matrix σ⁺, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.FockPackage.σ⁻-Tuple{String}","page":"Fock package","title":"QuantumLattices.Essentials.FockPackage.σ⁻","text":"σ⁻(mode::String; centers::Union{NTuple{2, Int}, Nothing}=nothing) -> Couplings{ID{FCID, 2}, FockCoupling{Int, <:ID{FCID, 2}}}\n\nThe Pauli matrix σ⁻, which can act on the space of spins(\"sp\"), orbitals(\"ob\"), sublattices(\"sl\") or particle-holes(\"ph\").\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.Terms.statistics-Tuple{BOperator}","page":"Fock package","title":"QuantumLattices.Essentials.Terms.statistics","text":"statistics(opt::BOperator)\nstatistics(::Type{<:BOperator})\n\nGet the statistics of BOperator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Essentials.Terms.statistics-Tuple{FOperator}","page":"Fock package","title":"QuantumLattices.Essentials.Terms.statistics","text":"statistics(opt::FOperator) -> Char\nstatistics(::Type{<:FOperator}) -> Char\n\nGet the statistics of FOperator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Interfaces.:⊗-Tuple{FockCoupling,FockCoupling}","page":"Fock package","title":"QuantumLattices.Interfaces.:⊗","text":"⊗(fc1::FockCoupling, fc2::FockCoupling) -> FockCoupling\n\nGet the direct product between two Fock couplings.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Interfaces.:⋅-Tuple{FockCoupling,FockCoupling}","page":"Fock package","title":"QuantumLattices.Interfaces.:⋅","text":"⋅(fc1::FockCoupling, fc2::FockCoupling) -> FockCoupling\n\nGet the dot product of two rank-2 Fock couplings.\n\nA rank-2 FockCoupling can be considered as a matrix acting on the sublattice, orbital, spin and nambu spaces. The dot product here is defined as the multiplication between such matrices.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Interfaces.expand-Union{Tuple{K}, Tuple{FockCoupling,PID,Fock}, Tuple{FockCoupling,PID,Fock,Union{Nothing, Val{K}}}} where K","page":"Fock package","title":"QuantumLattices.Interfaces.expand","text":"expand(fc::FockCoupling, pid::PID, fock::Fock, kind::Union{Val{K}, Nothing}=nothing) where K -> Union{FCExpand, Tuple{}}\nexpand(fc::FockCoupling, pids::NTuple{R, PID}, focks::NTuple{R, Fock}, kind::Union{Val{K}, Nothing}=nothing) where {R, K} -> Union{FCExpand, Tuple{}}\n\nExpand a Fock coupling with the given set of point ids and Fock degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Interfaces.permute","page":"Fock package","title":"QuantumLattices.Interfaces.permute","text":"permute(::Type{<:BOperator}, id1::OID{<:FIndex}, id2::OID{<:FIndex}, ::Any=nothing) -> Tuple{Vararg{BOperator}}\n\nPermute two bosonic oid and get the result.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/FockPackage/#QuantumLattices.Interfaces.permute-2","page":"Fock package","title":"QuantumLattices.Interfaces.permute","text":"permute(::Type{<:FOperator}, id1::OID{<:FIndex}, id2::OID{<:FIndex}, ::Any=nothing) -> Tuple{Vararg{FOperator}}\n\nPermute two fermionic oid and get the result.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/DegreesOfFreedom/","page":"Degrees of freedom","title":"Degrees of freedom","text":"CurrentModule = QuantumLattices.Essentials.DegreesOfFreedom","category":"page"},{"location":"man/Essentials/DegreesOfFreedom/#Degrees-of-freedom","page":"Degrees of freedom","title":"Degrees of freedom","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#IID-and-Internal","page":"Degrees of freedom","title":"IID and Internal","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#Index","page":"Degrees of freedom","title":"Index","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#IDFConfig","page":"Degrees of freedom","title":"IDFConfig","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#Table","page":"Degrees of freedom","title":"Table","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#OID-and-Operator","page":"Degrees of freedom","title":"OID and Operator","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#Operators","page":"Degrees of freedom","title":"Operators","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#LaTeX","page":"Degrees of freedom","title":"LaTeX","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#Boundary","page":"Degrees of freedom","title":"Boundary","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/#Manual","page":"Degrees of freedom","title":"Manual","text":"","category":"section"},{"location":"man/Essentials/DegreesOfFreedom/","page":"Degrees of freedom","title":"Degrees of freedom","text":"Modules = [DegreesOfFreedom]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.coordabsent","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.coordabsent","text":"coordabsent\n\nIndicate that the :icoord and :rcoord attributes in an oid should be nothing\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.coordpresent","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.coordpresent","text":"coordpresent\n\nIndicate that the :icoord and :rcoord attributes in an oid should not be nothing.\n\n\n\n\n\n","category":"constant"},{"location":"man/Essentials/DegreesOfFreedom/#Core.Type-Tuple{PID,IID}","page":"Degrees of freedom","title":"Core.Type","text":"(INDEX::Type{<:Index})(pid::PID, iid::IID) -> INDEX\n\nGet the corresponding index from a pid and an iid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Boundary","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Boundary","text":"Boundary{Names}(values::AbstractVector{Float}, vectors::AbstractVector{<:AbstractVector{Float}}) where Names\nBoundary()\n\nBoundary twist of operators.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Boundary-Tuple{Operator}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Boundary","text":"(bound::Boundary)(operator::Operator) -> Operator\n(bound::Boundary{()})(operator::Operator) -> Operator\n\nGet the boundary twisted operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.DirectIndexToTuple","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.DirectIndexToTuple","text":"DirectIndexToTuple\n\nDirect index to tuple.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.DirectIndexToTuple-Tuple{Index}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.DirectIndexToTuple","text":"(indextotuple::DirectIndexToTuple)(index::Index) -> Tuple\n\nConvert an index to tuple directly.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.FilteredAttributes","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.FilteredAttributes","text":"FilteredAttributes(::Type{I}) where {I<:Index}\n\nA method that converts an arbitary index to a tuple, by iterating over the selected attributes in a specific order.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.FilteredAttributes-Tuple{Index}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.FilteredAttributes","text":"(indextotuple::FilteredAttributes)(index::Index) -> Tuple\n\nConvert an index to tuple by the \"filtered attributes\" method.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.IDFConfig","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.IDFConfig","text":"IDFConfig{I}(map::Function, pids::Union{AbstractVector{<:PID}, Tuple{}}=()) where {I<:Internal}\n\nConfiguration of the internal degrees of freedom at a lattice.\n\nmap maps a PID to an Internal.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.IID","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.IID","text":"IID\n\nThe id of an internal degree of freedom.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Index","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Index","text":"Index{P, I}\n\nThe complete index of a degree of freedom, which consist of the spatial part and the internal part.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.IndexToTuple","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.IndexToTuple","text":"IndexToTuple\n\nThe rules for converting an index to a tuple.\n\nAs a function, every instance should accept only one positional argument, i.e. the index to be converted to a tuple.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Internal","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Internal","text":"Internal\n\nThe whole internal degrees of freedom at a single point.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.LaTeX","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.LaTeX","text":"LaTeX{SP, SB}(body) where {SP, SB}\n\nLaTeX string representation.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.OID","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.OID","text":"OID(index::Index, ::Nothing, ::Nothing, seq::Union{Nothing, Int})\nOID(index::Index, rcoord::SVector{N, Float}, icoord::SVector{N, Float}, seq::Union{Nothing, Int}) where N\nOID(index::Index, rcoord::Vector{Float}, icoord::Vector{Float}, seq::Union{Nothing, Int})\nOID(index::Index; rcoord::Union{Nothing, SVector, Vector{Float}}=nothing, icoord::Union{Nothing, SVector, Vector{Float}}=nothing, seq::Union{Nothing, Int}=nothing)\n\nOperator id.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Operator","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Operator","text":"Operator{V<:Number, I<:ID{OID}} <: Element{V, I}\n\nAbstract type for an operator.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Operators","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Operators","text":"Operators(opts::Operator...)\n\nA set of operators.\n\nType alias for Elements{<:ID{OID}, <:Operator}.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Table","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Table","text":"Table{I}(by::IndexToTuple) where {I<:Index}\n\nIndex-sequence table.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Table-2","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Table","text":"Table(indices::AbstractVector{<:Index}, by::IndexToTuple=directindextotuple) -> Table\n\nConvert an sequence of indices to the corresponding index-sequence table.\n\nThe input indices will be converted to tuples by the by function with the duplicates removed. The resulting unique tuples are sorted, which determines the sequence of the input indices. Note that two indices have the same sequence if their converted tupels are equal to each other.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.Table-3","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.Table","text":"Table(config::IDFConfig, by::IndexToTuple=directindextotuple) -> Table\n\nGet the index-sequence table of the whole internal Hilbert spaces at a lattice.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/DegreesOfFreedom/#Base.:==-Tuple{Boundary,Boundary}","page":"Degrees of freedom","title":"Base.:==","text":"==(bound1::Boundary, bound2::Boundary) -> Bool\n\nJudge whether two boundaries conditions are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.adjoint-Tuple{Dict{I,O} where O<:Operator where I<:(Tuple{Vararg{OID,N}} where N)}","page":"Degrees of freedom","title":"Base.adjoint","text":"adjoint(opts::Operators) -> Operators\n\nGet the adjoint of a set of operators.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.adjoint-Tuple{Index}","page":"Degrees of freedom","title":"Base.adjoint","text":"adjoint(index::Index) -> typeof(index)\n\nGet the adjoint of an index.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.adjoint-Tuple{OID}","page":"Degrees of freedom","title":"Base.adjoint","text":"adjoint(oid::OID) -> typeof(oid)\nadjoint(oid::ID{OID, N}) where N -> typeof(oid)\n\nGet the adjoint of an operator id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.adjoint-Tuple{Operator}","page":"Degrees of freedom","title":"Base.adjoint","text":"adjoint(opt::Operator) -> Operator\n\nGet the adjoint of an operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.angle-Tuple{Boundary,Operator}","page":"Degrees of freedom","title":"Base.angle","text":"angle(bound::Boundary, operator::Operator) -> Float\nangle(bound::Boundary{()}, operator::Operator) -> Int\n\nGet the boundary twist phase of an operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.angle-Tuple{Tuple{Vararg{OID,N}} where N,AbstractArray{var\"#s464\",1} where var\"#s464\"<:AbstractArray{Float64,1},AbstractArray{Float64,1}}","page":"Degrees of freedom","title":"Base.angle","text":"angle(id::ID{OID}, vectors::AbstractVector{<:AbstractVector{Float}}, values::AbstractVector{Float}) -> Float\n\nGet the total twist phase of an id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.filter-Tuple{Function,FilteredAttributes}","page":"Degrees of freedom","title":"Base.filter","text":"filter(f::Function, indextotuple::FilteredAttributes) -> FilteredAttributes\n\nFilter the attributes of a \"filtered attributes\" method.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.isequal-Tuple{Boundary,Boundary}","page":"Degrees of freedom","title":"Base.isequal","text":"isequal(bound1::Boundary, bound2::Boundary) -> Bool\n\nJudge whether two boundaries conditions are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.length-Tuple{FilteredAttributes}","page":"Degrees of freedom","title":"Base.length","text":"length(indextotuple::FilteredAttributes) -> Int\nlength(::Type{<:FilteredAttributes{N}}) where N -> Int\n\nGet the length of the filtered attributes.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.repr","page":"Degrees of freedom","title":"Base.repr","text":"repr(opt::Operator, l::Union{LaTeX, Nothing}=nothing) -> String\n\nGet the latex string representation of an operator.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/DegreesOfFreedom/#Base.repr-2","page":"Degrees of freedom","title":"Base.repr","text":"repr(opts::Operators, l::Union{LaTeX, Nothing}=nothing) -> String\n\nGet the latex string representation of a set of operators.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/DegreesOfFreedom/#Base.repr-Tuple{OID,LaTeX}","page":"Degrees of freedom","title":"Base.repr","text":"repr(oid::OID, l::LaTeX) -> String\n\nLaTeX string representation of an oid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.reverse-Tuple{Table}","page":"Degrees of freedom","title":"Base.reverse","text":"reverse(table::Table) -> Dict{Int, Set{<:Index}}\n\nConvert an index-sequence table to a sequence-indices table.\n\nSince different indices may correspond to the same sequence, the reverse is a one-to-many map.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.show-Tuple{IO,Internal}","page":"Degrees of freedom","title":"Base.show","text":"show(io::IO, i::Internal)\n\nShow an internal.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.show-Tuple{IO,MIME{Symbol(\"text/latex\")},Dict{I,O} where O<:Operator where I<:(Tuple{Vararg{OID,N}} where N)}","page":"Degrees of freedom","title":"Base.show","text":"show(io::IO, ::MIME\"text/latex\", opts::Operators)\n\nShow latex formed operators.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.show-Tuple{IO,OID}","page":"Degrees of freedom","title":"Base.show","text":"show(io::IO, oid::OID)\n\nShow an operator id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.show-Tuple{IO,Operator}","page":"Degrees of freedom","title":"Base.show","text":"show(io::IO, opt::Operator)\nshow(io::IO, ::MIME\"text/latex\", opt::Operator)\n\nShow an operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.summary-Tuple{IO,Dict{I,O} where O<:Operator where I<:(Tuple{Vararg{OID,N}} where N)}","page":"Degrees of freedom","title":"Base.summary","text":"summary(io::IO, opts::Operators)\n\nPrint a brief description of a set of operators to an io.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.union-Tuple{Vararg{Table,N} where N}","page":"Degrees of freedom","title":"Base.union","text":"union(tables::Table...) -> Table\n\nUnite several index-sequence tables.\n\nSee Table for more details.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#Base.union-Union{Tuple{I}, Tuple{P}, Tuple{Type{P},Type{I}}} where I<:IID where P<:PID","page":"Degrees of freedom","title":"Base.union","text":"union(::Type{P}, ::Type{I}) where {P<:PID, I<:IID}\n\nCombine a concrete PID type and a concrete IID type to a concrete Index type.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.directindextotuple","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.directindextotuple","text":"directindextotuple\n\nIndicate that the conversion from an index to a tuple is direct.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.iid-Tuple{Index}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.iid","text":"iid(index::Index) -> IID\n\nGet the internal part of an index.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.iidtype-Tuple{Index}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.iidtype","text":"iidtype(index::Index)\niidtype(::Type{<:Index{<:PID, I}}) where {I<:IID}\n\nGet the type of the internal part of an index.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.isHermitian-Tuple{Dict{I,O} where O<:Operator where I<:(Tuple{Vararg{OID,N}} where N)}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.isHermitian","text":"isHermitian(opts::Operators) -> Bool\n\nJudge whether a set of operators as a whole is Hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.isHermitian-Tuple{Operator}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.isHermitian","text":"isHermitian(opt::Operator) -> Bool\n\nJudge whether an operator is Hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.isHermitian-Union{Tuple{Tuple{Vararg{OID,N}}}, Tuple{N}} where N","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.isHermitian","text":"isHermitian(oid::ID{OID, N}) where N -> Bool\n\nJudge whether an operator id is Hermitian.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.latexformat-Tuple{Type{var\"#s468\"} where var\"#s468\"<:Operator}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.latexformat","text":"latexformat(T::Type{<:Operator}) -> LaTeX\nlatexformat(T::Type{<:Operator}, l::LaTeX) -> LaTeX\n\nGet/Set the latex format for a subtype of Operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.oidtype-Tuple{Type{var\"#s467\"} where var\"#s467\"<:IID,Type{var\"#s464\"} where var\"#s464\"<:AbstractBond,Type{Nothing},Val{true}}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.oidtype","text":"oidtype(I::Type{<:IID}, B::Type{<:AbstractBond}, ::Type{Nothing}, ::Val{true})\noidtype(I::Type{<:IID}, B::Type{<:AbstractBond}, ::Type{<:Table}, ::Val{true})\noidtype(I::Type{<:IID}, B::Type{<:AbstractBond}, ::Type{Nothing}, ::Val{false})\noidtype(I::Type{<:IID}, B::Type{<:AbstractBond}, ::Type{<:Table}, ::Val{false})\n\nGet the compatible oid type.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.otype","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.otype","text":"otype\n\nGet the compatible operator type from a term type, a bond type and a table type.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.pid-Tuple{Index}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.pid","text":"pid(index::Index) -> PID\n\nGet the spatial part of an index.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.script-Tuple{OID,LaTeX,Val{:B}}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.script","text":"script(oid::OID, l::LaTeX, ::Val{:B}) -> Any\nscript(oid::OID, l::LaTeX, ::Val{:SP}) -> Tuple\nscript(oid::OID, l::LaTeX, ::Val{:SB}) -> Tuple\n\nGet the body/superscript/subscript of the latex string representation of an oid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.script-Union{Tuple{attr}, Tuple{OID,Val{attr}}} where attr","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.script","text":"script(oid::OID, ::Val{attr}) where attr -> String\n\nGet the :rcoord/:icoord script of an oid.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.DegreesOfFreedom.twist-Tuple{Operator,AbstractArray{var\"#s468\",1} where var\"#s468\"<:AbstractArray{Float64,1},AbstractArray{Float64,1}}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.DegreesOfFreedom.twist","text":"twist(operator::Operator, vectors::AbstractVector{<:AbstractVector{Float}}, values::AbstractVector{Float}) -> Operator\n\nTwist an operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.Spatials.icoord-Tuple{Operator}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.Spatials.icoord","text":"icoord(opt::Operator) -> SVector\n\nGet the whole icoord of an operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.Spatials.pidtype-Tuple{Index}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.Spatials.pidtype","text":"pidtype(index::Index)\npidtype(::Type{<:Index{P}}) where {P<:PID}\n\nGet the type of the spatial part of an index.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Essentials.Spatials.rcoord-Tuple{Operator}","page":"Degrees of freedom","title":"QuantumLattices.Essentials.Spatials.rcoord","text":"rcoord(opt::Operator) -> SVector\n\nGet the whole rcoord of an operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Interfaces.reset!-Tuple{IDFConfig,Any}","page":"Degrees of freedom","title":"QuantumLattices.Interfaces.reset!","text":"reset!(config::IDFConfig, pids) -> IDFConfig\n\nReset the idfconfig with new pids.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Interfaces.reset!-Tuple{Table,AbstractArray{var\"#s467\",1} where var\"#s467\"<:Index}","page":"Degrees of freedom","title":"QuantumLattices.Interfaces.reset!","text":"reset!(table::Table, indices::AbstractVector{<:Index}) -> Table\nreset!(table::Table, config::IDFConfig) -> Table\n\nReset a table.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Interfaces.sequence","page":"Degrees of freedom","title":"QuantumLattices.Interfaces.sequence","text":"sequence(opt::Operator, table=nothing) -> NTuple{rank(opt), Int}\n\nGet the sequence of the oids of an operator according to a table.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/DegreesOfFreedom/#QuantumLattices.Interfaces.update!-Union{Tuple{Names}, Tuple{Boundary{Names,V} where V<:AbstractArray{Float64,1},Vararg{Any,N} where N}} where Names","page":"Degrees of freedom","title":"QuantumLattices.Interfaces.update!","text":"update!(bound::Boundary{Names}, args...; kwargs...) where Names -> Boundary\n\nUpdate the values of the boundary twisted phase.\n\n\n\n\n\n","category":"method"},{"location":"developer/CodeStyle/#Code-style-guide","page":"Code style guide","title":"Code style guide","text":"","category":"section"},{"location":"developer/CodeStyle/","page":"Code style guide","title":"Code style guide","text":"Basically, the code style is compatible with Julia.Base, which follows much of the rules that is also popular in other languages.","category":"page"},{"location":"developer/CodeStyle/#Whitespaces","page":"Code style guide","title":"Whitespaces","text":"","category":"section"},{"location":"developer/CodeStyle/","page":"Code style guide","title":"Code style guide","text":"Always surround these binary operators with a single space on either side: assignment (=), augmented assignment (+=, -= etc.), comparisons (==, <, >, !=, <>, <=, >=, in, not in, is, is not), Booleans (and, or, not)\nNo white spaces immediately inside parentheses, brackets or braces.\nYes: sum(1)\nNo:  sum( 1), sum(1 ), sum( 1 )","category":"page"},{"location":"developer/CodeStyle/#Naming-Conventions","page":"Code style guide","title":"Naming Conventions","text":"","category":"section"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"CurrentModule = QuantumLattices.Prerequisites.NamedVectors","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"push!(LOAD_PATH, \"../../../../src/\")\nusing QuantumLattices.Prerequisites.NamedVectors","category":"page"},{"location":"man/Prerequisites/NamedVectors/#Named-vectors","page":"Named vectors","title":"Named vectors","text":"","category":"section"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"A named vector is similar to a named tuple, which associate each of its values with a name. Although the names of a named vector cannot be changed, the values can be modified if needed. In contrast to the predefined NamedTuple in Julia, which employs the names as type parameters, we just implement a named vector as a composite struct equipped with the getindex and setindex! functions, with the fieldnames being its names. This simple implementation makes it possible to define your own concrete named vector with any of your preferred type names, and ensures that all instances of a certain concrete named vector share the same names. Therefore, if you are familiar with Python, you will find that our named vector is more qualified to be the counterpart of the namedtuple in Python than the default Julia implementation. Last but not least important, it is also worth noted that a named vector is not a vector, as is similar to that a named tuple is not a tuple in Julia. This results from our basic expectation that a named vector should be more like a tuple other than a vector so that not all operations valid to vectors are also valid to named vectors.","category":"page"},{"location":"man/Prerequisites/NamedVectors/#NamedVector","page":"Named vectors","title":"NamedVector","text":"","category":"section"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"NamedVector defines the abstract type for all concrete named vectors.","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"Main features include:","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"Values can be accessed or modified either by the . operator or by the [] operator.\nComparisons, such as ≡, ≢, ==, ≠, >, <, ≥, ≤ are supported. Therefore a vector of named vectors can be sorted by the default sort function.\nHash is supported by hash. Therefore, a named vector can be used as the key of a dict or set.\nIteration over its fieldnames is supported by keys, over its values is supported by values, over its field-value pairs is supported by pairs. A reverse iteration is also supported.","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"To subtype it, please note:","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"A concrete type can be either mutable or immutable as you need, which is different from tuples.\nThe fields of a concrete type can be of the same type or not. For the former, we denote the named vector as \"homogeneous\" while for the latter as \"inhomogeneous\". For homogeneous ones, we define a sub abstract type, HomoNamedVector for further optimization of the default methods. See HomoNamedVector below.\nIt is recommended to overload the Base.fieldnames function for concrete subtypes to ensure type stability and improve efficiency, which though is not a necessity. A template for such an overloading is\nBase.fieldnames(Type{<:YourNamedVector}) = (:fieldname1, :fieldname2, ...)\nFor all concrete subtypes, if inner constructors are defined, the one which has the same interface with the default one must be implemented. Otherwise, some functionalities will not work.\nArithmetic operations, such as +, -, *, /, %, ÷, etc. are not supported. However, the function map is implemented, which can help users do the overloadings of these operations.","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"We define a macro @namedvector as the type factory to decorate a \"raw\" struct to be a subtype of NamedVector. Here, \"raw\" means the struct to be decorated has no explicit supertype other than Any, neither inner constructors as well. For example,","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"# decorate an immutable \"raw\" struct\n@namedvector struct InHomoIMNV\n    scope::String\n    site::Int\nend\n\n# decorate a mutable \"raw\" struct\n@namedvector mutable struct InHomoMNV\n    scope::String\n    site::Int\nend","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"This macro encapsulate the overloading of Base.fieldnames, and you have no need to do this by hand any more.","category":"page"},{"location":"man/Prerequisites/NamedVectors/#HomoNamedVector","page":"Named vectors","title":"HomoNamedVector","text":"","category":"section"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"HomoNamedVector is the subtype of NamedVector that of all its fields share the same type. Compared to NamedVector, one more default method is implemented with HomoNamedVector, i.e. eltype, which returns the type of its fields. This function ensures the type stability of all the methods that involves an iteration of the field values of a named vector. Therefore, homogeneous named vector are usually more efficient than inhomogeneous ones. Use homogeneous ones as much as possible unless the code efficiency does not matter.","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"To subtype HomoNamedVector, all the suggestions mentioned in the previous subsection for NamedVector also applies. A recommended template for a subtype is","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"[mutable] struct YourNamedVector{T} <: HomoNamedVector{T}\n    filed1::T\n    filed2::T\n    ...\nend","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"We also provide a macro @homonamedvector to help the definition of concrete homogeneous named vector, where you only need specify the type name, field names, data type and optionally whether the subtype is mutable. For example,","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"# construct an immutable homogeneous named vector without type parameters\n@homonamedvector HomoNVWithoutParameter (:scope, :site) Int mutable=false\n\n# construct a mutable homogeneous named vector with type parameters\n@homonamedvector HomoNVWithParameter (:scope, :site) (<:Real) mutable=true","category":"page"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"This macro also integrates the Base.fieldnames function, thus its overloading by hand is on longer needed.","category":"page"},{"location":"man/Prerequisites/NamedVectors/#Manual","page":"Named vectors","title":"Manual","text":"","category":"section"},{"location":"man/Prerequisites/NamedVectors/","page":"Named vectors","title":"Named vectors","text":"Modules = [NamedVectors]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Prerequisites/NamedVectors/#QuantumLattices.Prerequisites.NamedVectors.HomoNamedVector","page":"Named vectors","title":"QuantumLattices.Prerequisites.NamedVectors.HomoNamedVector","text":"HomoNamedVector{T}\n\nAbstract type for all homogeneous named vectors.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/NamedVectors/#QuantumLattices.Prerequisites.NamedVectors.NamedVector","page":"Named vectors","title":"QuantumLattices.Prerequisites.NamedVectors.NamedVector","text":"NamedVector\n\nAbstract type for all named vectors.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/NamedVectors/#QuantumLattices.Prerequisites.NamedVectors.@homonamedvector","page":"Named vectors","title":"QuantumLattices.Prerequisites.NamedVectors.@homonamedvector","text":"@homonamedvector typename fieldnames dtype::Union{Expr, Symbol}=:nothing mutable::Union{Expr, Bool}=false\n\nConstruct a concrete homogeneous named vector with the type name being typename and the fieldnames specified by fieldnames, and optionally, the type parameters specified by dtype.mutable can be used as a keyword argument to determine whether the concrete type is mutable.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/NamedVectors/#QuantumLattices.Prerequisites.NamedVectors.@namedvector-Tuple{Expr}","page":"Named vectors","title":"QuantumLattices.Prerequisites.NamedVectors.@namedvector","text":"@namedvector structdef::Expr\n\nDecorate a \"raw\" struct to be a subtype of NamedVector. Here, \"raw\" means that the input struct has no explicit supertype and no inner constructors.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/NamedVectors/#Base.:<-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.:<","text":"<(nv1::NamedVector, nv2::NamedVector) -> Bool\n\nCompare two named vectors and judge whether the first is less than the second.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.:==-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.:==","text":"==(nv1::NamedVector, nv2::NamedVector) -> Bool\n\nOverloaded equivalent operator. Two named vector are equal to each other if and only if their keys as well as their values are equal to each other.\n\nnote: Note\nIt is not necessary for two named vectors to be of the same concrete type to be equal to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.convert-Tuple{Type{Tuple},QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.convert","text":"convert(::Type{Tuple}, nv::NamedVector) -> Tuple\nconvert(::Type{NV}, nv::Tuple) where {NV<:NamedVector} -> NV\n\nConvert a named vector to tuple and vice versa.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.eltype-Union{Tuple{Type{var\"#s21\"} where var\"#s21\"<:QuantumLattices.Prerequisites.NamedVectors.HomoNamedVector{T}}, Tuple{T}} where T","page":"Named vectors","title":"Base.eltype","text":"eltype(::Type{<:HomoNamedVector{T}}) where T\neltype(nv::HomoNamedVector)\n\nGet the type parameter of a concrete HomoNamedVector.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.getindex-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,Int64}","page":"Named vectors","title":"Base.getindex","text":"getindex(nv::NamedVector, index::Int)\n\nGet the value by the [] syntax.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.hash-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,UInt64}","page":"Named vectors","title":"Base.hash","text":"hash(nv::NamedVector, h::UInt)\n\nHash a concrete NamedVector.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.isequal-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.isequal","text":"isequal(nv1::NamedVector, nv2::NamedVector) -> Bool\n\nOverloaded equivalent operator. Two named vector are equal to each other if and only if their keys as well as their values are equal to each other.\n\nnote: Note\nIt is not necessary for two named vectors to be of the same concrete type to be equal to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.isless-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.isless","text":"isless(nv1::NamedVector, nv2::NamedVector) -> Bool\n\nCompare two named vectors and judge whether the first is less than the second.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.iterate","page":"Named vectors","title":"Base.iterate","text":"iterate(nv::NamedVector, state=1)\niterate(rv::Iterators.Reverse{<:NamedVector}, state=length(rv.itr))\n\nIterate or reversely iterate over the values of a concrete NamedVector.\n\n\n\n\n\n","category":"function"},{"location":"man/Prerequisites/NamedVectors/#Base.keys-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.keys","text":"keys(nv::NamedVector) -> NTuple{length(nv), Symbol}\n\nIterate over the names.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.length-Union{Tuple{Type{NV}}, Tuple{NV}} where NV<:QuantumLattices.Prerequisites.NamedVectors.NamedVector","page":"Named vectors","title":"Base.length","text":"length(::Type{NV}) where NV<:NamedVector -> Int\nlength(nv::NamedVector) -> Int\n\nGet the length of a concrete NamedVector.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.map-Union{Tuple{NV}, Tuple{Any,Vararg{NV,N} where N}} where NV<:QuantumLattices.Prerequisites.NamedVectors.NamedVector","page":"Named vectors","title":"Base.map","text":"map(f, nvs::NV...) where NV<:NamedVector -> NV\n\nApply function f elementwise on the input named vectors.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.pairs-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.pairs","text":"pairs(nv::NamedVector) -> Base.Generator\n\nIterate over the name-value pairs.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.replace-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.replace","text":"replace(nv::NamedVector; kwargs...) -> typeof(nv)\n\nReturn a copy of a concrete NamedVector with some of the field values replaced by the keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.setindex!-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector,Any,Int64}","page":"Named vectors","title":"Base.setindex!","text":"setindex!(nv::NamedVector, value, index::Int)\n\nSet the value by the [] syntax if mutable.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.show-Tuple{IO,QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.show","text":"show(io::IO, nv::NamedVector)\n\nShow a concrete NamedVector.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.values-Tuple{QuantumLattices.Prerequisites.NamedVectors.NamedVector}","page":"Named vectors","title":"Base.values","text":"values(nv::NamedVector) -> NTuple{length(nv)}\n\nIterate over the values.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/NamedVectors/#Base.zero-Union{Tuple{Type{NV}}, Tuple{NV}} where NV<:QuantumLattices.Prerequisites.NamedVectors.NamedVector","page":"Named vectors","title":"Base.zero","text":"zero(::Type{NV}) where NV<:NamedVector -> NV\nzero(nv::NamedVector) -> typeof(nv)\n\nGet a concrete NamedVector with all values being zero.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"CurrentModule = QuantumLattices.Prerequisites.CompositeStructures","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#Composite-structures","page":"Composite structures","title":"Composite structures","text":"","category":"section"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"In principle, Julia is not an object-oriented programming language. For example, only abstract types can be inherited so that subtype cannot inherit fields from their parents. Therefore, Julia prefers composition over inheritance. However, to make a new concrete type behaves much alike another one, tedious repetitions of redefining the generic interfaces are usually not avoidable, especially for the basic types in Julia base. In this module, we implement three such composited types, CompositeTuple, CompositeVector and CompositeDict, for the sake of future usages.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#CompositeTuple-and-CompositeNTuple","page":"Composite structures","title":"CompositeTuple and CompositeNTuple","text":"","category":"section"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"A composite tuple (ntuple) is a tuple (ntuple) that is implemented by including an ordinary Tuple (NTuple) as one of its attributes with the name :contents.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"To take full advantages of the Julia base, the following interfaces are defined:","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"inquiry of info: length, eltype, hash\ncomparison between objects: ==, isequal\nobtainment of old elements: getindex\niteration: iterate, keys, values, pairs\nconstruction of new objects: reverse","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"Composite tuples are suited for the situations where other attributes are not affected by the modification of the elements. Note that arithmetic operations and logical operations excluding == and isequal are not supported. Besides, a composite tuple is not a tuple since Julia has no abstract tuples.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#CompositeVector","page":"Composite structures","title":"CompositeVector","text":"","category":"section"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"A composite vector is a vector that is implemented by including an ordinary Vector as one of its attributes with the name :contents.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"To take full advantages of the Julia base, the following interfaces are redefined:","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"inquiry of info: size, length\ncomparison between objects: ==, isequal\nobtainment of old elements: getindex\nmodification of old elements: setindex!\naddition of new elements: push!, pushfirst!, insert!, append!, prepend!\nremoval of old elements: splice!, deleteat!, pop!, popfirst!, empty!\nconstruction of new objects: empty, reverse, similar\niteration: iterate, keys, values, pairs","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"Composite vectors are suited for the situations where other attributes are not affected by the modification of the elements. Note that arithmetic operations and logical operations excluding == and isequal are not supported.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#CompositeDict","page":"Composite structures","title":"CompositeDict","text":"","category":"section"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"A composite dict is a dict that is implemented by including an ordinary Dict as one of its attributes with the name :contents.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"To take full advantages of the Julia base, the following interfaces are redefined:","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"inquiry of info: isempty, length, haskey, in\ncomparison between objects: ==, isequal\nobtainment of old elements: get, getkey, getindex\nmodification and addition of elements: push!, get!, setindex!\nremoval of old elements: pop!, delete!, empty!\nconstruction of new objects: merge, empty\niteration: iterate, keys, values, pairs","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"As is similar to composite vectors, composite dicts are suited for the situations where other attributes are not affected by the modification of the elements.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#NamedContainer","page":"Composite structures","title":"NamedContainer","text":"","category":"section"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"NamedContainer is just a wrapper (type alias) of Julia NamedTuple, but not a composite type.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"Julia NamedTuple is useful to keep type stability of codes when we deal with inhomogeneous immutable dict-like objects, but its default constructor is not so convenient because the names and contents must be assigned pair by pair in a pair of parentheses explicitly. Therefore, we define a type alias of NamedTuple under the name of NamedContainer, so that we can construct a NamedTuple by the usual-formed constructor NamedContainer.","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#Manual","page":"Composite structures","title":"Manual","text":"","category":"section"},{"location":"man/Prerequisites/CompositeStructures/","page":"Composite structures","title":"Composite structures","text":"Modules = [CompositeStructures]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Prerequisites/CompositeStructures/#QuantumLattices.Prerequisites.CompositeStructures.CompositeDict","page":"Composite structures","title":"QuantumLattices.Prerequisites.CompositeStructures.CompositeDict","text":"CompositeDict{K, V}\n\nA composite dict is a dict that is implemented by including an ordinary Dict as one of its attributes with the name :contents.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/CompositeStructures/#QuantumLattices.Prerequisites.CompositeStructures.CompositeNTuple","page":"Composite structures","title":"QuantumLattices.Prerequisites.CompositeStructures.CompositeNTuple","text":"CompositeNTuple{N, T}\n\nA composite ntuple is a ntuple that is implemented by including an ordinary NTuple as one of its attributes with the name :contents.\n\nAlias for CompositeTuple{NTuple{N, T}}.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/CompositeStructures/#QuantumLattices.Prerequisites.CompositeStructures.CompositeTuple","page":"Composite structures","title":"QuantumLattices.Prerequisites.CompositeStructures.CompositeTuple","text":"CompositeTuple{T<:Tuple}\n\nA composite tuple is a tuple that is implemented by including an ordinary Tuple as one of its attributes with the name :contents.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/CompositeStructures/#QuantumLattices.Prerequisites.CompositeStructures.CompositeVector","page":"Composite structures","title":"QuantumLattices.Prerequisites.CompositeStructures.CompositeVector","text":"CompositeVector{T}\n\nA composite vector is a vector that is implemented by including an ordinary Vector as one of its attributes with the name :contents.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/CompositeStructures/#QuantumLattices.Prerequisites.CompositeStructures.NamedContainer","page":"Composite structures","title":"QuantumLattices.Prerequisites.CompositeStructures.NamedContainer","text":"NamedContainer{T, Names} = NamedTuple{Names, <:Tuple{Vararg{T}}}\n\nNamedContainer is just a wrapper of Julia NamedTuple, but not a composite type.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/CompositeStructures/#QuantumLattices.Prerequisites.CompositeStructures.NamedContainer-Union{Tuple{Tuple}, Tuple{Names}} where Names","page":"Composite structures","title":"QuantumLattices.Prerequisites.CompositeStructures.NamedContainer","text":"NamedContainer{Names}(contents) where Names -> NamedTuple{Names, typeof(contents)}\n\nConstruct a named container.\n\n\n\n\n\n","category":"method"},{"location":"man/Interfaces/","page":"Interfaces","title":"Interfaces","text":"CurrentModule = QuantumLattices.Interfaces","category":"page"},{"location":"man/Interfaces/#Interfaces","page":"Interfaces","title":"Interfaces","text":"","category":"section"},{"location":"man/Interfaces/","page":"Interfaces","title":"Interfaces","text":"This module contains the generic functions that are extended by the package.","category":"page"},{"location":"man/Interfaces/","page":"Interfaces","title":"Interfaces","text":"Due to the multi-dispatch feature of Julia, generic functions can be extended by local methods for different types. However, a local definition of a method also claims a new generic function if the generic function is not imported to the current scope, thus ruins the definitions in other modules. Therefore, it is quite necessary to predefine the common generic functions in a separate module, so that other modules can extend them with their own by a simple import.","category":"page"},{"location":"man/Interfaces/#Manual","page":"Interfaces","title":"Manual","text":"","category":"section"},{"location":"man/Interfaces/","page":"Interfaces","title":"Interfaces","text":"Modules = [Interfaces]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.:⊕","page":"Interfaces","title":"QuantumLattices.Interfaces.:⊕","text":"Direct sum.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.:⊗","page":"Interfaces","title":"QuantumLattices.Interfaces.:⊗","text":"Direct product.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.:⋅","page":"Interfaces","title":"QuantumLattices.Interfaces.:⋅","text":"Dot product.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.add!","page":"Interfaces","title":"QuantumLattices.Interfaces.add!","text":"Inplace addition.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.decompose","page":"Interfaces","title":"QuantumLattices.Interfaces.decompose","text":"Decompose.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.decompose!","page":"Interfaces","title":"QuantumLattices.Interfaces.decompose!","text":"In place decomposition.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.dimension","page":"Interfaces","title":"QuantumLattices.Interfaces.dimension","text":"Dimension.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.dims","page":"Interfaces","title":"QuantumLattices.Interfaces.dims","text":"Dimensions.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.div!","page":"Interfaces","title":"QuantumLattices.Interfaces.div!","text":"Inplace division.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.expand","page":"Interfaces","title":"QuantumLattices.Interfaces.expand","text":"Get the expansion.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.expand!","page":"Interfaces","title":"QuantumLattices.Interfaces.expand!","text":"In place expansion.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.id","page":"Interfaces","title":"QuantumLattices.Interfaces.id","text":"Id.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.index","page":"Interfaces","title":"QuantumLattices.Interfaces.index","text":"Index.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.inds","page":"Interfaces","title":"QuantumLattices.Interfaces.inds","text":"Indices.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.kind","page":"Interfaces","title":"QuantumLattices.Interfaces.kind","text":"Kind.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.matrix","page":"Interfaces","title":"QuantumLattices.Interfaces.matrix","text":"Matrix representation.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.mul!","page":"Interfaces","title":"QuantumLattices.Interfaces.mul!","text":"Inplace multiplication.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.permute","page":"Interfaces","title":"QuantumLattices.Interfaces.permute","text":"Get the permutation.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.prepare!","page":"Interfaces","title":"QuantumLattices.Interfaces.prepare!","text":"Inplace prepare.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.rank","page":"Interfaces","title":"QuantumLattices.Interfaces.rank","text":"Rank.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.register!","page":"Interfaces","title":"QuantumLattices.Interfaces.register!","text":"Inplace register.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.regularize","page":"Interfaces","title":"QuantumLattices.Interfaces.regularize","text":"Regularize.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.regularize!","page":"Interfaces","title":"QuantumLattices.Interfaces.regularize!","text":"In place regularization.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.reset!","page":"Interfaces","title":"QuantumLattices.Interfaces.reset!","text":"Inplace reset.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.run!","page":"Interfaces","title":"QuantumLattices.Interfaces.run!","text":"Inplace run.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.sequence","page":"Interfaces","title":"QuantumLattices.Interfaces.sequence","text":"Sequence.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.sub!","page":"Interfaces","title":"QuantumLattices.Interfaces.sub!","text":"Inplace subtraction.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.update!","page":"Interfaces","title":"QuantumLattices.Interfaces.update!","text":"Inplace Update.\n\n\n\n\n\n","category":"function"},{"location":"man/Interfaces/#QuantumLattices.Interfaces.vector","page":"Interfaces","title":"QuantumLattices.Interfaces.vector","text":"Vector representation.\n\n\n\n\n\n","category":"function"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"CurrentModule = QuantumLattices.Mathematics.Combinatorics","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"push!(LOAD_PATH, \"../../../../src/\")\nusing QuantumLattices.Mathematics.Combinatorics","category":"page"},{"location":"man/Mathematics/Combinatorics/#Combinatorics","page":"Combinatorics","title":"Combinatorics","text":"","category":"section"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"This module implements the combinations and permutations of an indexable object, with duplicate elements allowed or not. Compared to another Julia package Combinatorics, the iterators return tuples instead of vectors, which greatly decreases the memory allocation times and improves the code efficiency.","category":"page"},{"location":"man/Mathematics/Combinatorics/#AbstractCombinatorics","page":"Combinatorics","title":"AbstractCombinatorics","text":"","category":"section"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"AbstractCombinatorics{M, C} is the abstract type of all combinatoric algorithms. It has two type parameters:","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"M: the number of elements to be taken\nC: the type of the collection of candidate elements","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"To avoid memory allocation, the iteration of a concrete combinatoric algorithm returns a tuple, whose length is M and eltype is eltype(C).","category":"page"},{"location":"man/Mathematics/Combinatorics/#Combinations-and-DulCombinations","page":"Combinatorics","title":"Combinations and DulCombinations","text":"","category":"section"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"Combinations{M, C} and DulCombinations generate all the combinations of M elements from an indexable collection whose type is C, with the differences being that the former forbids duplicate elements in the combinations while the latter allows.","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"All combinations of 2 integers taken from 1 to 3 without duplicate:","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"Combinations{2}(1:3) |> collect","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"All combinations of 2 integers taken from 1 to 3 with duplicate allowed:","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"DulCombinations{2}(1:3) |> collect","category":"page"},{"location":"man/Mathematics/Combinatorics/#Permutations-and-DulPermutations","page":"Combinatorics","title":"Permutations and DulPermutations","text":"","category":"section"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"Permutations{M, C} and DulPermutations generate all the permutations of M elements from an indexable collection whose type is C, with the differences being that the former forbids duplicate elements in the permutations while the latter allows.","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"All permutations of 2 integers taken from 1 to 3 without duplicate:","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"Permutations{2}(1:3) |> collect","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"All permutations of 2 integers taken from 1 to 3 with duplicate allowed:","category":"page"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"DulPermutations{2}(1:3) |> collect","category":"page"},{"location":"man/Mathematics/Combinatorics/#Manual","page":"Combinatorics","title":"Manual","text":"","category":"section"},{"location":"man/Mathematics/Combinatorics/","page":"Combinatorics","title":"Combinatorics","text":"Modules = [Combinatorics]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Mathematics/Combinatorics/#QuantumLattices.Mathematics.Combinatorics.AbstractCombinatorics","page":"Combinatorics","title":"QuantumLattices.Mathematics.Combinatorics.AbstractCombinatorics","text":"AbstractCombinatorics{M, C}\n\nAbstract combinatoric algorithms.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/Combinatorics/#QuantumLattices.Mathematics.Combinatorics.Combinations","page":"Combinatorics","title":"QuantumLattices.Mathematics.Combinatorics.Combinations","text":"Combinations{M}(contents::C) where {M, C}\n\nCombinations of M elements from contents. Duplicates are not allowed.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/Combinatorics/#QuantumLattices.Mathematics.Combinatorics.DulCombinations","page":"Combinatorics","title":"QuantumLattices.Mathematics.Combinatorics.DulCombinations","text":"DulCombinations{M}(contents::C) where {M, C}\n\nCombinations of M elements from contents. Duplicates are allowed.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/Combinatorics/#QuantumLattices.Mathematics.Combinatorics.DulPermutations","page":"Combinatorics","title":"QuantumLattices.Mathematics.Combinatorics.DulPermutations","text":"DulPermutations{M}(contents::C) where {M, C}\n\nPermutations of M elements from contents. Duplicates are not allowed.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/Combinatorics/#QuantumLattices.Mathematics.Combinatorics.Permutations","page":"Combinatorics","title":"QuantumLattices.Mathematics.Combinatorics.Permutations","text":"Permutations{M}(contents::C) where {M, C}\n\nPermutations of M elements from contents. Duplicates are allowed.\n\n\n\n\n\n","category":"type"},{"location":"tutorials/UnitcellDescription/GeneratorOfOperators/","page":"Generator of operators","title":"Generator of operators","text":"CurrentModule = QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/GeneratorOfOperators/#Generator-of-operators","page":"Generator of operators","title":"Generator of operators","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"CurrentModule = QuantumLattices.Mathematics.VectorSpaces","category":"page"},{"location":"man/Mathematics/VectorSpaces/#Vector-spaces","page":"Vector spaces","title":"Vector spaces","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"A vector space is a linear space, in which the addition of vectors and multiplication of a vector by a scalar are defined.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"Vector spaces are frequently encountered in physics, e.g. the Hilbert space in quantum mechanics. In this submodule, we only implement those with finite dimensions. We want to remark that in our implementation, a vector space is a subtype of an abstract vector, therefore, the bases always possess a order, which means, two vector spaces are not considered to be equal to each other even if their corresponding actual mathematical spaces are the same but the orders of the bases are different.","category":"page"},{"location":"man/Mathematics/VectorSpaces/#VectorSpace","page":"Vector spaces","title":"VectorSpace","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"VectorSpace{B} is the abstraction of a vector space, which has only one type parameter:","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"B<:Any: the type of the bases of the vector space","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"Basically, a subtype should implement the following 3 methods:","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"dimension(vs::VectorSpace) -> Int\nGet the dimension of a vector space\nBase.getindex(vs::VectorSpace{B}, i::Int)  where B -> B\nGet the ith basis of a vector space\nBase.searchsortedfirst(vs::VectorSpace{B}, basis::B) where B -> Int\nSearch the index of a basis in a vector space","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"However, we provide several interfaces, including type traits and methods to deal with common situations:","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"A vector space whose bases are stored in a table under the attribute name :table can be ascribed to the HasTable trait and the TableSorted trait. Specifically, the first trait must be implemented as\nHasTable(::Type{SubType}) = HasTable(true)\nWhile, if the table is unsorted, the second trait should be implemented as\nTableSorted(::Type{SubType}) = TableSorted(false)\nand if the table is sorted, the second trait should be implemented as\nTableSorted(::Type{SubType}) = TableSorted(true)\nA vector space whose bases may be represented by a multiindex (Cartesian index) can be ascribed to the traits IsMultiIndexable and MultiIndexOrderStyle. Specifically, the first trait must be implemented as\nIsMultiIndexable(::Type{SubType}) = IsMultiIndexable(true)\nWhile, if the order style of the multiindex is C/C++ like, the second trait should be implemented as\nMultiIndexOrderStyle(::Type{SubType}) = MultiIndexOrderStyle('C')\nand if the order style is Fortran like, the second trait should be implemented as\nMultiIndexOrderStyle(::Type{SubType}) = MultiIndexOrderStyle('F')\nFurthermore, it should implement the following methods\nrank(::Type{SubType}) -> Int\nGet the rank of a multiindexable vector space.\ndims(vs::SubType) -> NTuple{vs|>typeof|>rank, Int}\nGet the dimensions along each axes of a multiindexable vector space.\ninds(basis, vs::SubType) ->  NTuple{vs|>typeof|>rank, Int}\nGet the Cartesian index representation of a basis in a multiindexable vector space.\neltype(SubType).name.wrapper(index::NTuple{N, Int}, vs::SubType)\nConstruct a basis from a tuple of integers and a multiindexable vector space.\nNote that a multiindexable vector space can also have a sorted or unsorted table. But then the trait MultiIndexOrderStyle takes no effects and the sequences of its bases will be completely determined by its attribute :table.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"If the type traits and methods are defined properly as stated above, the dimension, getindex and searchsortedfirst methods get default implementations. No need to worry about them any more.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"Other features include","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"comparison: == and isequal\niteration: iterate\ninquiry: size, findfirst and in","category":"page"},{"location":"man/Mathematics/VectorSpaces/#SimpleVectorSpace","page":"Vector spaces","title":"SimpleVectorSpace","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"SimpleVectorSpace{S, B, N} is the simplest vector space, whose bases are stored in the attribute :table::NTuple{N, B} as an ntuple.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"The :table attribute can be sorted or unsorted, which is determined by the type parameter S, with 'T' for sorted and 'F' for unsorted.","category":"page"},{"location":"man/Mathematics/VectorSpaces/#OrderedIndices","page":"Vector spaces","title":"OrderedIndices","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"OrderedIndices{N} defines the simplest abstract class of multiindexable vector spaces, whose bases are just tuples of integers.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"This class of vector spaces must have the following attribute: dims::NTuple{N, Int}: the dimensions of the Cartesian indices along all axes","category":"page"},{"location":"man/Mathematics/VectorSpaces/#SimpleIndices","page":"Vector spaces","title":"SimpleIndices","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"SimpleIndices{M, N} is the simple ordered Cartesian indices.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"It is worth noting that","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"It can be C/C++ ordered or Fortran ordered depending on the first type parameter M, with 'C' for the former and 'F' the latter.\nFor its bases (Cartesian indices), there is no restriction except that they should be in the proper range defined by its dims.","category":"page"},{"location":"man/Mathematics/VectorSpaces/#TabledIndices","page":"Vector spaces","title":"TabledIndices","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"TabledIndices{S, N} defines the tabled ordered Cartesian indices.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"Compared to SimpleIndices, the bases of this kind of vector spaces are stored in the attribute :table, which must be a vector of tuple of integers. The :table attribute can be sorted or unsorted, which is determined by the type parameter S, with 'T' for sorted and 'F' for unsorted. This type suits the situations when the Cartesian indices are restricted by extra conditions in addition to the one imposed by the attribute :dims.","category":"page"},{"location":"man/Mathematics/VectorSpaces/#NamedVectorSpace","page":"Vector spaces","title":"NamedVectorSpace","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"NamedVectorSpace{M, NS, BS, VS} defines a multiindexable vector space, each of whose indexable dimensions is associated with a name.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"It has four type parameters:","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"M: mode of the named vector space. It specifies how the indexable dimensions are combined to form the bases of the named vector space, and must take one of the following values:\n:zip: elements from each indexable dimensions are zipped together to form the bases,\n:product: elements from each indexable dimensions are direct producted together to form the bases.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"For the :zip mode, all the indexable dimensions should have the same number of elements, and the number of formed bases is equal to this number; for the :product mode, there are no restriction on the numbers of the indexable dimensions, and the number of the final bases is equal to their product.","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"NS::Tuple{Vararg{Symbol}}: the names of the indexable dimensions\nBS<:Tuple: the eltypes of the indexable dimensions\nVS<:Tuple{Vararg{AbstractVector}}: the contents of the indexable dimensions","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"The concrete types must have the following attribute:","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":":contents::VS: storage of the contents of the indexable dimensions","category":"page"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"By default, a named vector space uses C order for the indexable dimensions when the mode is :product. You can change it to F order for your own subtypes by defining the MultiIndexOrderStyle trait.","category":"page"},{"location":"man/Mathematics/VectorSpaces/#Manual","page":"Vector spaces","title":"Manual","text":"","category":"section"},{"location":"man/Mathematics/VectorSpaces/","page":"Vector spaces","title":"Vector spaces","text":"Modules = [VectorSpaces]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.HasTable","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.HasTable","text":"HasTable(B::Bool)\nHasTable(::Type{<:VectorSpace})\n\nTrait of whether a subtype of VectorSpace has the attribute :table.\n\nOnly two instances are allowed, the first of which is the default for a subtype:\n\nHasTable(false): indication of not having the attribute :table\nHasTable(true): indication of having the attribute :table\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.IsMultiIndexable","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.IsMultiIndexable","text":"IsMultiIndexable(B::Bool)\nIsMultiIndexable(::Type{<:VectorSpace})\n\nTrait of whether the bases of a subtype of VectorSpace can be represented by multiindices (Cartesian indices).\n\nOnly two instances are allowed, the first of which is the default for a subtype:\n\nIsMultiIndexable(false): indication of irrepresentability by Cartesian indices\nIsMultiIndexable(true): indication of representability by Cartesian indices\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.MultiIndexOrderStyle","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.MultiIndexOrderStyle","text":"MultiIndexOrderStyle(M::Char)\nMultiIndexOrderStyle(::Type{<:VectorSpace})\n\nTrait of the order style of the Cartesian-index representation of the bases of a subtype of VectorSpace.\n\nOnly two instances are allowed, the first of which is the default for a subtype:\n\nMultiIndexOrderStyle(C): indication of C/C++ order style\nMultiIndexOrderStyle(F): indication of Fortran order style\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.NamedVectorSpace","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.NamedVectorSpace","text":"NamedVectorSpace{M, NS, BS<:Tuple, VS<:Tuple{Vararg{AbstractVector}}} <: VectorSpace{NamedTuple{NS, BS}}\n\nAbstract named vector space.\n\nThis is a wrapper of multiindexable vector spaces, each of whose indexable dimensions is associated with a name.\n\nIt has four type parameters:\n\nM: mode of the named vector space. It specifies how the indexable dimensions are combined to form the bases of the named vector space, and must take one of the following values:\n:zip: elements from each indexable dimensions are zipped together to form the bases,\n:product: elements from each indexable dimensions are direct producted together to form the bases.\n\nFor the :zip mode, all the indexable dimensions should have the same number of elements, and the number of formed bases is equal to this number; for the :product mode, there are no restriction on the numbers of the indexable dimensions, and the number of the final bases is equal to their product.\n\nNS::Tuple{Vararg{Symbol}}: the names of the indexable dimensions\nBS<:Tuple: the eltypes of the indexable dimensions\nVS<:Tuple{Vararg{AbstractVector}}: the contents of the indexable dimensions\n\nThe concrete types must have the following attribute:\n\n:contents::VS: storage of the contents of the indexable dimensions\n\nBy default, a named vector space uses C order for the indexable dimensions when the mode is :product. You can change it to F order for your own subtypes by defining the MultiIndexOrderStyle trait.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.OrderedIndices","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.OrderedIndices","text":"OrderedIndices{N} <: VectorSpace{NTuple{N, Int}}\n\nThe simplest abstract class of multiindexable vector spaces, whose bases are just tuples of integers.\n\nThis class of vector spaces must have the following attribute: dims::NTuple{N, Int}: the dimesnions of the Cartesian indices along all axes\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.SimpleIndices","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.SimpleIndices","text":"SimpleIndices{M}(dims::NTuple{N, Int}) where {M, N}\n\nSimple ordered Cartesian indices.\n\nnote: Note\nIt can be C/C++ ordered or Fortran ordered depending on the first type parameter M, with 'C' for the former and 'F' the latter.\nFor its bases (Cartesian indices), there is no restriction except that they should be in the proper range defined by its dims.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.SimpleVectorSpace","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.SimpleVectorSpace","text":"SimpleVectorSpace{S}(table::NTuple{N, B}) where {S, B, N}\nSimpleVectorSpace{S}(table...) where S\n\nSimplest vector space, whose bases are stored in the attribute :table as an ntuple.\n\nThe :table attribute can be sorted or unsorted, which is determined by the type parameter S, with 'T' for sorted and 'F' for unsorted.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.TableSorted","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.TableSorted","text":"TableSorted(B::Bool)\nTableSorted(::Type{<:VectorSpace})\n\nTrait of whether the attribute :table of a subtype of VectorSpace is sorted.\n\nOnly two instances are allowed, the first of which is the default for a subtype:\n\nTableSorted(false): indication of unsorted attribute :table\nTableSorted(true): indication of sorted attribute :table\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.TabledIndices","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.TabledIndices","text":"TabledIndices{S}(dims::NTuple{N, Int}, table::Vector{NTuple{N, Int}}) where {S, N}\nTabledIndices{N}(::Type{M}, len::Int) where {N, M<:AbstractCombinatorics}\n\nTabled ordered Cartesian indices.\n\nCompared to SimpleIndices, the bases of this kind of vector spaces are stored in the attribute :table, which must be a vector of tuple of integers. The :table attribute can be sorted or unsorted, which is determined by the type parameter S, with 'T' for sorted and 'F' for unsorted. This type suits the situations when the Cartesian indices are restricted by extra conditions except that propoesed by the attribute :dims.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Mathematics.VectorSpaces.VectorSpace","page":"Vector spaces","title":"QuantumLattices.Mathematics.VectorSpaces.VectorSpace","text":"VectorSpace{B} <: AbstractVector{B}\n\nAbstract vector space.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/VectorSpaces/#Base.Sort.searchsortedfirst-Union{Tuple{B}, Tuple{QuantumLattices.Mathematics.VectorSpaces.VectorSpace{B},B}} where B","page":"Vector spaces","title":"Base.Sort.searchsortedfirst","text":"searchsortedfirst(vs::VectorSpace{B}, basis::B) where B -> Int\nsearchsortedfirst(vs, basis) -> Int\n\nSearch the index of a basis in a vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.eltype-Tuple{QuantumLattices.Mathematics.VectorSpaces.NamedVectorSpace,Int64}","page":"Vector spaces","title":"Base.eltype","text":"eltype(nvs::NamedVectorSpace, i::Int)\neltype(::Type{<:NamedVectorSpace{M, NS, BS} where {M, NS}}, i::Int) where BS\n\nGet the eltype of the ith indexable dimensions of a named vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.findfirst-Union{Tuple{B}, Tuple{B,QuantumLattices.Mathematics.VectorSpaces.VectorSpace{B}}} where B","page":"Vector spaces","title":"Base.findfirst","text":"findfirst(basis::B, vs::VectorSpace{B}) where B -> Int\nfindfirst(bases, vs::VectorSpace) -> NTuple{length(bases), Int}\n\nGet the index of a basis or the indices of a couple of bases in a vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.getindex-Tuple{QuantumLattices.Mathematics.VectorSpaces.VectorSpace,Int64}","page":"Vector spaces","title":"Base.getindex","text":"getindex(vs::VectorSpace, i::Int)\n\nGet the ith basis of a vector space by the [] operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.in-Union{Tuple{B}, Tuple{B,QuantumLattices.Mathematics.VectorSpaces.VectorSpace{B}}} where B","page":"Vector spaces","title":"Base.in","text":"in(basis::B, vs::VectorSpace{B}) where B -> Bool\n\nJudge whether a basis belongs to a vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.keys-Tuple{QuantumLattices.Mathematics.VectorSpaces.NamedVectorSpace}","page":"Vector spaces","title":"Base.keys","text":"keys(nvs::NamedVectorSpace) -> Tuple{Vararg{Symbol}}\nkeys(::Type{<:NamedVectorSpace{M, NS} where M}) where NS -> Tuple{Vararg{Symbol}}\n\nGet the names of a named vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.pairs-Tuple{QuantumLattices.Mathematics.VectorSpaces.NamedVectorSpace}","page":"Vector spaces","title":"Base.pairs","text":"pairs(nvs::NamedVectorSpace) -> Base.Iterators.Pairs\n\nGet the name-value pairs of a named vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#Base.values-Tuple{QuantumLattices.Mathematics.VectorSpaces.NamedVectorSpace}","page":"Vector spaces","title":"Base.values","text":"values(nvs::NamedVectorSpace) -> Tuple{Vararg{AbstractVector}}\n\nGet the contents of a named vector space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Interfaces.:⊕-Union{Tuple{B}, Tuple{B,B}} where B","page":"Vector spaces","title":"QuantumLattices.Interfaces.:⊕","text":"⊕(basis1::B, basis2::B) where B -> SimpleVectorSpace{'F', B, 2}\n⊕(basis::B, vs::SimpleVectorSpace{<:Any, B}) where B -> SimpleVectorSpace{'F', B}\n⊕(vs::SimpleVectorSpace{<:Any, B}, basis::B) where B -> SimpleVectorSpace{'F', B}\n⊕(vs1::SimpleVectorSpace{<:Any, B}, vs2::SimpleVectorSpace{<:Any, B}) where B -> SimpleVectorSpace{'F', B}\n\nGet the direct sum between bases or simple vector spaces.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/VectorSpaces/#QuantumLattices.Interfaces.dimension-Tuple{QuantumLattices.Mathematics.VectorSpaces.VectorSpace}","page":"Vector spaces","title":"QuantumLattices.Interfaces.dimension","text":"dimension(vs::VectorSpace) -> Int\n\nThe dimension of a vector space.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"CurrentModule = QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"A quantum lattice system can be completely described within its unitcell. Basically, this description should contain three types of information:","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"the spatial information, such as the coordinates of the points contained in the unitcell;\nthe internal degrees of freedom, such as the local Hilbert space on each point;\nthe couplings among different degrees of freedom, such as the interaction terms in the Hamiltonian.","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"In theory, as long as the above information is told, one could easily write down the operator representation of the Hamiltonian of the system. For example, in the phrase \"the single orbital electronic Hubbard model with only nearest neighbor hopping on a one dimensional lattice with only two sites\", \"one dimensional lattice with only two sites\" is the spatial information, \"single orbital electronic\" defines the local Hilbert spaces, and \"Hubbard model with only nearest neighbor hopping\" describes the terms present in the Hamiltonian. From this phrase, we also know that the Hamiltonian of the system is","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"H=tc^_1c_2+tc^_2c_1+tc^_1c_2+tc^_2c_1+Uc^_1c_1c^_1c_1+Uc^_2c_2c^_2c_2","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"where t is the hopping amplitude， U is the Hubbard interaction strength and the electronic annihilation/creation operator carries a site index and a spin index. Actually, the unitcell description framework follows exactly after the above train of thought. For example, the aforementioned system can be constructed by the following codes","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"using QuantumLattices\nusing SymPy: symbols\n\n# define the unitcell\nlattice = Lattice(\"L2P\", [Point(PID(1), (0.0,)), Point(PID(2), (1.0,))])\n\n# define the internal degrees of freedom\nconfig = IDFConfig{Fock}(pid->Fock(norbital=1, nspin=2, nnambu=2), lattice.pids)\n\n# define the terms\nt = Hopping{'F'}(:t, symbols(\"t\", real=true), 1)\nU = Hubbard{'F'}(:U, symbols(\"U\", real=true))\n\n# get the Hamiltonian\noperators = expand(Generator((t, U), Bonds(lattice), config, nothing, false))","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"The last line displays all the generated operators in the Hamiltonian in the latex form. Here, in the subscript of the electronic annihilation/creation operator, an extra orbital index is also displayed. In the following sections listed below, we will explain in brief how these codes work. Specifically, in Spatial info of a unitcell, we will introduce how to construct the unitcell as . For more detailed explanations, the manual of Essentials can also be referred.","category":"page"},{"location":"tutorials/UnitcellDescription/Introduction/","page":"Introduction","title":"Introduction","text":"Pages = [\n        \"SpatialInfoOfAUnitcell.md\",\n        \"InternalDegreesOfFreedom.md\",\n        \"CouplingsAmongDifferentDegreesOfFreedom.md\",\n        \"GeneratorOfOperators.md\",\n        ]\nDepth = 2","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"CurrentModule = QuantumLattices.Prerequisites.Factories","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"push!(LOAD_PATH, \"../../../../src/\")\nusing QuantumLattices.Prerequisites.Factories","category":"page"},{"location":"man/Prerequisites/Factories/#Factories","page":"Factories","title":"Factories","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The aim of Factories is to provide tools to hack into Julia codes without knowing the details of their abstract syntax trees and regularize the mechanism to \"escape\" variables in Expr expressions, so that users can manipulate the existing codes, modify them and generate new ones in macros. In particular, a factory in this module means the representation of certain blocks of Julia codes by a usual Julia struct. This representation is much easier to comprehend than the canonical Expr representation and makes it far more convenient to define macros. In general, we propose the following requirements that any factory must satisfy:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"DECOMPOSITION - An Expr expression can be decomposed into its corresponding factory by the factory's constructor.\nCOMPOSITION - A factory can compose its corresponding Expr expression by calling itself.\nESCAPE - A variable should be or not be escaped in the composed Expr expression by a factory depends on predefined escape mechanisms.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"These three requirements also define the basic interfaces to interact with factories. In practice, we combine the second and the third in a single interface, i.e. by passing an instance of certain concrete EscapeMechanism as the only argument of calling a factory, the needed Expr expression with variables correctly escaped can be obtained.","category":"page"},{"location":"man/Prerequisites/Factories/#Escape-mechanisms","page":"Factories","title":"Escape mechanisms","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"We adopt Julia structs to denote escape mechanisms so that we can utilize Julia's multi-dispatch to implement different mechanisms whereas keeping the same interface.","category":"page"},{"location":"man/Prerequisites/Factories/#EscapeMechanism","page":"Factories","title":"EscapeMechanism","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"EscapeMechanism is the abstract type for all concrete escape mechanisms.","category":"page"},{"location":"man/Prerequisites/Factories/#Escaped","page":"Factories","title":"Escaped","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Escaped has only one attribute:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"names::Tuple{Vararg{Symbol}}: the names of variables to be escaped","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Apparently, a variable should be escaped if its name is in the names of an Escaped. This mechanism suits a factory whose variables should be unescaped by default.","category":"page"},{"location":"man/Prerequisites/Factories/#UnEscaped","page":"Factories","title":"UnEscaped","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"UnEscaped also has only on attribute:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"names::Tuple{Vararg{Symbol}}: the names of variables not to be escaped","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Obviously, on the contrary to Escaped, a variable should be escaped if its name is not in the names of an UnEscaped. This mechanism suits a factory whose variables should be escaped by default.","category":"page"},{"location":"man/Prerequisites/Factories/#MixEscaped","page":"Factories","title":"MixEscaped","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"MixEscaped has two attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"escaped::Escaped: the escaped part of the mixed mechanism\nunescaped::UnEscaped: the UnEscaped part of the mixed mechanism","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"This mechanism suits complex factories that parts of it suit the \"escaped\" mechanism while others suit the \"unescaped\" mechanism.","category":"page"},{"location":"man/Prerequisites/Factories/#RawExpr","page":"Factories","title":"RawExpr","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"RawExpr has no attributes and it means \"raw expression without any variable escaped\". This mechanism is used for the print of all factories by default.","category":"page"},{"location":"man/Prerequisites/Factories/#Concrete-factories","page":"Factories","title":"Concrete factories","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Out of practical purposes, we implement 7 kinds of factories:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference: a type inference,\nArgument: a function argument,\nParameter: a method or type parameter,\nField: a struct field,\nBlock: a begin ... end block,\nFunctionFactory: a function itself,\nTypeFactory: a struct itself.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Some of the basic methods making the above three requirements fulfilled with these types are based on the powerful functions defined in MacroTools.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"We want to give a remark that although the types and functions provided in this module helps a lot for the definition of macros, macros should not be abused. On the one hand, some macros may change the language specifications, which makes it hard to understand the codes, and even splits the community; on the one hand, macros usually increases the precompiling/jit time, which means enormous uses of macros in a module may lead to an extremely long load time. Besides, due to the limited ability of the author, the codes in this module are not optimal, which adds to the jit overhead. Any promotion that keeps the interfaces unchanged is welcomed on GitHub issues.","category":"page"},{"location":"man/Prerequisites/Factories/#Inference","page":"Factories","title":"Inference","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"An Inference has 3 attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"head::Union{Symbol, Nothing}: the head of the type inference, which must be one of (nothing, :(<:), :curly)\nname::Union{Symbol, Nothing}: the name of the type inference\nparams::Union{Inference, Vector{Inference}, Nothing}: the parameters of the type inference","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"All valid expressions representing type inferences can be passed to the constructor.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A type variable represented by a Symbol:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:T)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A range of types represented by a UnionAll:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(<:Number))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A type with formal type parameters:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(Vector{T}))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A definite parametric type:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(Vector{Tuple{String, Int}}))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A type with type parameters being UnionAlls:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(Type{<:Number}))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"On the other hand, you can use the macro @inference to construct an Inference directly from a type inference:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@inference Vector{Tuple{String, Int}}","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"note: Note\nInference is a recursive struct, i.e. it recursively decomposes a type inference until the final type inference is just a Symbol.\nWhen the input expression is a Symbol, the head and params attributes of the resulting Inference is nothing. Otherwise, its head is the same with that of the input expression, and the args of the input expression will be further decomposed, whose result will be stored in params.\nWhen the head of the input expression is :(<:), the params is an Inference whereas when the head of the input expression is :curly, the params is a Vector{Inference}.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference uses the UnEscaped mechanism to escape variables, i.e. you have to specify the names that are not to be escaped.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Empty UnEscaped() escapes everything:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(Vector{T}))(UnEscaped())","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Unescape formal type parameters:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(Vector{T}))(UnEscaped(:T))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Unescape both type names and type parameters:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Inference(:(Vector{T}))(UnEscaped(:Vector, :T))","category":"page"},{"location":"man/Prerequisites/Factories/#Argument","page":"Factories","title":"Argument","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"An Argument has 4 attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"name::Union{Symbol, Nothing}: the name of the argument\ntype::Inference: the type inference of the argument\nslurp::Bool: whether the argument should be expanded by ...\ndefault::Any: the default value of the argument, nothing for those with no default values","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"All valid expressions representing the arguments of functions can be passed to the constructor.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A formal argument represented by a Symbol:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Argument(:arg)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A formal argument with its type specified:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Argument(:(arg::ArgType))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A slurped formal argument:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Argument(:(arg::ArgType...))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A formal argument with a default value","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Argument(:(arg::ArgType=default))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Or you can use the macro @argument for a direct construction from an argument declaration:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@argument arg::ArgType=default","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The construction from such expressions is based on the MacroTools.splitarg function.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Argument uses the MixEscaped mechanism to escape variables, with the UnEscaped mechanism for type and Escaped mechanism for default, e.g.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Argument(:(arg::Real=zero(Int)))(MixEscaped(UnEscaped(), Escaped(:zero, :Int)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"It can be seen that the name of an argument will never be escaped, which is obvious since the name of a function argument is always local. By the way, the composition of an Argument expression is based on the MacroTools.combinearg function.","category":"page"},{"location":"man/Prerequisites/Factories/#Parameter","page":"Factories","title":"Parameter","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A Parameter has 3 attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"head::Union{Symbol, Nothing}: the head of the parameter, must be either :(<:) or :(::) if not nothing\nname::Union{Symbol, Nothing}: the name of the parameter\ntype::Union{Inference, Nothing}: the type inference of the parameter","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"All expressions that represent type parameters or method parameters are allowed to be passed to the constructor.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A formal type/function parameter represented by a Symbol:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Parameter(:T)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A formal type/function parameter represented by a UnionAll with the name omitted:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Parameter(:(<:Number))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A formal type/function parameter represented by a UnionAll with the name specified:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Parameter(:(T<:Number))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The macro @parameter completes the construction directly from a parameter declaration:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@parameter T<:Number","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"note: Note\nWe use nothing to denote a missing name or type.\nTwo subtle situations of type/method parameters, e.g. MyType{T} and MyType{Int}, should be distinguished by Parameter(:T) and Parameter(:(::Int)).","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Parameter uses the UnEscaped mechanism to escape variables, too, e.g.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Parameter(:(N<:Vector{T}))(UnEscaped(:T))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"As is similar to Argument, the name of a method/type parameter will never be escaped because of its local scope.","category":"page"},{"location":"man/Prerequisites/Factories/#Field","page":"Factories","title":"Field","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A Field has 2 attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"name::Symbol: the name of the field\ntype::Inference: the type inference of the field","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Legal expressions can be used to construct a Field instance by its constructor.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A field name specified by a Symbol:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Field(:field)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A field with both the name and type specified:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Field(:(field::FieldType))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A field with the type being parametric:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Field(:(field::ParametricType{T}))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The macro @field is also provided to help the construction directly from a field declaration:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@field field::FieldType","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The construction from these expressions is based on the MacroTools.splitarg function.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Field uses the UnEscaped mechanism to escape variables as well, e.g.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Field(:(field::Dict{N, D}))(UnEscaped(:N, :D))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The name of a struct will never be escaped either because it is a local variable tightly binding to a struct. It is noted that the composition of field expressions is based on the MacroTools.combinefield function.","category":"page"},{"location":"man/Prerequisites/Factories/#Block","page":"Factories","title":"Block","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A Block has only one attribute:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"body::Vector{Any}: the body of the begin ... end block","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Any expression can be passed to the constructor of Block.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A single expression:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Block(:(x = 1))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A semicolon expression:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Block(:(x = 1; y = 2))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A begin ... end block:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Block(:(begin x = 1 end))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A quote block:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Block(quote\n        x = 1\n        y = 2\n    end)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Or you can construct a Block instance directly from any code by the macro @block:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@block x=1 y=2","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The body of a block can also be extended by the push! function or the @push! macro.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"note: Note\nThe body of a Block is somewhat \"flattened\", i.e. it contains no begin ... end blocks. During the initialization, any such input block will be unblocked and added to the body part by part. So is the push! and @push! procedures.\nAll LineNumberNodes generated by the input codes will also be included in the block's body. However, you can use rmlines! or @rmlines! to remove them from the body of an existing Block, or use rmlines or @rmlines to get a copy with them removed in the body.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Block uses the Escaped mechanism to escape variables. This is because variables in a block are often local ones and should not be escaped. Therefore, only those defined in other modules should be noted and escaped, which usually constitute the minority. For example,","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Block(:(x = 1; y = 2; z = Int[1, 2, 3]))(Escaped(:Int))","category":"page"},{"location":"man/Prerequisites/Factories/#FunctionFactory","page":"Factories","title":"FunctionFactory","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A FunctionFactory has 7 attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"name::Union{Symbol, Expr}: the name of the function\nparams::Vector{Inference}: the method parameters of the function\nargs::Vector{Argument}: the positional arguments of the function\nkwargs::Vector{Argument}: the keyword arguments of the function\nrtype::Inference: the return type of the function\nwhereparams::Vector{Parameter}: the method parameters specified by the where keyword\nbody::Block: the body of the function","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"All expressions that represent functions are allowed to be passed to the constructor.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A function with no arguments:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(f() = nothing))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A function with arguments:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(f(x) = x))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A function with arguments that have default values:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(f(x::Int, y::Int; choice::Function=sum) = choice(x, y)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A function with arguments whose type are specified by where keyword:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(f(x::T, y::T; choice::Function=sum) where {T<:Number} = choice(x, y)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A function with return type:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:((f(x::T, y::T; choice::Function=sum)::T) where {T<:Number} = choice(x, y)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A multiline function:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(\n    function (f(x::T, y::T; choice::Function=sum)::T) where T<:Number\n        choice(x, y)\n    end\n))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A function in a quote block:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(\n    quote\n        function (f(x::T, y::T; choice::Function=sum)::T) where T<:Number\n            choice(x, y)\n        end\n    end\n)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Similarly, an instance can also be constructed from the macro @functionfactory:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@functionfactory (f(x::T, y::T; choice::Function=sum)::T) where {T<:Number} = choice(x, y)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The construction from such expressions are based on the MacroTools.splitdef function.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"note: Note\nSince Julia 0.7, the form MyType{D}(data::D) where D only appears in struct constructors, therefore, the attribute :params of a function factory is nonempty only when this factory aims to represent a struct constructor.\nUsually, the name of a function factory is a Symbol. However, if the factory aims to extend some methods of a function defined in another module, e.g., Base.eltype, the name will be an Expr.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory adopts the MixEscaped mechanism to escape variables, with UnEscaped for params, args, kwargs, rtype and whereparams while Escaped for name and body. It is worth to emphasize that the name of a function factory belongs to the Escaped part. Therefore, when it is an Expr, it will never be escaped because an Expr cannot be a element of a Tuple{Vararg{Symbol}}. See following examples.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Escape the function name:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(\n    (f(x::T, y::T; choice::Function=sum)::T) where {T<:Number} = max(x, y, choice(x, y))\n    ))(MixEscaped(UnEscaped(:T), Escaped(:f, :max)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Do not escape the function name:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"FunctionFactory(:(\n    (f(x::T, y::T; choice::Function=sum)::T) where {T<:Number} = max(x, y, choice(x, y))\n    ))(MixEscaped(UnEscaped(:T), Escaped(:max)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The compositions of function expressions are based on the MacroTools.combinedef function.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Other features include:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Positional arguments can be added by addargs! or @addargs!\nKeyword arguments can be added by addkwargs! or @addkwargs!\nWhere parameters can be added by addwhereparams! or @addwhereparams!\nBody can be extended by extendbody! or @extendbody!","category":"page"},{"location":"man/Prerequisites/Factories/#TypeFactory","page":"Factories","title":"TypeFactory","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A TypeFactory has 6 attributes:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"name::Symbol: the name of the struct\nmutable::Bool: whether or not the struct is mutable\nparams::Vector{Parameter}: the type parameters of the struct\nsupertype::Inference: the supertype of the struct\nfields::Vector{Field}: the fields of the struct\nconstructors::Vector{FunctionFactory}: the inner constructors of the struct","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Any expression representing valid struct definitions can be passed to the constructor.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A struct with no fields:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"TypeFactory(:(struct StructName end))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A parametric struct with no fields:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"TypeFactory(:(struct StructName{T} end))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"An empty struct with a supertype:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"TypeFactory(:(struct Child{T} <: Parent{T} end))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A fielded struct with a supertype","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"TypeFactory(:(\n    struct Child{T<:Number} <: Parent{T}\n        field1::T\n        field2::T\n    end\n))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"A struct in a quote block:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"TypeFactory(\n    quote\n        struct Child{T<:Number} <: Parent{T}\n            field1::T\n            field2::T\n        end\n    end\n)","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Also, the macro @typefactory supports the construction directly from a type definition:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@typefactory struct Child{T<:Number} <: Parent{T}\n                field1::T\n                field2::T\n                Child(field1::T, field2::T=zero(T)) where {T} = new{T}(field1, field2)\n            end","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The construction from these expressions is based on the MacroTools.splitstructdef function.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"TypeFactory also uses the MixEscaped mechanism to escape variables, with the UnEscaped part for params, supertype and fields, the Escaped part for name, and both for constructors. For example,","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"@typefactory(struct Child{T<:Number} <: Parent{T}\n    field::T\n    Child(field::T) where {T} = new{T}(field)\nend)(MixEscaped(UnEscaped(:T), Escaped(:Child)))","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"The composition of a type expression is based on the MacroTools.combinestructdef function.","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Other features include:","category":"page"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Fields can be added by addfields! or @addfields!\nType parameters can be added by addparams! or @addparams!\nInner constructors can be added by addconstructors! or @addconstructors!","category":"page"},{"location":"man/Prerequisites/Factories/#Manual","page":"Factories","title":"Manual","text":"","category":"section"},{"location":"man/Prerequisites/Factories/","page":"Factories","title":"Factories","text":"Modules = [Factories]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.FExpr","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.FExpr","text":"Factory expression types, which is defined as Union{Symbol, Expr}.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.rawexpr","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.rawexpr","text":"rawexpr\n\nIndicate that no variable in a factory should be escaped.\n\n\n\n\n\n","category":"constant"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.AbstractFactory","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.AbstractFactory","text":"AbstractFactory\n\nAbstract type for all concrete factories.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Argument","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Argument","text":"Argument(name::Union{Symbol, Nothing}, type::Inference, slurp::Bool, default::Any)\nArgument(; name::Union{Symbol, Nothing}=nothing, type::Inference=Inference(:Any), slurp::Bool=false, default::Any=nothing)\nArgument(expr::FExpr)\n\nThe struct to describe a argument of a function.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Argument-Tuple{QuantumLattices.Prerequisites.Factories.RawExpr}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Argument","text":"(a::Argument)(em::RawExpr) -> Expr\n(a::Argument)(em::MixEscaped) -> Expr\n\nConvert an Argument to the Expr representation of the argument it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Block","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Block","text":"Block(parts::FExpr...)\n\nThe struct to describe a begin ... end block.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Block-Tuple{QuantumLattices.Prerequisites.Factories.MixEscaped}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Block","text":"(b::Block)(em::RawExpr) -> Expr\n(b::Block)(em::Escaped) -> Expr\n(b::Block)(em::MixEscaped) -> Expr\n\nConvert a Block to the Expr representation of the begin ... end block it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.EscapeMechanism","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.EscapeMechanism","text":"Abstract escape mechanism.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Escaped","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Escaped","text":"Escaped(names::Symbol...)\n\nIndicate that symbols of a factory should be escaped if they are in names.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Field","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Field","text":"Field(name::Symbol, type::Inference)\nField(; name::Symbol, type::FExpr=Inference(:Any))\nField(expr::FExpr)\n\nThe struct to describe a field of a struct.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Field-Tuple{Union{QuantumLattices.Prerequisites.Factories.RawExpr, var\"#s20\", var\"#s19\"} where var\"#s19\"<:QuantumLattices.Prerequisites.Factories.MixEscaped where var\"#s20\"<:QuantumLattices.Prerequisites.Factories.UnEscaped}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Field","text":"(f::Field)(em::RawExpr) -> Expr\n(f::Field)(em::UnEscaped) -> Expr\n(f::Field)(em::MixEscaped) -> Expr\n\nConvert a Field to the Expr representation of the field it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.FunctionFactory","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.FunctionFactory","text":"FunctionFactory(name::FExpr,\n                params::Vector{Inference},\n                args::Vector{Argument},\n                kwargs::Vector{Argument},\n                rtype::Inference,\n                whereparams::Vector{Parameter},\n                body::Block\n                )\nFunctionFactory(;   name::FExpr,\n                    params::Vector{Inference}=Inference[],\n                    args::Vector{Argument}=Argument[],\n                    kwargs::Vector{Argument}=Argument[],\n                    rtype::Inference=Inference(:Any),\n                    whereparams::Vector{Parameter}=Parameter[],\n                    body::Block=Block()\n                    )\nFunctionFactory(expr::Expr)\n\nThe struct to describe a function.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.FunctionFactory-Tuple{Union{QuantumLattices.Prerequisites.Factories.RawExpr, var\"#s21\"} where var\"#s21\"<:QuantumLattices.Prerequisites.Factories.MixEscaped}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.FunctionFactory","text":"(ff::FunctionFactory)(em::RawExpr) -> Expr\n(ff::FunctionFactory)(em::MixEscaped) -> Expr\n\nConvert a FunctionFactory to the Expr representation of the function it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Inference","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Inference","text":"Inference(head::Union{Symbol, Nothing}, name::Union{Symbol, Nothing}, params::Union{Inference, Vector{Inference}, Nothing})\nInference(;\n        head::Union{Symbol, Nothing}=nothing,\n        name::Union{Symbol, Nothing}=nothing,\n        params::Union{Inference, Vector{Inference}, Nothing}=nothing,\n        )\nInference(expr::FExpr)\n\nThe struct to describe a type inference.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Inference-Tuple{QuantumLattices.Prerequisites.Factories.MixEscaped}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Inference","text":"(i::Inference)(em::RawExpr) -> FExpr\n(i::Inference)(em::UnEscaped) -> FExpr\n(i::Inference)(em::MixEscaped) -> FExpr\n\nConvert a Inference to the Expr representation of the type inference it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.MixEscaped","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.MixEscaped","text":"MixEscaped(escaped::Escaped)\nMixEscaped(unescaped::UnEscaped)\nMixEscaped(escaped::Escaped, unescaped::UnEscaped)\nMixEscaped(unescaped::UnEscaped, escaped::Escaped)\n\nIndicate that some parts of a factory use the Escaped mechanism while other parts use the UnEscaped mechanism.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Parameter","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Parameter","text":"Parameter(head::Union{Symbol, Nothing}, name::Union{Symbol, Nothing}, type::Union{Inference, Nothing})\nParameter(; head::Union{Symbol, Nothing}=nothing, name::Union{Symbol, Nothing}=nothing, type::Union{Inference, Nothing}=nothing)\nParameter(expr::FExpr)\n\nThe struct to describe a parameter of a function or a type.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.Parameter-Tuple{Union{QuantumLattices.Prerequisites.Factories.RawExpr, var\"#s20\", var\"#s19\"} where var\"#s19\"<:QuantumLattices.Prerequisites.Factories.MixEscaped where var\"#s20\"<:QuantumLattices.Prerequisites.Factories.UnEscaped}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.Parameter","text":"(p::Parameter)(em::RawExpr) -> FExpr\n(p::Parameter)(em::UnEscaped) -> FExpr\n(p::Parameter)(em::MixEscaped) -> FExpr\n\nConvert a Parameter to the Expr representation of the parameter it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.RawExpr","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.RawExpr","text":"Raw expression without any variable escaped.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.TypeFactory","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.TypeFactory","text":"TypeFactory(name::Symbol, mutable::Bool, params::Vector{Parameter}, supertype::Inference, fields::Vector{Field}, constructors::Vector{FunctionFactory})\nTypeFactory(;   name::Symbol,\n                mutable::Bool=false,\n                params::Vector{Parameter}=Parameter[],\n                supertype::Inference=Inference(:Any),\n                fields::Vector{Field}=Field[],\n                constructors::Vector{FunctionFactory}=FunctionFactory[]\n                )\nTypeFactory(expr::Expr)\n\nThe struct to describe a struct.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.TypeFactory-Tuple{Union{QuantumLattices.Prerequisites.Factories.RawExpr, var\"#s21\"} where var\"#s21\"<:QuantumLattices.Prerequisites.Factories.MixEscaped}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.TypeFactory","text":"(tf::TypeFactory)(em::RawExpr) -> Expr\n(tf::TypeFactory)(em::MixEscaped) -> Expr\n\nConvert a TypeFactory to the Expr representation of the struct it describes.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.UnEscaped","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.UnEscaped","text":"UnEscaped(names::Symbol...)\n\nIIndicate that symbols of a factory should be escaped if they are not in names.\n\n\n\n\n\n","category":"type"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@addargs!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@addargs!","text":"@addargs! ff args::FExpr...\n\nAdd a couple of positional arguments to a function factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@addconstructors!-Tuple{Any,Vararg{Expr,N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@addconstructors!","text":"@addconstructors! tf constructors::Expr...\n\nAdd a couple of constructors to a type factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@addfields!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@addfields!","text":"@addfields! tf fields::FExpr...\n\nAdd a couple of fields to a type factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@addkwargs!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@addkwargs!","text":"@addkwargs! ff kwargs::FExpr...\n\nAdd a couple of keyword arguments to a function factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@addparams!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@addparams!","text":"@addparams! f params::FExpr...\n\nAdd a couple of method parameters to a function factory or a type factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@addwhereparams!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@addwhereparams!","text":"@addwhereparams! ff whereparams::FExpr...\n\nAdd a couple of method parameters to a function factory or a type factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@argument-Tuple{Union{Expr, Symbol}}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@argument","text":"@argument expr::FExpr\n\nConstruct an Argument directly from an argument statement.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@block-Tuple{Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@block","text":"@block parts::FExpr...\n\nConstruct a Block directly from a begin ... end block definition.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@extendbody!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@extendbody!","text":"@extendbody! ff parts::FExpr...\n\nExtend the body of a function factory.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@field-Tuple{Union{Expr, Symbol}}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@field","text":"@field expr::FExpr\n\nConstruct a Field directly from a field statement.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@functionfactory-Tuple{Expr}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@functionfactory","text":"@functionfactory expr::FExpr\n\nConstruct a FunctionFactory directly from a function definition.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@inference-Tuple{Union{Expr, Symbol}}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@inference","text":"@inference expr::FExpr\n\nConstruct an Inference directly from a type inference.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@parameter-Tuple{Union{Expr, Symbol}}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@parameter","text":"@parameter expr::FExpr\n\nConstruct a Parameter directly from an parameter statement.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@push!-Tuple{Any,Vararg{Union{Expr, Symbol},N} where N}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@push!","text":"@push! b parts::FExpr...\n\nPush other parts into the body of a block.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@rmlines!-Tuple{Expr}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@rmlines!","text":"@rmlines! b::Expr\n\nRemove line number nodes in the body of a block.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@rmlines-Tuple{Expr}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@rmlines","text":"@rmlines b::Expr\n\nReturn a copy of a block with the line number nodes removed.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.@typefactory-Tuple{Expr}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.@typefactory","text":"@typefactory expr::Expr\n\nConstruct a TypeFactory directly from a type definition.\n\n\n\n\n\n","category":"macro"},{"location":"man/Prerequisites/Factories/#Base.:==-Union{Tuple{F}, Tuple{F,F}} where F<:QuantumLattices.Prerequisites.Factories.AbstractFactory","page":"Factories","title":"Base.:==","text":"==(f1::F, f2::F) where F<:AbstractFactory -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#Base.isequal-Union{Tuple{F}, Tuple{F,F}} where F<:QuantumLattices.Prerequisites.Factories.AbstractFactory","page":"Factories","title":"Base.isequal","text":"isequal(f1::F, f2::F) where F<:AbstractFactory -> Bool\n\nOverloaded equivalent operator.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#Base.names-Tuple{Symbol}","page":"Factories","title":"Base.names","text":"names(expr::Symbol) -> Vector{Symbol}\nnames(expr::Expr) -> Vector{Symbol}\n\nGet all the symbols in an expression.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#Base.push!-Tuple{QuantumLattices.Prerequisites.Factories.Block}","page":"Factories","title":"Base.push!","text":"push!(b::Block, parts::FExpr...) -> Block\npush!(b::Block, parts::Block...) -> Block\n\nPush other parts into the body of a block.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#Base.replace-Tuple{QuantumLattices.Prerequisites.Factories.AbstractFactory}","page":"Factories","title":"Base.replace","text":"replace(f::AbstractFactory; kwargs...) -> typeof(f)\n\nReturn a copy of a concrete AbstractFactory with some of the field values replaced by the keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#Base.show-Tuple{IO,QuantumLattices.Prerequisites.Factories.AbstractFactory}","page":"Factories","title":"Base.show","text":"show(io::IO, f::AbstractFactory)\n\nShow a concrete AbstractFactory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#MacroTools.rmlines-Tuple{QuantumLattices.Prerequisites.Factories.Block}","page":"Factories","title":"MacroTools.rmlines","text":"rmlines(b::Block) -> Block\n\nReturn a copy of a block with the line number nodes removed.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.addargs!-Tuple{QuantumLattices.Prerequisites.Factories.FunctionFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.addargs!","text":"addargs!(ff::FunctionFactory, args::Argument...) -> FunctionFactory\naddargs!(ff::FunctionFactory, args::FExpr...) -> FunctionFactory\n\nAdd a couple of positional arguments to a function factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.addconstructors!-Tuple{QuantumLattices.Prerequisites.Factories.TypeFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.addconstructors!","text":"addconstructors!(tf::TypeFactory, constructors::FunctionFactory...) -> TypeFactory\naddconstructors!(tf::TypeFactory, constructors::Expr...) -> TypeFactory\n\nAdd a couple of constructors to a type factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.addfields!-Tuple{QuantumLattices.Prerequisites.Factories.TypeFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.addfields!","text":"addfields!(tf::TypeFactory, fields::Field...) -> TypeFactory\naddfields!(tf::TypeFactory, fields::FExpr...) -> TypeFactory\n\nAdd a couple of fields to a type factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.addkwargs!-Tuple{QuantumLattices.Prerequisites.Factories.FunctionFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.addkwargs!","text":"addkwargs!(ff::FunctionFactory, kwargs::Argument...) -> FunctionFactory\naddkwargs!(ff::FunctionFactory, kwargs::FExpr...) -> FunctionFactory\n\nAdd a couple of keyword arguments to a function factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.addparams!-Tuple{QuantumLattices.Prerequisites.Factories.FunctionFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.addparams!","text":"addparams!(f::FunctionFactory, params::Inference...) ->FunctionFactory\naddparams!(f::FunctionFactory, params::FExpr...) -> FunctionFactory\naddparams!(f::TypeFactory, params::Parameter...) -> TypeFactory\naddparams!(f::TypeFactory, params::FExpr...) -> TypeFactory\n\nAdd a couple of parameters to a function factory or a type factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.addwhereparams!-Tuple{QuantumLattices.Prerequisites.Factories.FunctionFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.addwhereparams!","text":"addwhereparams!(ff::FunctionFactory, whereparams::Parameter...) -> FunctionFactory\naddwhereparams!(ff::FunctionFactory, whereparams::FExpr...) -> FunctionFactory\n\nAdd a couple of method where parameters to a function factory or a type factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.escape-Tuple{Any,QuantumLattices.Prerequisites.Factories.RawExpr}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.escape","text":"escape(expr, ::RawExpr) -> Any\nescape(expr, ::Escaped) -> Any\nescape(expr, ::UnEscaped) -> Any\nescape(expr::Symbol, em::Escaped) -> FExpr\nescape(expr::Expr, em::Escaped) -> Expr\nescape(expr::Symbol, em::UnEscaped) -> FExpr\nescape(expr::Expr, em::UnEscaped) -> Expr\n\nEscape the variables in the input expression.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.extendbody!-Tuple{QuantumLattices.Prerequisites.Factories.FunctionFactory}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.extendbody!","text":"extendbody!(ff::FunctionFactory, parts::FExpr...) -> FunctionFactory\nextendbody!(ff::FunctionFactory, parts::Block...) -> FunctionFactory\n\nExtend the body of a function factory.\n\n\n\n\n\n","category":"method"},{"location":"man/Prerequisites/Factories/#QuantumLattices.Prerequisites.Factories.rmlines!-Tuple{QuantumLattices.Prerequisites.Factories.Block}","page":"Factories","title":"QuantumLattices.Prerequisites.Factories.rmlines!","text":"rmlines!(b::Block) -> Block\n\nRemove line number nodes in the body of a block.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/UnitcellDescription/CouplingsAmongDifferentDegreesOfFreedom/","page":"Couplings among different degrees of freedom","title":"Couplings among different degrees of freedom","text":"CurrentModule = QuantumLattices","category":"page"},{"location":"tutorials/UnitcellDescription/CouplingsAmongDifferentDegreesOfFreedom/#Couplings-among-different-degrees-of-freedom","page":"Couplings among different degrees of freedom","title":"Couplings among different degrees of freedom","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/CouplingsAmongDifferentDegreesOfFreedom/#Coupling-and-Couplings","page":"Couplings among different degrees of freedom","title":"Coupling and Couplings","text":"","category":"section"},{"location":"tutorials/UnitcellDescription/CouplingsAmongDifferentDegreesOfFreedom/#Term","page":"Couplings among different degrees of freedom","title":"Term","text":"","category":"section"},{"location":"tutorials/EngineAppInterface/Introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"tutorials/EngineAppInterface/Introduction/","page":"Introduction","title":"Introduction","text":"Although we can get the symbolic representation of the Hamiltonians by our unitcell-description framework, there still remains a long way to implement concrete algorithms such as TBA, ED, etc. Despite the quite different technical details, algorithms shares common functionalities to be furnished with:","category":"page"},{"location":"tutorials/EngineAppInterface/Introduction/","page":"Introduction","title":"Introduction","text":"provide tasks to be conducted with controlling parameters;\nrecord the results of some tasks for later use or analysis;\nupdate some parameters of the QuantumLattices to reconduct tasks;\nkeep logs during code executions for debug;\ncache intermediate data to improve efficiency;\n...","category":"page"},{"location":"tutorials/EngineAppInterface/Introduction/","page":"Introduction","title":"Introduction","text":"We thus provide a set of generic interfaces to resolve these problems, basically in the so called Engine-App mode. Specifically, algorithms are treated as Engine and tasks as App. Engine deals with the cores of algorithms along with file management, parameter updating and data caching, while App decides the concrete tasks to be conducted and provides hyper controlling parameters.","category":"page"},{"location":"man/Essentials/Frameworks/","page":"Frameworks","title":"Frameworks","text":"CurrentModule = QuantumLattices.Essentials.Frameworks","category":"page"},{"location":"man/Essentials/Frameworks/","page":"Frameworks","title":"Frameworks","text":"push!(LOAD_PATH, \"../../../../src/\")\nusing QuantumLattices","category":"page"},{"location":"man/Essentials/Frameworks/#Frameworks","page":"Frameworks","title":"Frameworks","text":"","category":"section"},{"location":"man/Essentials/Frameworks/#App-and-Engine","page":"Frameworks","title":"App and Engine","text":"","category":"section"},{"location":"man/Essentials/Frameworks/#Assignment","page":"Frameworks","title":"Assignment","text":"","category":"section"},{"location":"man/Essentials/Frameworks/#Algorithm","page":"Frameworks","title":"Algorithm","text":"","category":"section"},{"location":"man/Essentials/Frameworks/#Manual","page":"Frameworks","title":"Manual","text":"","category":"section"},{"location":"man/Essentials/Frameworks/","page":"Frameworks","title":"Frameworks","text":"Modules = [Frameworks]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Essentials.Frameworks.Algorithm","page":"Frameworks","title":"QuantumLattices.Essentials.Frameworks.Algorithm","text":"Algorithm(  name::String, engine::Engine;\n            din::String=\".\",\n            dout::String=\".\",\n            parameters::Union{Parameters, Nothing}=nothing,\n            map::Function=identity,\n            assignments::Tuple{Vararg{Assignment}}=(),\n            kwargs...\n            )\n\nAn algorithm associated with an engine.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Essentials.Frameworks.App","page":"Frameworks","title":"QuantumLattices.Essentials.Frameworks.App","text":"App\n\nAbstract type for all apps.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Essentials.Frameworks.Assignment","page":"Frameworks","title":"QuantumLattices.Essentials.Frameworks.Assignment","text":"Assignment( id::Symbol, app::App, parameters::Parameters;\n            map::Function=identity,\n            dependences::Tuple{Vararg{Symbol}}=(),\n            data::Any=nothing,\n            savedata::Bool=true,\n            virgin::Bool=true,\n            kwargs...\n            )\n\nAn assignment associated with an app.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Essentials.Frameworks.Engine","page":"Frameworks","title":"QuantumLattices.Essentials.Frameworks.Engine","text":"Engine\n\nAbstract type for all engines.\n\n\n\n\n\n","category":"type"},{"location":"man/Essentials/Frameworks/#Base.:==-Tuple{App,App}","page":"Frameworks","title":"Base.:==","text":"==(app1::App, app2::App) -> Bool\n\nJudge whether two apps are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.:==-Tuple{Assignment,Assignment}","page":"Frameworks","title":"Base.:==","text":"==(assign1::Assignment, assign2::Assignment) -> Bool\n\nJudge whether two assignments are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.:==-Tuple{Engine,Engine}","page":"Frameworks","title":"Base.:==","text":"==(engine1::Engine, engine2::Engine) -> Bool\n\nJudge whether two engines are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.get-Tuple{Algorithm,Symbol}","page":"Frameworks","title":"Base.get","text":"get(alg::Algorithm, id::Symbol) -> Assignment\nget(alg::Algorithm, ::Val{id}) where id -> Assignment\n\nFind the assignment registered on a algorithm by its id.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.isequal-Tuple{App,App}","page":"Frameworks","title":"Base.isequal","text":"isequal(app1::App, app2::App) -> Bool\n\nJudge whether two apps are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.isequal-Tuple{Assignment,Assignment}","page":"Frameworks","title":"Base.isequal","text":"isequal(assign1::Assignment, assign2::Assignment) -> Bool\n\nJudge whether two assignments are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.isequal-Tuple{Engine,Engine}","page":"Frameworks","title":"Base.isequal","text":"isequal(engine1::Engine, engine2::Engine) -> Bool\n\nJudge whether two engines are equivalent to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.repr","page":"Frameworks","title":"Base.repr","text":"repr(alg::Algorithm, mask::Tuple{Vararg{Symbol}}=(); ndecimal::Int=10) -> String\n\nGet the repr representation of an algorithm.\n\nOptionally, some parameters of the algorithm can be masked. Besides, the maximum number of decimals of the parameters can also be specified.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Frameworks/#Base.show-Tuple{IO,Algorithm}","page":"Frameworks","title":"Base.show","text":"show(io::IO, alg::Algorithm)\n\nShow an algorithm.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.summary-Tuple{Algorithm}","page":"Frameworks","title":"Base.summary","text":"summary(alg::Algorithm)\n\nProvide a summary of an algorithm.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#Base.valtype-Tuple{Assignment}","page":"Frameworks","title":"Base.valtype","text":"valtype(assign::Assignment)\nvaltype(::Type{<:Assignment{<:App, <:Parameters, <:Function, <:Tuple{Vararg{Symbol}}, R}}) where R\n\nThe type of the data(result) of an assignment.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Essentials.Frameworks.dependences","page":"Frameworks","title":"QuantumLattices.Essentials.Frameworks.dependences","text":"dependences(alg::Algorithm, assign::Assignment, ::Tuple{}=()) -> Tuple{Vararg{Symbol}}\ndependences(alg::Algorithm, assign::Assignment, mask::Tuple{Vararg{Symbol}}) -> Tuple{Vararg{Symbol}}\n\nGet the dependences of an assignment and return their ids.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Essentials.Frameworks.rundependences!","page":"Frameworks","title":"QuantumLattices.Essentials.Frameworks.rundependences!","text":"rundependences!(alg::Algorithm, assign::Assignment, mask::Tuple{Vararg{Symbol}}=()) -> Algorithm\n\nRun the dependences of an assignment. Optionally, some dependences can be jumped by specifying the mask argument.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.add!-Tuple{Algorithm,Symbol,App}","page":"Frameworks","title":"QuantumLattices.Interfaces.add!","text":"add!(alg::Algorithm, id::Symbol, app::App; kwargs...) -> Algorithm\n\nAdd an assignment on a algorithm by providing the contents of the assignment.\n\nThe difference between add! and register! is that the add! function does not run the newly added assignment but the register! function does.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.id-Tuple{Assignment}","page":"Frameworks","title":"QuantumLattices.Interfaces.id","text":"id(assign::Assignment) -> Symbol\nid(::Type{<:Assignment{<:App, <:Parameters, <:Function, <:Tuple{Vararg{Symbol}}, <:Any, I}}) where I -> Symbol\n\nThe id of an assignment.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.prepare!-Tuple{Algorithm,Assignment}","page":"Frameworks","title":"QuantumLattices.Interfaces.prepare!","text":"prepare!(alg::Algorithm, assign::Assignment) -> Nothing\n\nPrepare an assignment registered on a algorithm.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.register!-Tuple{Algorithm,Symbol,App}","page":"Frameworks","title":"QuantumLattices.Interfaces.register!","text":"register!(alg::Algorithm, id::Symbol, app::App; kwargs...) -> Algorithm\n\nAdd an assignment on a algorithm by providing the contents of the assignment, and run this assignment.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.run!","page":"Frameworks","title":"QuantumLattices.Interfaces.run!","text":"run!(alg::Algorithm, id::Symbol, timing::Bool=true) -> Algorithm\nrun!(alg::Algorithm, ::Val{id}, timing::Bool=true) where id -> Algorithm\n\nRun an assignment with the given id registered on an algorithm. Optionally, the run process can be timed by setting the timing argument to be true.\n\n\n\n\n\n","category":"function"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.run!-Tuple{Algorithm,Assignment}","page":"Frameworks","title":"QuantumLattices.Interfaces.run!","text":"run!(alg::Algorithm, assign::Assignment) -> Nothing\n\nRun an assignment registered on a algorithm.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.update!-Tuple{Algorithm}","page":"Frameworks","title":"QuantumLattices.Interfaces.update!","text":"update!(alg::Algorithm; kwargs...) -> Algorithm\n\nUpdate the parameters of an algorithm and its associated engine.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.update!-Tuple{App}","page":"Frameworks","title":"QuantumLattices.Interfaces.update!","text":"update!(app::App; kwargs...) -> App\n\nUpdate the status of an app.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.update!-Tuple{Assignment}","page":"Frameworks","title":"QuantumLattices.Interfaces.update!","text":"update!(assign::Assignment; kwargs...) -> Assignment\n\nUpdate the parameters of an assignment and the status of its associated app.\n\n\n\n\n\n","category":"method"},{"location":"man/Essentials/Frameworks/#QuantumLattices.Interfaces.update!-Tuple{Engine}","page":"Frameworks","title":"QuantumLattices.Interfaces.update!","text":"update!(engine::Engine; kwargs...) -> Engine\n\nUpdate the status of an engine.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule=QuantumLattices","category":"page"},{"location":"#QuantumLattices","page":"Home","title":"QuantumLattices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia package for the construction of quantum lattice systems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to QuantumLattices. Here we provide a general framework to construct the second quantized operator formed Hamiltonian of any quantum lattice system, with the inputs as simple as its description by natural languages. Combined with SymPy, this operator formed Hamiltonian supports complete symbolic computations, making it a convenient prerequisite of quantum many-body algorithms, such as TBA(tight-bind approximation), SCMF(self-consistent mean field theory), ED(exact diagonalization), CPT/VCA(cluster perturbation theory and variational cluster approach ), DMRG(density matrix renormalization group), etc. Generic interfaces are defined to give a unified access to these algorithms although their real implementations come in separate packages. Only minor modifications need be made when users alter from one algorithm to another.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The core of the package is the construction of the operator representations of lattice Hamiltonians. This is based on the following mathematical observations that the operators in a lattice Hamiltonian:","category":"page"},{"location":"","page":"Home","title":"Home","text":"act on local Hilbert spaces, and\nform algebras over the complex field.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first observation is the starting point of our unitcell description framework and the second is the mathematical foundation of our symbolic computing system.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is noted that our implementation of the symbolic computation only involves","category":"page"},{"location":"","page":"Home","title":"Home","text":"the mathematical operations between a scalar and an operator, and\nthe mathematical operations between two operators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The symbolic operations between two scalars are not implemented because:","category":"page"},{"location":"","page":"Home","title":"Home","text":"in condensed matter physics, for many cases, only the numerical values of operators are important because the analytical expressions can be too complicated to analyze or they may even not exist;\nour construction process of the operators and their mathematical operations are completely compatible with the SymPy package, therefore, a fully symbolic computation can be achieved by a simple combination of both.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Another major aim of this package is to provide unified interfaces to access all quantum-many algorithms. Much of the job can be done by the construction of the operator-formed Hamiltonians, which serves as a common input for different algorithms. The remaining stuff concerns mainly with project management, such as result recording, data caching, parameter updating, code logging, dependency managing, etc. Utilities are provided to handle these tasks.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unitcell Description Framework: by telling the information of the quantum lattice system within a unitcell, the construction of the symbolic representation of the Hamiltonian is just as simple as describing the system in a usual research paper.\nComplete symbolic computation: with only this package, symbolic computation between operators is realized whereas the coefficient of any operator remains numeric; by integrating it with SymPy, complete symbolic computation can be achieved and no modifications need be made on the methods in this package.\nGeneric Engine-App Interfaces: by regarding the relation between algorithms and tasks as that between engines and apps, automatic project management is realized, including that of result recording, data caching, parameter updating, code logging, dependency managing, etc., moreover, all algorithms are initialized in quite similar ways with only minor modifications needed.","category":"page"},{"location":"#Supported-Systems","page":"Home","title":"Supported Systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Three common kinds of systems in condensed matter physics are perfectly supported:","category":"page"},{"location":"","page":"Home","title":"Home","text":"canonical fermionic systems\ncanonical/hard-core bosonic systems\nSU(2) spin systems","category":"page"},{"location":"","page":"Home","title":"Home","text":"Furthermore, other systems can be supported easily by extending the generic \"protocols\" provided in this package.","category":"page"},{"location":"#Supported-Algorithms","page":"Home","title":"Supported Algorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Concrete algorithms are implemented in separate packages (still in progress):","category":"page"},{"location":"","page":"Home","title":"Home","text":"TBA: tight-binding approximation for fermionic/bosonic systems;\nSCMF: self-consistent mean field theory for fermionic systems;\nED: exact diagonalization for fermionic/hard-core-bosonic/spin systems;\nCPT/VCA: cluster perturbation theory and variational cluster approach for fermionic systems;\nDMRG: density matrix renormalization group for fermionic/hard-core-bosonic/spin systems;\nLSWT: linear spin wave theory for local spin systems;\nFBFMSW: spin wave theory for flatband ferromagnets.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tutorials: unitcell description","category":"page"},{"location":"#Python-counterpart","page":"Home","title":"Python counterpart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HamiltonianPy: in fact, the authors of this Julia package worked on the python package at first and only turned to Julia later.","category":"page"},{"location":"man/Mathematics/Introduction/","page":"Introduction","title":"Introduction","text":"CurrentModule = QuantumLattices.Mathematics","category":"page"},{"location":"man/Mathematics/Introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"man/Mathematics/Introduction/","page":"Introduction","title":"Introduction","text":"This module contains the mathematical prerequisites of the package.","category":"page"},{"location":"man/Mathematics/Introduction/","page":"Introduction","title":"Introduction","text":"Pages = [\n        \"Combinatorics.md\",\n        \"VectorSpaces.md\",\n        \"AlgebraOverFields.md\",\n        \"QuantumNumbers.md\",\n        ]\nDepth = 2","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"CurrentModule = QuantumLattices.Mathematics.QuantumNumbers","category":"page"},{"location":"man/Mathematics/QuantumNumbers/#Quantum-numbers","page":"Quantum numbers","title":"Quantum numbers","text":"","category":"section"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"Quantum numbers can be considered as the conserved labels for the bases of a Hilbert space when a quantum system hosts some symmetries. Here we only implement Abelian quantum numbers because non-Abelian ones are far more complicated yet much less used. In practice, quantum numbers can be integers or half integers, therefore, we use real numbers to denote them in this module for simplicity. Independent quantum numbers, such as the particle number and the spin z-component, can coexist at the same time. We use type AbelianNumber to represent the complete set of independent ones for a single basis of a Hilbert space, and type AbelianNumbers to represent the whole quantum numbers for the total bases.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/#AbelianNumber","page":"Quantum numbers","title":"AbelianNumber","text":"","category":"section"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"The abstract type for the complete set of independent quantum numbers for a single basis.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"Main features include:","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"function fieldnames: get the names of the quantum numbers\nfunction periods: get the periods of the quantum numbers\narithmetic operations: +, -, *, ^, ⊕, ⊗\nhashable: concrete instances can be used as keys for a dict or a set\niterable: concrete instances are iterable over their values\ncomparable: two concrete instances can be compared","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"In particular, AbelianNumber <: HomoNamedVector{Float}, all features supported by HomoNamedVector are also available for HomoNamedVector. See also HomoNamedVector.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"For convenience, 4 kinds of quantum numbers are predefined in this module, i.e.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"SQN: for spin z-component reserved systems\nPQN: for particle number reserved systems\nSPQN: for both particle number and spin-z component reserved systems\nZ2QN: for systems with a Z_2 conservation quantum number","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"Users who want to define their own Z_N-like quantum numbers must handle the periodicities in the construction function, otherwise, wrong results will be get when arithmetic operations, such as + or -, are involved. It is highly recommended to use the macro @abeliannumber to define your own concrete AbelianNumbers.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/#AbelianNumbers","page":"Quantum numbers","title":"AbelianNumbers","text":"","category":"section"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"The whole quantum numbers for the total bases.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"By design, a AbelianNumbers{QN} has one type parameter:","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"QN<:AbelianNumber: the type of the quantum numbers contained in it","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"And 3 attributes:","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"form::Char: Its form, whose value must be one of the followings\n'G': the general form, which has no restriction for its contents\n'U': the unitary form, which requires no duplicates in its contents\n'C': the canonical form, which requires both no duplicates and ascending-order in its contents\nUsually, G-formed and U-formed AbelianNumberses can be transformed to the corresponding C-formed ones by the sort function.\ncontents::Vector{QN}: The quantum numbers contained in it. To achieve high efficiency, it is required to be an homogenous array of a certain kind of concrete AbelianNumber.\nindptr::Vector{Int}: The indptr of the quantum numbers contained in it, which is similar to the colptr attribute of a CSC sparse matrix and records the compression info of its contents.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"Main features include:","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"function eltype: get the concrete type of the quantum numbers it contains\nindex access: get the contents directly by the getindex function\narithmetic operations: +, -, *, ^, ⊗, ⊕\niterable: various iteration supports, including functions such as iterate, keys, values and pairs","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"For a complete summation of its features, please refer to the manual.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"For convenience, 5 functions are predefined to generate the AbelianNumbers of common physical systems, i.e.","category":"page"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"SQNS: a single spin\nPQNS: a single-particle state with at most N identical particles\nSzPQNS: a single-particle state with at most one particle whose spin-z component is Sz\nSPQNS: a single site with internal degrees of freedom that can be ascribed to a spin\nZ2QNS: any Z_2 Hilbert space","category":"page"},{"location":"man/Mathematics/QuantumNumbers/#qnmanual","page":"Quantum numbers","title":"Manual","text":"","category":"section"},{"location":"man/Mathematics/QuantumNumbers/","page":"Quantum numbers","title":"Quantum numbers","text":"Modules = [QuantumNumbers]\nOrder = [:module, :constant, :type, :macro, :function]","category":"page"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qnbruteforce","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qnbruteforce","text":"qnbruteforce\n\nIndicate that decompose uses the brute force method.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qncompression","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qncompression","text":"qncompression\n\nIndicate that findall and permute use the compressed contents.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qncontents","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qncontents","text":"qncontents\n\nIndicate that expand uses the compressed/expanded contents.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qncounts","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qncounts","text":"qncounts\n\nIndicate that methods with AbelianNumbers use the count number of the compressed contents.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qnexpansion","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qnexpansion","text":"qnexpansion\n\nIndicate that findall and permute use the expanded contents.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qnindices","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qnindices","text":"qnindices\n\nIndicate that expand uses the indices of the compressed/expanded contents.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qnindptr","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qnindptr","text":"qnindptr\n\nIndicate that methods with AbelianNumbers use the index pointer of the compressed contents.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.qnmontecarlo","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.qnmontecarlo","text":"qnmontecarlo\n\nIndicate that decompose uses the Monte Carlo method.\n\n\n\n\n\n","category":"constant"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","text":"Abstract type for all concrete quantum numbers for a single basis.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers","text":"AbelianNumbers(form::Char, contents::Vector{<:AbelianNumber}, counts::Vector{Int}, ::QNCounts)\nAbelianNumbers(form::Char, contents::Vector{<:AbelianNumber}, indptr::Vector{Int}, ::QNIndptr)\n\nThe whole quantum numbers of the total bases of a Hilbert space.\n\nThe default constructors construct an AbelianNumbers from a vector of concrete quantum numbers and an vector containing their counts or indptr.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers-2","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers","text":"AbelianNumbers(qn::AbelianNumber, count::Int=1)\n\nConstruct an AbelianNumbers with one unique quantum number which occurs count times.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers-Tuple{OrderedCollections.OrderedDict{var\"#s15\",var\"#s14\"} where var\"#s14\"<:(UnitRange{var\"#s13\"} where var\"#s13\"<:Integer) where var\"#s15\"<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers","text":"AbelianNumbers(od::OrderedDict{<:AbelianNumber, <:UnitRange{<:Integer}})\n\nConstruct an AbelianNumbers from an ordered dict containing concrete quantum numbers and their slices.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers-Tuple{OrderedCollections.OrderedDict{var\"#s17\",var\"#s15\"} where var\"#s15\"<:Integer where var\"#s17\"<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers","text":"AbelianNumbers(od::OrderedDict{<:AbelianNumber, <:Integer})\n\nConstruct an AbelianNumbers from an ordered dict containing concrete quantum numbers and their counts.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.PQN","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.PQN","text":"PQN(N::Real)\n\nThe concrete AbelianNumber of a quantum system with particle number N conserved.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.SPQN","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.SPQN","text":"SPQN(N::Real, Sz::Real)\n\nThe concrete AbelianNumber of a quantum system with both particle number N and spin z-component Sz conserved.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.SQN","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.SQN","text":"SQN(Sz::Real)\n\nThe concrete AbelianNumber of a quantum system with spin z-component Sz conserved.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.Z2QN","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.Z2QN","text":"Z2QN(N::Real)\n\nThe concrete AbelianNumber of a quantum system with a Z₂-like conserved quantity.\n\n\n\n\n\n","category":"type"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.@abeliannumber-Tuple{Any,Any,Any}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.@abeliannumber","text":"@abeliannumber typename fieldnames fieldperiods\n\nConstruct a concrete AbelianNumber with the type name being typename, fieldnames specified by fieldnames and periods specified by fieldperiods.\n\n\n\n\n\n","category":"macro"},{"location":"man/Mathematics/QuantumNumbers/#Base.:*-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber,Integer}","page":"Quantum numbers","title":"Base.:*","text":"*(qn::AbelianNumber, factor::Integer) -> typeof(qn)\n*(factor::Integer, qn::AbelianNumber) -> typeof(qn)\n*(qns::AbelianNumbers, factor::Integer) -> AbelianNumbers\n*(factor::Integer, qns::AbelianNumbers) -> AbelianNumbers\n\nOverloaded * operator for the multiplication between an integer and an AbelianNumber or an AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.:+-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber}","page":"Quantum numbers","title":"Base.:+","text":"+(qn::AbelianNumber) -> typeof(qn)\n+(qn::QN, qns::QN...) where QN<:AbelianNumber -> QN\n+(qns::AbelianNumbers) -> AbelianNumbers\n+(qn::QN, qns::AbelianNumbers{QN}) where QN<:AbelianNumber -> AbelianNumbers{QN}\n+(qns::AbelianNumbers{QN}, qn::QN) where QN<:AbelianNumber -> AbelianNumbers{QN}\n\nOverloaded + operator for AbelianNumber and AbelianNumbers.\n\nnote: Note\nThe addition between an AbelianNumbers and an AbelianNumber is just a global shift of the contents of the AbelianNumbers by the AbelianNumber, therefore, the result is an AbelianNumbers.\n+ cannot be used between two AbelianNumbers because the result is ambiguous. Instead, use ⊕ for direct sum and ⊗ for direct product.\nTo ensure type stability, two AbelianNumber can be added together if and only if they are of the same type.\nSimilarly, an AbelianNumber and an AbelianNumbers can be added together if and only if the former's type is the same with the latter's eltype.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.:--Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber}","page":"Quantum numbers","title":"Base.:-","text":"-(qn::AbelianNumber) -> typeof(qn)\n-(qn1::QN, qn2::QN) where QN<:AbelianNumber -> QN\n-(qns::AbelianNumbers) -> AbelianNumbers\n-(qn::QN, qns::AbelianNumbers{QN}) where QN<:AbelianNumber -> AbelianNumbers{QN}\n-(qns::AbelianNumbers{QN}, qn::QN) where QN<:AbelianNumber -> AbelianNumbers{QN}\n\nOverloaded - operator for AbelianNumber and AbelianNumbers.\n\nnote: Note\nThe subtraction between an AbelianNumbers and an AbelianNumber is just a global shift of the contents of the AbelianNumbers by the AbelianNumber, therefore, the result is an AbelianNumbers.\n- cannot be used between two AbelianNumbers because the result is ambiguous. Instead, use ⊕ with signs for direct sum and ⊗ with signs for direct product.\nTo ensure type stability, an AbelianNumber can be subtracted by another AbelianNumber if and only if they are of the same type.\nSimilarly, an AbelianNumber can be subtracted by an AbelianNumbers or vice versa if and only if the former's type is the same with the latter's eltype.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.:==-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.:==","text":"==(qns1::AbelianNumbers, qns2::AbelianNumbers) -> Bool\n\nOverloaded equivalent operator. Two AbelianNumberses are equal to each other if and only if both their contentses and indptrs are elementwise equal to each other.\n\nnote: Note\nIt is not necessary for two AbelianNumberses to have the same eltype nor the same form to be equal to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.:^-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber,Integer}","page":"Quantum numbers","title":"Base.:^","text":"^(qn::AbelianNumber, factor::Integer) -> typeof(qn)\n^(qns::AbelianNumbers, factor::Integer) -> AbelianNumbers\n\nOverloaded ^ operator for AbelianNumber and AbelianNumbers. This operation translates into the direct product of factor copies of qn or qns.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.eltype-Union{Tuple{Type{var\"#s21\"} where var\"#s21\"<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers{QN}}, Tuple{QN}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"Base.eltype","text":"eltype(::Type{<:AbelianNumbers{QN}}) where {QN<:AbelianNumber}\neltype(qns::AbelianNumbers)\n\nGet the type of the concrete AbelianNumber contained in an AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.filter-Union{Tuple{QN}, Tuple{QN,QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers{QN}}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"Base.filter","text":"filter(target::QN, qns::AbelianNumbers{QN}) where QN<:AbelianNumber -> AbelianNumbers{QN}\nfilter(targets::NTuple{N, QN}, qns::AbelianNumbers{QN}) where {N, QN<:AbelianNumber} -> AbelianNumbers{QN}\n\nFind a subset of an AbelianNumbers by picking out the quantum numbers in targets.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.findall-Union{Tuple{QN}, Tuple{QN,QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers{QN},QuantumLattices.Mathematics.QuantumNumbers.QNCompression}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"Base.findall","text":"findall(target::QN, qns::AbelianNumbers{QN}, ::QNCompression) where QN<:AbelianNumber -> Vector{Int}\nfindall(target::QN, qns::AbelianNumbers{QN}, ::QNExpansion) where QN<:AbelianNumber -> Vector{Int}\nfindall(targets::NTuple{N, QN}, qns::AbelianNumbers{QN}, ::QNCompression) where {N, QN<:AbelianNumber} -> Vector{Int}\nfindall(targets::NTuple{N, QN}, qns::AbelianNumbers{QN}, ::QNExpansion) where {N, QN<:AbelianNumber} -> Vector{Int}\n\nFind all the indices of the target quantum numbers in the contents (qncompression case) or the expansion (qnexpansion case) of an AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.getindex-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,Int64}","page":"Quantum numbers","title":"Base.getindex","text":"getindex(qns::AbelianNumbers, index::Int) -> eltype(qns)\ngetindex(qns::AbelianNumbers, slice::UnitRange{Int}) -> AbelianNumbers\ngetindex(qns::AbelianNumbers, indices::Vector{Int}) -> AbelianNumbers\n\nOverloaded [] operator.\n\nnote: Note\nFor an AbelianNumbers, all these getindex functions act on its contents, i.e. its compressed data, but not on its expansion, i.e. the uncompressed data. This definition is consistent with the length function.\nWhen the index is an integer, the result is an AbelianNumber, while when the index is a unit range or a vector of intgers, the result is an AbelianNumbers. The logic is quite reasonable because such behaviors are much alike to those of a vector container.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.isequal-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.isequal","text":"isequal(qns1::AbelianNumbers, qns2::AbelianNumbers) -> Bool\n\nOverloaded equivalent operator. Two AbelianNumberses are equal to each other if and only if both their contentses and indptrs are elementwise equal to each other.\n\nnote: Note\nIt is not necessary for two AbelianNumberses to have the same eltype nor the same form to be equal to each other.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.iterate","page":"Quantum numbers","title":"Base.iterate","text":"iterate(qns::AbelianNumbers, state::Int=1)\niterate(rv::Iterators.Reverse{<:AbelianNumbers}, state::Int=length(rv.itr, false))\n\nIterate or reversely iterate over the concrete AbelianNumbers contained in an AbelianNumbers.\n\n\n\n\n\n","category":"function"},{"location":"man/Mathematics/QuantumNumbers/#Base.keys-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.keys","text":"keys(qns::AbelianNumbers) -> Vector{qns|>eltype}\n\nIterate over the concrete AbelianNumbers contained in an AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.kron-Union{Tuple{QN}, Tuple{Type{QN},QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber,QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"Base.kron","text":"kron(::Type{QN}, qn1::AbelianNumber, qn2::AbelianNumber) where QN<:AbelianNumber -> QN\nkron(qns::Vararg{<:AbelianNumber, N}; signs::NTuple{N, Int}=ntuple(i->1, Val(N))) where N -> eltype(qns)\nkron(qnses::Vararg{AbelianNumbers{QN}, N}; signs::NTuple{N, Int}=ntuple(i->1, Val(N))) where {N, QN<:AbelianNumber} -> AbelianNumbers{QN}\n\nGet the direct product of some AbelianNumbers or AbelianNumberses.\n\nnote: Note\nPhysically, the direct product of a couple of AbelianNumbers or AbelianNumberses are defined by the direct product of the bases of the Hilbert spaces they represent. Therefore, AbelianNumbers with differenct types or AbelianNumberses with differenct eltypes are allowed to be direct producted in principle. However, for simplicity, we only implement a method which handle the situation of two AbelianNumbers with differenct types. The type of the result should be provided as the first parameter. Note that in this situation, the fieldnames and periods of the result type must be exactly equal to the flattened fieldnames and periods of the two input AbelianNumbers, which means, even the order of the input AbelianNumbers matters.\nApparently, the dimension of the result equals the product of those of the inputs. Therefore, the direct product of AbelianNumbers is also an AbelianNumber since its dimension is still one.\nFor other situations except the one mentioned in Note.1, the input AbelianNumbers or AbelianNumberses must be homogenous. Meanwhile, signs can also be provided for these situations. Note that each quantum number in the contents of the result is obtained by a summation of the corresponding quanum numbers out of the inputs with the correct signs. This is a direct observation of the Abelian nature of our quantum numbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.length-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.length","text":"length(qns::AbelianNumbers) -> Int\n\nGet the number of unduplicate qunatum numbers in the AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.pairs-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,Union{QuantumLattices.Mathematics.QuantumNumbers.QNCounts, QuantumLattices.Mathematics.QuantumNumbers.QNIndptr}}","page":"Quantum numbers","title":"Base.pairs","text":"pairs(qns::AbelianNumbers, choice::Union{QNIndptr, QNCounts})\n\nIterate over the AbelianNumber=>slice or AbelianNumber=>count pairs.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.show-Tuple{IO,QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.show","text":"show(io::IO, qns::AbelianNumbers)\n\nShow an AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.sort-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.sort","text":"sort(qns::AbelianNumbers) -> Tuple{AbelianNumbers, Vector{Int}}\n\nSort the quantum numbers of an AbelianNumber, return the sorted AbelianNumber and the permutation array that sorts the expansion of the original AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.string-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"Base.string","text":"string(qns::AbelianNumbers) -> String\n\nConvert an AbelianNumbers to string.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.union-Union{Tuple{Vararg{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber,N}}, Tuple{N}} where N","page":"Quantum numbers","title":"Base.union","text":"union(qns::Vararg{<:AbelianNumber, N}; signs::NTuple{N, Int}=ntuple(i->1, Val(N))) where N -> AbelianNumbers\nunion(qnses::Vararg{AbelianNumbers{QN}, N}; signs::NTuple{N, Int}=ntuple(i->1, Val(N))) where {N, QN<:AbelianNumber} -> AbelianNumbers{QN}\n\nGet the direct sum of some AbelianNumbers or AbelianNumberses.\n\nnote: Note\nPhysically, the direct sum of a couple of AbelianNumbers or AbelianNumberses is defined by the direct sum of the bases of the Hilbert spaces they represent. Therefore, the input AbelianNumbers or AbelianNumberses must be homogenous. Inhomogenous 'AbelianNumber's must be direct producted first to ensure homogenity before the direct sum.\nApparently, the dimension of the result equals the summation of those of the inputs, which means, even for AbelianNumbers, the result will be naturally an AbelianNumbers because the dimension of the result is larger than 1.\nSigns of AbelianNumbers or AbelianNumberses can be provided when getting their direct sums.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#Base.values-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,QuantumLattices.Mathematics.QuantumNumbers.QNIndptr}","page":"Quantum numbers","title":"Base.values","text":"values(qns::AbelianNumbers, ::QNIndptr)\nvalues(qns::AbelianNumbers, ::QNCounts)\n\nIterate over the slices/counts of the AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.:⊕-Tuple{Vararg{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber,N} where N}","page":"Quantum numbers","title":"QuantumLattices.Interfaces.:⊕","text":"⊕(qns::AbelianNumber...) -> AbelianNumbers{qns|>eltype}\n⊕(qnses::AbelianNumbers...) -> qnses|>eltype\n\nGet the direct sum of some AbelianNumbers or AbelianNumberses.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.:⊗-Tuple{Vararg{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber,N} where N}","page":"Quantum numbers","title":"QuantumLattices.Interfaces.:⊗","text":"⊗(qns::AbelianNumber...) -> eltype(qns)\n⊗(qnses::AbelianNumbers...) -> eltype(qnses)\n\nGet the direct product of some AbelianNumbers or AbelianNumberses.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.decompose-Union{Tuple{QN}, Tuple{N}, Tuple{Tuple{Vararg{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers{QN},N}},QN,Tuple{Vararg{Int64,N}},QuantumLattices.Mathematics.QuantumNumbers.QNBruteForce}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber where N","page":"Quantum numbers","title":"QuantumLattices.Interfaces.decompose","text":"decompose(qnses::NTuple{N, AbelianNumbers{QN}}, target::QN, signs::NTuple{N, Int}, ::QNBruteForce; nmax::Int=20) where {N, QN<:AbelianNumber} -> Vector{NTuple{N, Int}}\ndecompose(qnses::NTuple{N, AbelianNumbers{QN}}, target::QN, signs::NTuple{N, Int}, ::QNMonteCarlo; nmax::Int=20) where {N, QN<:AbelianNumber} -> Vector{NTuple{N, Int}}\n\nFind a couple of decompositions of target with respect to qnses.\n\nnote: Note\nA tuple of integers (i₁, i₂, ...) is called a decomposition of a given target with respect to the given qnses if and only if they satisfy the \"decomposition rule\":sum_textj textsignstextjtimestextqnsestextjtexti_textj==texttargetThis equation is in fact a kind of a set of restricted linear Diophantine equations. Indeed, our quantum numbers are always discrete Abelian ones and all instances of a concrete AbelianNumber forms a module over the ring of integers. Therefore, each quantum number can be represented as a integral multiple of the unit element of the Abelian module, which results in the final reduction of the above equation to a set of linear Diophantine equations. Then finding a decomposition is equivalent to find a solution of the reduced linear Diophantine equations, with the restriction that the quantum numbers constructed from the solution should be in the corresponding qnses. Here we provide two methods to find such decompositions, one is by brute force (qnbruteforce case), and the other is by Monte Carlo simultatioins (qnmontecarlo case).\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.dimension-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers}","page":"Quantum numbers","title":"QuantumLattices.Interfaces.dimension","text":"dimension(qns::AbelianNumbers) -> Int\n\nThe dimension of the Hilbert space an AbelianNumbers represents.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.dimension-Tuple{Type{var\"#s21\"} where var\"#s21\"<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber}","page":"Quantum numbers","title":"QuantumLattices.Interfaces.dimension","text":"dimension(::Type{<:AbelianNumber}) -> Int\ndimension(::AbelianNumber) -> Int\n\nThe dimension of the Hilbert space an AbelianNumber represents. Apparently, this is always 1.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.expand-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,QuantumLattices.Mathematics.QuantumNumbers.QNContents}","page":"Quantum numbers","title":"QuantumLattices.Interfaces.expand","text":"expand(qns::AbelianNumbers, ::QNContents) -> Vector{qns|>eltype}\nexpand(qns::AbelianNumbers, ::QNIndices) -> Vector{Int}\n\nExpand the contents (qncontents case) or indices (qnindices case) of an AbelianNumbers to the uncompressed form.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.permute-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,Array{Int64,1},QuantumLattices.Mathematics.QuantumNumbers.QNCompression}","page":"Quantum numbers","title":"QuantumLattices.Interfaces.permute","text":"permute(qns::AbelianNumbers, permutation::Vector{Int}, ::QNCompression) -> AbelianNumbers\npermute(qns::AbelianNumbers, permutation::Vector{Int}, ::QNExpansion) -> AbelianNumbers\n\nReorder the quantum numbers contained in an AbelianNumbers with a permutation and return the new one.\n\nFor qncompression case, the permutation is for the compressed contents of the original AbelianNumbers while for qnexpansion case, the permutation is for the expanded contents of the original AbelianNumbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.regularize!-Union{Tuple{QN}, Tuple{Type{QN},AbstractArray{var\"#s19\",1} where var\"#s19\"<:Real}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"QuantumLattices.Interfaces.regularize!","text":"regularize!(::Type{QN}, array::AbstractVector{<:Real}) where QN<:AbelianNumber -> typeof(array)\nregularize!(::Type{QN}, array::AbstractMatrix{<:Real}) where QN<:AbelianNumber -> typeof(array)\n\nRegularize the elements of an array in place so that it can represent quantum numbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Interfaces.regularize-Union{Tuple{QN}, Tuple{Type{QN},Union{AbstractArray{var\"#s20\",1} where var\"#s20\"<:Real, AbstractArray{var\"#s19\",2} where var\"#s19\"<:Real}}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber","page":"Quantum numbers","title":"QuantumLattices.Interfaces.regularize","text":"regularize(::Type{QN}, array::Union{AbstractVector{<:Real}, AbstractMatrix{<:Real}}) where QN<:AbelianNumber -> typeof(array)\n\nRegularize the elements of an array and return a copy that can represent quantum numbers.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.PQNS-Tuple{Real}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.PQNS","text":"PQNS(N::Real) -> AbelianNumbers{PQN}\n\nConstruct the AbelianNumbers of the Hilbert space of a single-particle state with at most N identical particles.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.SPQNS-Tuple{Real}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.SPQNS","text":"SPQNS(S::Real) -> AbelianNumbers{SPQN}\n\nConstruct the AbelianNumbers of the Hilbert space of a single site with internal degrees of freedom that can be ascribed to a spin S.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.SQNS-Tuple{Real}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.SQNS","text":"SQNS(S::Real) -> AbelianNumbers{SQN}\n\nConstruct the AbelianNumbers of the Hilbert space of a signle spin S.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.SzPQNS-Tuple{Real}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.SzPQNS","text":"SzPQNS(Sz::Real) -> AbelianNumbers{SPQN}\n\nConstruct the AbelianNumbers of the Hilbert space of a single-paritcle state with at most one particle whose spin-z component is Sz.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.Z2QNS-Tuple{}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.Z2QNS","text":"Z2QNS() -> AbelianNumbers{Z2QN}\n\nConstruct the AbelianNumbers of a Z_2 Hilbert space.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.toordereddict-Tuple{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers,QuantumLattices.Mathematics.QuantumNumbers.QNIndptr}","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.toordereddict","text":"toordereddict(qns::AbelianNumbers, ::QNIndptr) -> OrderedDict{qns|>eltype, UnitRange{Int}}\ntoordereddict(qns::AbelianNumbers, ::QNCounts) -> OrderedDict{qns|>eltype, Int}\n\nConvert an AbelianNumbers to an ordered dict.\n\n\n\n\n\n","category":"method"},{"location":"man/Mathematics/QuantumNumbers/#QuantumLattices.Mathematics.QuantumNumbers.ukron-Union{Tuple{Vararg{QuantumLattices.Mathematics.QuantumNumbers.AbelianNumbers{QN},N}}, Tuple{QN}, Tuple{N}} where QN<:QuantumLattices.Mathematics.QuantumNumbers.AbelianNumber where N","page":"Quantum numbers","title":"QuantumLattices.Mathematics.QuantumNumbers.ukron","text":"ukron(qnses::Vararg{AbelianNumbers{QN}, N}; signs::NTuple{N, Int}=ntuple(i->1, N)) where {N, QN<:AbelianNumber} -> AbelianNumbers{QN}, Dict{QN, Dict{NTuple{N, QN}, UnitRange{Int}}}\n\nUnitary Kronecker product of several AbelianNumberses. The product result as well as the records of the product will be returned.\n\nnote: Note\nAll input AbelianNumbers must be 'U' formed or 'C' formed.\nSince duplicate quantum number are not allowed in 'U' formed and 'C' formed AbelianNumberses, in general, there exists a merge process of duplicate quantum numbers in the product result. Therefore, records are needed to keep track of this process, which will be returned along with the product result. The records are stored in a Dict{QN, Dict{NTuple{N, QN}, UnitRange{Int}}} typed dict, in which, for each unduplicate quantum number qn in the product result, there exist a record Dict((qn₁, qn₂, ...)=>start:stop, ...) telling what quantum numbers (qn₁, qn₂, ...) a mereged duplicate qn comes from and what slice start:stop this merged duplicate corresponds.\n\n\n\n\n\n","category":"method"}]
}
